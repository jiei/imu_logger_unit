
imu_logger_unit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08009a90  08009a90  00019a90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e18  08009e18  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08009e18  08009e18  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009e18  08009e18  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e18  08009e18  00019e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e1c  08009e1c  00019e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200001dc  08009ffc  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  08009ffc  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001307a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029b2  00000000  00000000  00033286  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001108  00000000  00000000  00035c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa0  00000000  00000000  00036d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a98a  00000000  00000000  00037ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e276  00000000  00000000  0005266a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e512  00000000  00000000  000608e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eedf2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005954  00000000  00000000  000eee70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a74 	.word	0x08009a74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009a74 	.word	0x08009a74

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c9e:	4b23      	ldr	r3, [pc, #140]	; (8000d2c <MX_GPIO_Init+0xa4>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	4a22      	ldr	r2, [pc, #136]	; (8000d2c <MX_GPIO_Init+0xa4>)
 8000ca4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ca8:	6153      	str	r3, [r2, #20]
 8000caa:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <MX_GPIO_Init+0xa4>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <MX_GPIO_Init+0xa4>)
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	4a1c      	ldr	r2, [pc, #112]	; (8000d2c <MX_GPIO_Init+0xa4>)
 8000cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc0:	6153      	str	r3, [r2, #20]
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_GPIO_Init+0xa4>)
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_GPIO_Init+0xa4>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	4a16      	ldr	r2, [pc, #88]	; (8000d2c <MX_GPIO_Init+0xa4>)
 8000cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd8:	6153      	str	r3, [r2, #20]
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_GPIO_Init+0xa4>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	210a      	movs	r1, #10
 8000cea:	4811      	ldr	r0, [pc, #68]	; (8000d30 <MX_GPIO_Init+0xa8>)
 8000cec:	f001 f988 	bl	8002000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cfc:	f107 030c 	add.w	r3, r7, #12
 8000d00:	4619      	mov	r1, r3
 8000d02:	480c      	ldr	r0, [pc, #48]	; (8000d34 <MX_GPIO_Init+0xac>)
 8000d04:	f000 fff2 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000d08:	230a      	movs	r3, #10
 8000d0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4804      	ldr	r0, [pc, #16]	; (8000d30 <MX_GPIO_Init+0xa8>)
 8000d20:	f000 ffe4 	bl	8001cec <HAL_GPIO_Init>

}
 8000d24:	bf00      	nop
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	48000400 	.word	0x48000400
 8000d34:	48001400 	.word	0x48001400

08000d38 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000d3c:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <MX_I2C1_Init+0x74>)
 8000d3e:	4a1c      	ldr	r2, [pc, #112]	; (8000db0 <MX_I2C1_Init+0x78>)
 8000d40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <MX_I2C1_Init+0x74>)
 8000d44:	4a1b      	ldr	r2, [pc, #108]	; (8000db4 <MX_I2C1_Init+0x7c>)
 8000d46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d48:	4b18      	ldr	r3, [pc, #96]	; (8000dac <MX_I2C1_Init+0x74>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <MX_I2C1_Init+0x74>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <MX_I2C1_Init+0x74>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <MX_I2C1_Init+0x74>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <MX_I2C1_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <MX_I2C1_Init+0x74>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <MX_I2C1_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d72:	480e      	ldr	r0, [pc, #56]	; (8000dac <MX_I2C1_Init+0x74>)
 8000d74:	f001 f976 	bl	8002064 <HAL_I2C_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d7e:	f000 fad5 	bl	800132c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d82:	2100      	movs	r1, #0
 8000d84:	4809      	ldr	r0, [pc, #36]	; (8000dac <MX_I2C1_Init+0x74>)
 8000d86:	f001 fcdf 	bl	8002748 <HAL_I2CEx_ConfigAnalogFilter>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d90:	f000 facc 	bl	800132c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d94:	2100      	movs	r1, #0
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_I2C1_Init+0x74>)
 8000d98:	f001 fd21 	bl	80027de <HAL_I2CEx_ConfigDigitalFilter>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000da2:	f000 fac3 	bl	800132c <Error_Handler>
  }

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	2000020c 	.word	0x2000020c
 8000db0:	40005400 	.word	0x40005400
 8000db4:	2000090e 	.word	0x2000090e

08000db8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <HAL_I2C_MspInit+0x7c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d127      	bne.n	8000e2a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <HAL_I2C_MspInit+0x80>)
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	4a16      	ldr	r2, [pc, #88]	; (8000e38 <HAL_I2C_MspInit+0x80>)
 8000de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de4:	6153      	str	r3, [r2, #20]
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <HAL_I2C_MspInit+0x80>)
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000df2:	23c0      	movs	r3, #192	; 0xc0
 8000df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df6:	2312      	movs	r3, #18
 8000df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e02:	2304      	movs	r3, #4
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480b      	ldr	r0, [pc, #44]	; (8000e3c <HAL_I2C_MspInit+0x84>)
 8000e0e:	f000 ff6d 	bl	8001cec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <HAL_I2C_MspInit+0x80>)
 8000e14:	69db      	ldr	r3, [r3, #28]
 8000e16:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <HAL_I2C_MspInit+0x80>)
 8000e18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e1c:	61d3      	str	r3, [r2, #28]
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_I2C_MspInit+0x80>)
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	3728      	adds	r7, #40	; 0x28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40005400 	.word	0x40005400
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	48000400 	.word	0x48000400

08000e40 <lpme1_get_timestamp>:
  *@brief: Get system time stamp
  *@para: Pointer to float variable use to save read value
  *@ret: Status, return LPME1_OK if read success otherwise return LPME1_ERROR
  */
lpme1_status_t lpme1_get_timestamp(float *time)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
    uint8_t buffer[4];
    if(lpme1_read_buffer(TIMESTAMP_0, buffer, 4) == LPME1_OK)
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	2204      	movs	r2, #4
 8000e4e:	4619      	mov	r1, r3
 8000e50:	2020      	movs	r0, #32
 8000e52:	f000 f889 	bl	8000f68 <lpme1_read_buffer>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d10b      	bne.n	8000e74 <lpme1_get_timestamp+0x34>
    {
        *time = uint8_to_float(buffer);
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 f860 	bl	8000f26 <uint8_to_float>
 8000e66:	eef0 7a40 	vmov.f32	s15, s0
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	edc3 7a00 	vstr	s15, [r3]
        return LPME1_OK;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e000      	b.n	8000e76 <lpme1_get_timestamp+0x36>
    }
    else
        return LPME1_ERROR;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <lpme1_get_gyr>:
  *@brief: Get gyroscope data
  *@para: Pointer to float array that have 3 elements at least
  *@ret: Status, return LPME1_OK if read success otherwise return LPME1_ERROR
  */
lpme1_status_t lpme1_get_gyr(float *gyr)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
    DataDecoder data[3];
    if(lpme1_read_buffer(GYR_X_0, (uint8_t *)data[0].u8vals, 12) == LPME1_OK)
 8000e86:	f107 0308 	add.w	r3, r7, #8
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	2030      	movs	r0, #48	; 0x30
 8000e90:	f000 f86a 	bl	8000f68 <lpme1_read_buffer>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d116      	bne.n	8000ec8 <lpme1_get_gyr+0x4a>
    {
        for(uint8_t i = 0; i<3; i++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	75fb      	strb	r3, [r7, #23]
 8000e9e:	e00e      	b.n	8000ebe <lpme1_get_gyr+0x40>
        {
            *(gyr+i) = data[i].fval;
 8000ea0:	7dfa      	ldrb	r2, [r7, #23]
 8000ea2:	7dfb      	ldrb	r3, [r7, #23]
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	440b      	add	r3, r1
 8000eaa:	0092      	lsls	r2, r2, #2
 8000eac:	f107 0118 	add.w	r1, r7, #24
 8000eb0:	440a      	add	r2, r1
 8000eb2:	3a10      	subs	r2, #16
 8000eb4:	6812      	ldr	r2, [r2, #0]
 8000eb6:	601a      	str	r2, [r3, #0]
        for(uint8_t i = 0; i<3; i++)
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	75fb      	strb	r3, [r7, #23]
 8000ebe:	7dfb      	ldrb	r3, [r7, #23]
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d9ed      	bls.n	8000ea0 <lpme1_get_gyr+0x22>
        }
        return LPME1_OK;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e000      	b.n	8000eca <lpme1_get_gyr+0x4c>
    }
    else
        return LPME1_ERROR;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <lpme1_get_euler>:
  *@brief: Get euler angle
  *@para: Pointer to float array that have 3 elements at least
  *@ret: Status, return LPME1_OK if read success otherwise return LPME1_ERROR
  */
lpme1_status_t lpme1_get_euler(float *euler)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
    DataDecoder data[3];
    if(lpme1_read_buffer(EULER_X_0, (uint8_t *)data[0].u8vals, 12) == LPME1_OK)
 8000eda:	f107 0308 	add.w	r3, r7, #8
 8000ede:	220c      	movs	r2, #12
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	2048      	movs	r0, #72	; 0x48
 8000ee4:	f000 f840 	bl	8000f68 <lpme1_read_buffer>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d116      	bne.n	8000f1c <lpme1_get_euler+0x4a>
    {
        for(uint8_t i = 0; i<3; i++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	75fb      	strb	r3, [r7, #23]
 8000ef2:	e00e      	b.n	8000f12 <lpme1_get_euler+0x40>
        {
            *(euler+i) = data[i].fval;
 8000ef4:	7dfa      	ldrb	r2, [r7, #23]
 8000ef6:	7dfb      	ldrb	r3, [r7, #23]
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	440b      	add	r3, r1
 8000efe:	0092      	lsls	r2, r2, #2
 8000f00:	f107 0118 	add.w	r1, r7, #24
 8000f04:	440a      	add	r2, r1
 8000f06:	3a10      	subs	r2, #16
 8000f08:	6812      	ldr	r2, [r2, #0]
 8000f0a:	601a      	str	r2, [r3, #0]
        for(uint8_t i = 0; i<3; i++)
 8000f0c:	7dfb      	ldrb	r3, [r7, #23]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	75fb      	strb	r3, [r7, #23]
 8000f12:	7dfb      	ldrb	r3, [r7, #23]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d9ed      	bls.n	8000ef4 <lpme1_get_euler+0x22>
        }
        return LPME1_OK;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e000      	b.n	8000f1e <lpme1_get_euler+0x4c>
    }
    else
        return LPME1_ERROR;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <uint8_to_float>:
  *@brief: Convert 4 uint8_t values to float value
  *@para: Pointer to uint8_t array[4];
  *@ret: float value
  */
float uint8_to_float(uint8_t *pu8vals)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b085      	sub	sp, #20
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
    DataDecoder decoder;
    for(uint8_t i = 0; i < 4; i++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	73fb      	strb	r3, [r7, #15]
 8000f32:	e00c      	b.n	8000f4e <uint8_to_float+0x28>
    {
        decoder.u8vals[i] = *(pu8vals +i);
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	441a      	add	r2, r3
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	7812      	ldrb	r2, [r2, #0]
 8000f3e:	f107 0110 	add.w	r1, r7, #16
 8000f42:	440b      	add	r3, r1
 8000f44:	f803 2c08 	strb.w	r2, [r3, #-8]
    for(uint8_t i = 0; i < 4; i++)
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	73fb      	strb	r3, [r7, #15]
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	d9ef      	bls.n	8000f34 <uint8_to_float+0xe>
    }
    return decoder.fval;
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	ee07 3a90 	vmov	s15, r3
}
 8000f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <lpme1_read_buffer>:
  *@para: buf, Pointer to uint8_t array use to save read datas
  *@para: len, data length to be read
  *@ret: Status, return LPME1_OK if read success otherwise return LPME1_ERROR
  */
lpme1_status_t lpme1_read_buffer(uint8_t regaddr,uint8_t *buf,uint8_t len)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af04      	add	r7, sp, #16
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]
 8000f74:	4613      	mov	r3, r2
 8000f76:	71bb      	strb	r3, [r7, #6]
#ifdef USE_IIC
    if(HAL_I2C_Mem_Read(&LPME1_HI2C, LPME1_I2C_ADRRESS, regaddr,
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	b299      	uxth	r1, r3
 8000f7c:	79bb      	ldrb	r3, [r7, #6]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	2264      	movs	r2, #100	; 0x64
 8000f82:	9202      	str	r2, [sp, #8]
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	2164      	movs	r1, #100	; 0x64
 8000f90:	4806      	ldr	r0, [pc, #24]	; (8000fac <lpme1_read_buffer+0x44>)
 8000f92:	f001 f8f7 	bl	8002184 <HAL_I2C_Mem_Read>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d101      	bne.n	8000fa0 <lpme1_read_buffer+0x38>
                        I2C_MEMADD_SIZE_8BIT, buf, len, LPME1_MAX_TIMEOUT)==HAL_OK)
        return LPME1_OK;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e000      	b.n	8000fa2 <lpme1_read_buffer+0x3a>
    else
        return LPME1_ERROR;
 8000fa0:	2300      	movs	r3, #0
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
	while(i--);
	
    return LPME1_OK;
#endif
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	2000020c 	.word	0x2000020c

08000fb0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000fb8:	1d39      	adds	r1, r7, #4
 8000fba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <__io_putchar+0x20>)
 8000fc2:	f003 ff6d 	bl	8004ea0 <HAL_UART_Transmit>
 return ch;
 8000fc6:	687b      	ldr	r3, [r7, #4]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000348 	.word	0x20000348

08000fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fda:	f000 fced 	bl	80019b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fde:	f000 f857 	bl	8001090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe2:	f7ff fe51 	bl	8000c88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fe6:	f000 fc17 	bl	8001818 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000fea:	f7ff fea5 	bl	8000d38 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000fee:	f000 faff 	bl	80015f0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000ff2:	f000 fbe1 	bl	80017b8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000ff6:	f000 faad 	bl	8001554 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8000ffa:	f000 f89d 	bl	8001138 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1)==GPIO_PIN_RESET) {
 8000ffe:	2102      	movs	r1, #2
 8001000:	481f      	ldr	r0, [pc, #124]	; (8001080 <main+0xac>)
 8001002:	f000 ffe5 	bl	8001fd0 <HAL_GPIO_ReadPin>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d11b      	bne.n	8001044 <main+0x70>
		  for(int i=0;i<3;i++){
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	e012      	b.n	8001038 <main+0x64>
		  	  speaker_output(0.5);
 8001012:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001016:	f000 f8e1 	bl	80011dc <speaker_output>
		  	  HAL_Delay(500);
 800101a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800101e:	f000 fd31 	bl	8001a84 <HAL_Delay>
		  	  speaker_output(0);
 8001022:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001084 <main+0xb0>
 8001026:	f000 f8d9 	bl	80011dc <speaker_output>
		  	  HAL_Delay(500);
 800102a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800102e:	f000 fd29 	bl	8001a84 <HAL_Delay>
		  for(int i=0;i<3;i++){
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3301      	adds	r3, #1
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b02      	cmp	r3, #2
 800103c:	dde9      	ble.n	8001012 <main+0x3e>
		  }
		  logger_flag=1;
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <main+0xb4>)
 8001040:	2201      	movs	r2, #1
 8001042:	701a      	strb	r2, [r3, #0]
	  }
	  if(logger_flag==0 && counter>counter_th){
 8001044:	4b10      	ldr	r3, [pc, #64]	; (8001088 <main+0xb4>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	f083 0301 	eor.w	r3, r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0d5      	beq.n	8000ffe <main+0x2a>
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <main+0xb8>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800105a:	4293      	cmp	r3, r2
 800105c:	ddcf      	ble.n	8000ffe <main+0x2a>
	  	  speaker_output(0.5);
 800105e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001062:	f000 f8bb 	bl	80011dc <speaker_output>
	  	  counter=0;
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <main+0xb8>)
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
		  HAL_Delay(1000);
 800106c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001070:	f000 fd08 	bl	8001a84 <HAL_Delay>
		  speaker_output(0);
 8001074:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8001084 <main+0xb0>
 8001078:	f000 f8b0 	bl	80011dc <speaker_output>
	  if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1)==GPIO_PIN_RESET) {
 800107c:	e7bf      	b.n	8000ffe <main+0x2a>
 800107e:	bf00      	nop
 8001080:	48001400 	.word	0x48001400
 8001084:	00000000 	.word	0x00000000
 8001088:	200001f8 	.word	0x200001f8
 800108c:	200001fc 	.word	0x200001fc

08001090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b096      	sub	sp, #88	; 0x58
 8001094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001096:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800109a:	2228      	movs	r2, #40	; 0x28
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f004 faab 	bl	80055fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]
 80010c2:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010c4:	2302      	movs	r3, #2
 80010c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c8:	2301      	movs	r3, #1
 80010ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010cc:	2310      	movs	r3, #16
 80010ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010d8:	4618      	mov	r0, r3
 80010da:	f001 fbcd 	bl	8002878 <HAL_RCC_OscConfig>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010e4:	f000 f922 	bl	800132c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e8:	230f      	movs	r3, #15
 80010ea:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010ec:	2300      	movs	r3, #0
 80010ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f002 fac0 	bl	8003688 <HAL_RCC_ClockConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800110e:	f000 f90d 	bl	800132c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001112:	2321      	movs	r3, #33	; 0x21
 8001114:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4618      	mov	r0, r3
 8001122:	f002 fce7 	bl	8003af4 <HAL_RCCEx_PeriphCLKConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800112c:	f000 f8fe 	bl	800132c <Error_Handler>
  }
}
 8001130:	bf00      	nop
 8001132:	3758      	adds	r7, #88	; 0x58
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <setup>:

/* USER CODE BEGIN 4 */
void setup(){
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
	ConfigOC_Speaker.OCMode = TIM_OCMODE_PWM1;
 800113e:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <setup+0x90>)
 8001140:	2260      	movs	r2, #96	; 0x60
 8001142:	601a      	str	r2, [r3, #0]
	ConfigOC_Speaker.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001144:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <setup+0x90>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
	ConfigOC_Speaker.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800114a:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <setup+0x90>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
	ConfigOC_Speaker.OCFastMode = TIM_OCFAST_DISABLE;
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <setup+0x90>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
	ConfigOC_Speaker.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <setup+0x90>)
 8001158:	2200      	movs	r2, #0
 800115a:	615a      	str	r2, [r3, #20]
	ConfigOC_Speaker.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800115c:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <setup+0x90>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]

	HAL_Delay(300);
 8001162:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001166:	f000 fc8d 	bl	8001a84 <HAL_Delay>
	printf("Timestamp,Yaw Angle,Yaw Speed\r\n");
 800116a:	4818      	ldr	r0, [pc, #96]	; (80011cc <setup+0x94>)
 800116c:	f005 f900 	bl	8006370 <puts>
	HAL_Delay(100);
 8001170:	2064      	movs	r0, #100	; 0x64
 8001172:	f000 fc87 	bl	8001a84 <HAL_Delay>
	while(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 8001176:	e002      	b.n	800117e <setup+0x46>
		HAL_Delay(100);
 8001178:	2064      	movs	r0, #100	; 0x64
 800117a:	f000 fc83 	bl	8001a84 <HAL_Delay>
	while(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 800117e:	4814      	ldr	r0, [pc, #80]	; (80011d0 <setup+0x98>)
 8001180:	f002 fe0a 	bl	8003d98 <HAL_TIM_Base_Start_IT>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f6      	bne.n	8001178 <setup+0x40>
	}
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 800118a:	2104      	movs	r1, #4
 800118c:	4811      	ldr	r0, [pc, #68]	; (80011d4 <setup+0x9c>)
 800118e:	f002 fe63 	bl	8003e58 <HAL_TIM_PWM_Start>

	//Ready beep
	for(int i=0;i<3;i++){
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	e010      	b.n	80011ba <setup+0x82>
		speaker_output(0.5);
 8001198:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800119c:	f000 f81e 	bl	80011dc <speaker_output>
		HAL_Delay(50);
 80011a0:	2032      	movs	r0, #50	; 0x32
 80011a2:	f000 fc6f 	bl	8001a84 <HAL_Delay>
		speaker_output(0);
 80011a6:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80011d8 <setup+0xa0>
 80011aa:	f000 f817 	bl	80011dc <speaker_output>
		HAL_Delay(50);
 80011ae:	2032      	movs	r0, #50	; 0x32
 80011b0:	f000 fc68 	bl	8001a84 <HAL_Delay>
	for(int i=0;i<3;i++){
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3301      	adds	r3, #1
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b02      	cmp	r3, #2
 80011be:	ddeb      	ble.n	8001198 <setup+0x60>
	}
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200002ac 	.word	0x200002ac
 80011cc:	08009a90 	.word	0x08009a90
 80011d0:	20000308 	.word	0x20000308
 80011d4:	200002c8 	.word	0x200002c8
 80011d8:	00000000 	.word	0x00000000

080011dc <speaker_output>:

void speaker_output(float duty){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	ed87 0a01 	vstr	s0, [r7, #4]
	if(duty>0){
 80011e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f2:	dd1e      	ble.n	8001232 <speaker_output+0x56>
		ConfigOC_Speaker.Pulse=(int)(duty*htim3.Init.Period);
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <speaker_output+0x80>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	ee07 3a90 	vmov	s15, r3
 80011fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001200:	edd7 7a01 	vldr	s15, [r7, #4]
 8001204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001208:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800120c:	ee17 2a90 	vmov	r2, s15
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <speaker_output+0x84>)
 8001212:	605a      	str	r2, [r3, #4]
		HAL_TIM_PWM_ConfigChannel(&htim3,&ConfigOC_Speaker,TIM_CHANNEL_2);
 8001214:	2204      	movs	r2, #4
 8001216:	4912      	ldr	r1, [pc, #72]	; (8001260 <speaker_output+0x84>)
 8001218:	4810      	ldr	r0, [pc, #64]	; (800125c <speaker_output+0x80>)
 800121a:	f002 ff8f 	bl	800413c <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 800121e:	2104      	movs	r1, #4
 8001220:	480e      	ldr	r0, [pc, #56]	; (800125c <speaker_output+0x80>)
 8001222:	f002 fe19 	bl	8003e58 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 8001226:	2201      	movs	r2, #1
 8001228:	2102      	movs	r1, #2
 800122a:	480e      	ldr	r0, [pc, #56]	; (8001264 <speaker_output+0x88>)
 800122c:	f000 fee8 	bl	8002000 <HAL_GPIO_WritePin>
		ConfigOC_Speaker.Pulse=0;
		HAL_TIM_PWM_ConfigChannel(&htim3,&ConfigOC_Speaker,TIM_CHANNEL_2);
		HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
	}
}
 8001230:	e010      	b.n	8001254 <speaker_output+0x78>
		ConfigOC_Speaker.Pulse=0;
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <speaker_output+0x84>)
 8001234:	2200      	movs	r2, #0
 8001236:	605a      	str	r2, [r3, #4]
		HAL_TIM_PWM_ConfigChannel(&htim3,&ConfigOC_Speaker,TIM_CHANNEL_2);
 8001238:	2204      	movs	r2, #4
 800123a:	4909      	ldr	r1, [pc, #36]	; (8001260 <speaker_output+0x84>)
 800123c:	4807      	ldr	r0, [pc, #28]	; (800125c <speaker_output+0x80>)
 800123e:	f002 ff7d 	bl	800413c <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001242:	2104      	movs	r1, #4
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <speaker_output+0x80>)
 8001246:	f002 fe07 	bl	8003e58 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	2102      	movs	r1, #2
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <speaker_output+0x88>)
 8001250:	f000 fed6 	bl	8002000 <HAL_GPIO_WritePin>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200002c8 	.word	0x200002c8
 8001260:	200002ac 	.word	0x200002ac
 8001264:	48000400 	.word	0x48000400

08001268 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001268:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af04      	add	r7, sp, #16
 8001270:	6078      	str	r0, [r7, #4]
  if (htim == &htim2){
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a25      	ldr	r2, [pc, #148]	; (800130c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d13f      	bne.n	80012fa <HAL_TIM_PeriodElapsedCallback+0x92>
	  if(lpme1_get_timestamp(&lpme1Data.time)==LPME1_OK) HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);	//For instant visual debug
 800127a:	4825      	ldr	r0, [pc, #148]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800127c:	f7ff fde0 	bl	8000e40 <lpme1_get_timestamp>
 8001280:	4603      	mov	r3, r0
 8001282:	2b01      	cmp	r3, #1
 8001284:	d103      	bne.n	800128e <HAL_TIM_PeriodElapsedCallback+0x26>
 8001286:	2108      	movs	r1, #8
 8001288:	4822      	ldr	r0, [pc, #136]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800128a:	f000 fed1 	bl	8002030 <HAL_GPIO_TogglePin>
	  //lpme1_get_acc(lpme1Data.acc);
	  lpme1_get_gyr(lpme1Data.gyr);
 800128e:	4822      	ldr	r0, [pc, #136]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001290:	f7ff fdf5 	bl	8000e7e <lpme1_get_gyr>
	  //lpme1_get_mag(lpme1Data.mag);
	  lpme1_get_euler(lpme1Data.euler);
 8001294:	4821      	ldr	r0, [pc, #132]	; (800131c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001296:	f7ff fe1c 	bl	8000ed2 <lpme1_get_euler>
	  //lpme1_get_quat(lpme1Data.quat);

	  if(logger_flag==1){
 800129a:	4b21      	ldr	r3, [pc, #132]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d022      	beq.n	80012e8 <HAL_TIM_PeriodElapsedCallback+0x80>
		  printf("%.3f,%f,%.3f\r\n", lpme1Data.time, lpme1Data.euler[2], lpme1Data.gyr[2]);
 80012a2:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f94e 	bl	8000548 <__aeabi_f2d>
 80012ac:	4680      	mov	r8, r0
 80012ae:	4689      	mov	r9, r1
 80012b0:	4b17      	ldr	r3, [pc, #92]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f947 	bl	8000548 <__aeabi_f2d>
 80012ba:	4604      	mov	r4, r0
 80012bc:	460d      	mov	r5, r1
 80012be:	4b14      	ldr	r3, [pc, #80]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f940 	bl	8000548 <__aeabi_f2d>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012d0:	e9cd 4500 	strd	r4, r5, [sp]
 80012d4:	4642      	mov	r2, r8
 80012d6:	464b      	mov	r3, r9
 80012d8:	4812      	ldr	r0, [pc, #72]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80012da:	f004 ffd5 	bl	8006288 <iprintf>
		  counter++;
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	3301      	adds	r3, #1
 80012e4:	4a10      	ldr	r2, [pc, #64]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80012e6:	6013      	str	r3, [r2, #0]
	  }
	  if(counter>counter_th){
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80012f0:	4293      	cmp	r3, r2
 80012f2:	dd02      	ble.n	80012fa <HAL_TIM_PeriodElapsedCallback+0x92>
		  logger_flag=0;
 80012f4:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
	  }
  }
  HAL_TIM_Base_Start_IT(&htim2);
 80012fa:	4804      	ldr	r0, [pc, #16]	; (800130c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80012fc:	f002 fd4c 	bl	8003d98 <HAL_TIM_Base_Start_IT>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800130a:	bf00      	nop
 800130c:	20000308 	.word	0x20000308
 8001310:	20000258 	.word	0x20000258
 8001314:	48000400 	.word	0x48000400
 8001318:	20000268 	.word	0x20000268
 800131c:	20000280 	.word	0x20000280
 8001320:	200001f8 	.word	0x200001f8
 8001324:	08009ab0 	.word	0x08009ab0
 8001328:	200001fc 	.word	0x200001fc

0800132c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001342:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <HAL_MspInit+0x44>)
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <HAL_MspInit+0x44>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6193      	str	r3, [r2, #24]
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <HAL_MspInit+0x44>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_MspInit+0x44>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	4a08      	ldr	r2, [pc, #32]	; (8001380 <HAL_MspInit+0x44>)
 8001360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001364:	61d3      	str	r3, [r2, #28]
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_MspInit+0x44>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40021000 	.word	0x40021000

08001384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <HardFault_Handler+0x4>

08001398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800139c:	e7fe      	b.n	800139c <MemManage_Handler+0x4>

0800139e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <BusFault_Handler+0x4>

080013a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <UsageFault_Handler+0x4>

080013aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d8:	f000 fb34 	bl	8001a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}

080013e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <TIM2_IRQHandler+0x10>)
 80013e6:	f002 fd89 	bl	8003efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000308 	.word	0x20000308

080013f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	e00a      	b.n	800141c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001406:	f3af 8000 	nop.w
 800140a:	4601      	mov	r1, r0
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	60ba      	str	r2, [r7, #8]
 8001412:	b2ca      	uxtb	r2, r1
 8001414:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	3301      	adds	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	429a      	cmp	r2, r3
 8001422:	dbf0      	blt.n	8001406 <_read+0x12>
	}

return len;
 8001424:	687b      	ldr	r3, [r7, #4]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b086      	sub	sp, #24
 8001432:	af00      	add	r7, sp, #0
 8001434:	60f8      	str	r0, [r7, #12]
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	e009      	b.n	8001454 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	60ba      	str	r2, [r7, #8]
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fdb1 	bl	8000fb0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	3301      	adds	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	dbf1      	blt.n	8001440 <_write+0x12>
	}
	return len;
 800145c:	687b      	ldr	r3, [r7, #4]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <_close>:

int _close(int file)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
	return -1;
 800146e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800148e:	605a      	str	r2, [r3, #4]
	return 0;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <_isatty>:

int _isatty(int file)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
	return 1;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
	return 0;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <_sbrk+0x50>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <_sbrk+0x16>
		heap_end = &end;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <_sbrk+0x50>)
 80014e2:	4a10      	ldr	r2, [pc, #64]	; (8001524 <_sbrk+0x54>)
 80014e4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <_sbrk+0x50>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <_sbrk+0x50>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4413      	add	r3, r2
 80014f4:	466a      	mov	r2, sp
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d907      	bls.n	800150a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80014fa:	f004 f849 	bl	8005590 <__errno>
 80014fe:	4602      	mov	r2, r0
 8001500:	230c      	movs	r3, #12
 8001502:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001508:	e006      	b.n	8001518 <_sbrk+0x48>
	}

	heap_end += incr;
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <_sbrk+0x50>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	4a03      	ldr	r2, [pc, #12]	; (8001520 <_sbrk+0x50>)
 8001514:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001516:	68fb      	ldr	r3, [r7, #12]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000200 	.word	0x20000200
 8001524:	20000450 	.word	0x20000450

08001528 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <SystemInit+0x28>)
 800152e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001532:	4a07      	ldr	r2, [pc, #28]	; (8001550 <SystemInit+0x28>)
 8001534:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001538:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <SystemInit+0x28>)
 800153e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001542:	609a      	str	r2, [r3, #8]
#endif
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800155a:	f107 0310 	add.w	r3, r7, #16
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001572:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <MX_TIM2_Init+0x98>)
 8001574:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001578:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4000-1;
 800157a:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <MX_TIM2_Init+0x98>)
 800157c:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001580:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <MX_TIM2_Init+0x98>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 8001588:	4b18      	ldr	r3, [pc, #96]	; (80015ec <MX_TIM2_Init+0x98>)
 800158a:	22c7      	movs	r2, #199	; 0xc7
 800158c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158e:	4b17      	ldr	r3, [pc, #92]	; (80015ec <MX_TIM2_Init+0x98>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001594:	4b15      	ldr	r3, [pc, #84]	; (80015ec <MX_TIM2_Init+0x98>)
 8001596:	2200      	movs	r2, #0
 8001598:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800159a:	4814      	ldr	r0, [pc, #80]	; (80015ec <MX_TIM2_Init+0x98>)
 800159c:	f002 fbd0 	bl	8003d40 <HAL_TIM_Base_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80015a6:	f7ff fec1 	bl	800132c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	4619      	mov	r1, r3
 80015b6:	480d      	ldr	r0, [pc, #52]	; (80015ec <MX_TIM2_Init+0x98>)
 80015b8:	f002 fed8 	bl	800436c <HAL_TIM_ConfigClockSource>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80015c2:	f7ff feb3 	bl	800132c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	4806      	ldr	r0, [pc, #24]	; (80015ec <MX_TIM2_Init+0x98>)
 80015d4:	f003 fb8a 	bl	8004cec <HAL_TIMEx_MasterConfigSynchronization>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80015de:	f7ff fea5 	bl	800132c <Error_Handler>
  }

}
 80015e2:	bf00      	nop
 80015e4:	3720      	adds	r7, #32
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000308 	.word	0x20000308

080015f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08e      	sub	sp, #56	; 0x38
 80015f4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001604:	f107 031c 	add.w	r3, r7, #28
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001610:	463b      	mov	r3, r7
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	611a      	str	r2, [r3, #16]
 800161e:	615a      	str	r2, [r3, #20]
 8001620:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001622:	4b2c      	ldr	r3, [pc, #176]	; (80016d4 <MX_TIM3_Init+0xe4>)
 8001624:	4a2c      	ldr	r2, [pc, #176]	; (80016d8 <MX_TIM3_Init+0xe8>)
 8001626:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31-1;
 8001628:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <MX_TIM3_Init+0xe4>)
 800162a:	221e      	movs	r2, #30
 800162c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b29      	ldr	r3, [pc, #164]	; (80016d4 <MX_TIM3_Init+0xe4>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001634:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <MX_TIM3_Init+0xe4>)
 8001636:	2263      	movs	r2, #99	; 0x63
 8001638:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163a:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <MX_TIM3_Init+0xe4>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001640:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <MX_TIM3_Init+0xe4>)
 8001642:	2200      	movs	r2, #0
 8001644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001646:	4823      	ldr	r0, [pc, #140]	; (80016d4 <MX_TIM3_Init+0xe4>)
 8001648:	f002 fb7a 	bl	8003d40 <HAL_TIM_Base_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001652:	f7ff fe6b 	bl	800132c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800165c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001660:	4619      	mov	r1, r3
 8001662:	481c      	ldr	r0, [pc, #112]	; (80016d4 <MX_TIM3_Init+0xe4>)
 8001664:	f002 fe82 	bl	800436c <HAL_TIM_ConfigClockSource>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800166e:	f7ff fe5d 	bl	800132c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001672:	4818      	ldr	r0, [pc, #96]	; (80016d4 <MX_TIM3_Init+0xe4>)
 8001674:	f002 fbba 	bl	8003dec <HAL_TIM_PWM_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800167e:	f7ff fe55 	bl	800132c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001686:	2300      	movs	r3, #0
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800168a:	f107 031c 	add.w	r3, r7, #28
 800168e:	4619      	mov	r1, r3
 8001690:	4810      	ldr	r0, [pc, #64]	; (80016d4 <MX_TIM3_Init+0xe4>)
 8001692:	f003 fb2b 	bl	8004cec <HAL_TIMEx_MasterConfigSynchronization>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800169c:	f7ff fe46 	bl	800132c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a0:	2360      	movs	r3, #96	; 0x60
 80016a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016b0:	463b      	mov	r3, r7
 80016b2:	2204      	movs	r2, #4
 80016b4:	4619      	mov	r1, r3
 80016b6:	4807      	ldr	r0, [pc, #28]	; (80016d4 <MX_TIM3_Init+0xe4>)
 80016b8:	f002 fd40 	bl	800413c <HAL_TIM_PWM_ConfigChannel>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80016c2:	f7ff fe33 	bl	800132c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80016c6:	4803      	ldr	r0, [pc, #12]	; (80016d4 <MX_TIM3_Init+0xe4>)
 80016c8:	f000 f840 	bl	800174c <HAL_TIM_MspPostInit>

}
 80016cc:	bf00      	nop
 80016ce:	3738      	adds	r7, #56	; 0x38
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200002c8 	.word	0x200002c8
 80016d8:	40000400 	.word	0x40000400

080016dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016ec:	d114      	bne.n	8001718 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_TIM_Base_MspInit+0x68>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	4a14      	ldr	r2, [pc, #80]	; (8001744 <HAL_TIM_Base_MspInit+0x68>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	61d3      	str	r3, [r2, #28]
 80016fa:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_TIM_Base_MspInit+0x68>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	201c      	movs	r0, #28
 800170c:	f000 fab7 	bl	8001c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001710:	201c      	movs	r0, #28
 8001712:	f000 fad0 	bl	8001cb6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001716:	e010      	b.n	800173a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <HAL_TIM_Base_MspInit+0x6c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d10b      	bne.n	800173a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <HAL_TIM_Base_MspInit+0x68>)
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	4a07      	ldr	r2, [pc, #28]	; (8001744 <HAL_TIM_Base_MspInit+0x68>)
 8001728:	f043 0302 	orr.w	r3, r3, #2
 800172c:	61d3      	str	r3, [r2, #28]
 800172e:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_TIM_Base_MspInit+0x68>)
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
}
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000
 8001748:	40000400 	.word	0x40000400

0800174c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a11      	ldr	r2, [pc, #68]	; (80017b0 <HAL_TIM_MspPostInit+0x64>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d11c      	bne.n	80017a8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <HAL_TIM_MspPostInit+0x68>)
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	4a10      	ldr	r2, [pc, #64]	; (80017b4 <HAL_TIM_MspPostInit+0x68>)
 8001774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001778:	6153      	str	r3, [r2, #20]
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <HAL_TIM_MspPostInit+0x68>)
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA4     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001786:	2310      	movs	r3, #16
 8001788:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001796:	2302      	movs	r3, #2
 8001798:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	4619      	mov	r1, r3
 80017a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a4:	f000 faa2 	bl	8001cec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017a8:	bf00      	nop
 80017aa:	3720      	adds	r7, #32
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40000400 	.word	0x40000400
 80017b4:	40021000 	.word	0x40021000

080017b8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <MX_USART1_UART_Init+0x58>)
 80017be:	4a15      	ldr	r2, [pc, #84]	; (8001814 <MX_USART1_UART_Init+0x5c>)
 80017c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <MX_USART1_UART_Init+0x58>)
 80017c4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80017c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <MX_USART1_UART_Init+0x58>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <MX_USART1_UART_Init+0x58>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <MX_USART1_UART_Init+0x58>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <MX_USART1_UART_Init+0x58>)
 80017de:	220c      	movs	r2, #12
 80017e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <MX_USART1_UART_Init+0x58>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <MX_USART1_UART_Init+0x58>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <MX_USART1_UART_Init+0x58>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <MX_USART1_UART_Init+0x58>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_USART1_UART_Init+0x58>)
 80017fc:	f003 fb02 	bl	8004e04 <HAL_UART_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001806:	f7ff fd91 	bl	800132c <Error_Handler>
  }

}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000348 	.word	0x20000348
 8001814:	40013800 	.word	0x40013800

08001818 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <MX_USART2_UART_Init+0x58>)
 800181e:	4a15      	ldr	r2, [pc, #84]	; (8001874 <MX_USART2_UART_Init+0x5c>)
 8001820:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <MX_USART2_UART_Init+0x58>)
 8001824:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001828:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <MX_USART2_UART_Init+0x58>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001830:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <MX_USART2_UART_Init+0x58>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <MX_USART2_UART_Init+0x58>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <MX_USART2_UART_Init+0x58>)
 800183e:	220c      	movs	r2, #12
 8001840:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <MX_USART2_UART_Init+0x58>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <MX_USART2_UART_Init+0x58>)
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <MX_USART2_UART_Init+0x58>)
 8001850:	2200      	movs	r2, #0
 8001852:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <MX_USART2_UART_Init+0x58>)
 8001856:	2200      	movs	r2, #0
 8001858:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <MX_USART2_UART_Init+0x58>)
 800185c:	f003 fad2 	bl	8004e04 <HAL_UART_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001866:	f7ff fd61 	bl	800132c <Error_Handler>
  }

}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200003c8 	.word	0x200003c8
 8001874:	40004400 	.word	0x40004400

08001878 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08c      	sub	sp, #48	; 0x30
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 031c 	add.w	r3, r7, #28
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a30      	ldr	r2, [pc, #192]	; (8001958 <HAL_UART_MspInit+0xe0>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d12a      	bne.n	80018f0 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800189a:	4b30      	ldr	r3, [pc, #192]	; (800195c <HAL_UART_MspInit+0xe4>)
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	4a2f      	ldr	r2, [pc, #188]	; (800195c <HAL_UART_MspInit+0xe4>)
 80018a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a4:	6193      	str	r3, [r2, #24]
 80018a6:	4b2d      	ldr	r3, [pc, #180]	; (800195c <HAL_UART_MspInit+0xe4>)
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ae:	61bb      	str	r3, [r7, #24]
 80018b0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	4b2a      	ldr	r3, [pc, #168]	; (800195c <HAL_UART_MspInit+0xe4>)
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	4a29      	ldr	r2, [pc, #164]	; (800195c <HAL_UART_MspInit+0xe4>)
 80018b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018bc:	6153      	str	r3, [r2, #20]
 80018be:	4b27      	ldr	r3, [pc, #156]	; (800195c <HAL_UART_MspInit+0xe4>)
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d8:	2303      	movs	r3, #3
 80018da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018dc:	2307      	movs	r3, #7
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e0:	f107 031c 	add.w	r3, r7, #28
 80018e4:	4619      	mov	r1, r3
 80018e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ea:	f000 f9ff 	bl	8001cec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018ee:	e02e      	b.n	800194e <HAL_UART_MspInit+0xd6>
  else if(uartHandle->Instance==USART2)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a1a      	ldr	r2, [pc, #104]	; (8001960 <HAL_UART_MspInit+0xe8>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d129      	bne.n	800194e <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018fa:	4b18      	ldr	r3, [pc, #96]	; (800195c <HAL_UART_MspInit+0xe4>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	4a17      	ldr	r2, [pc, #92]	; (800195c <HAL_UART_MspInit+0xe4>)
 8001900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001904:	61d3      	str	r3, [r2, #28]
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <HAL_UART_MspInit+0xe4>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_UART_MspInit+0xe4>)
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	4a11      	ldr	r2, [pc, #68]	; (800195c <HAL_UART_MspInit+0xe4>)
 8001918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800191c:	6153      	str	r3, [r2, #20]
 800191e:	4b0f      	ldr	r3, [pc, #60]	; (800195c <HAL_UART_MspInit+0xe4>)
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800192a:	f248 0304 	movw	r3, #32772	; 0x8004
 800192e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001938:	2303      	movs	r3, #3
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800193c:	2307      	movs	r3, #7
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001940:	f107 031c 	add.w	r3, r7, #28
 8001944:	4619      	mov	r1, r3
 8001946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800194a:	f000 f9cf 	bl	8001cec <HAL_GPIO_Init>
}
 800194e:	bf00      	nop
 8001950:	3730      	adds	r7, #48	; 0x30
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40013800 	.word	0x40013800
 800195c:	40021000 	.word	0x40021000
 8001960:	40004400 	.word	0x40004400

08001964 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800199c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001968:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800196a:	e003      	b.n	8001974 <LoopCopyDataInit>

0800196c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800196e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001970:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001972:	3104      	adds	r1, #4

08001974 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001974:	480b      	ldr	r0, [pc, #44]	; (80019a4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001978:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800197a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800197c:	d3f6      	bcc.n	800196c <CopyDataInit>
	ldr	r2, =_sbss
 800197e:	4a0b      	ldr	r2, [pc, #44]	; (80019ac <LoopForever+0x12>)
	b	LoopFillZerobss
 8001980:	e002      	b.n	8001988 <LoopFillZerobss>

08001982 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001982:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001984:	f842 3b04 	str.w	r3, [r2], #4

08001988 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <LoopForever+0x16>)
	cmp	r2, r3
 800198a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800198c:	d3f9      	bcc.n	8001982 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800198e:	f7ff fdcb 	bl	8001528 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001992:	f003 fe03 	bl	800559c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001996:	f7ff fb1d 	bl	8000fd4 <main>

0800199a <LoopForever>:

LoopForever:
    b LoopForever
 800199a:	e7fe      	b.n	800199a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800199c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80019a0:	08009e20 	.word	0x08009e20
	ldr	r0, =_sdata
 80019a4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80019a8:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 80019ac:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 80019b0:	20000450 	.word	0x20000450

080019b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019b4:	e7fe      	b.n	80019b4 <ADC1_2_IRQHandler>
	...

080019b8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <HAL_Init+0x28>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a07      	ldr	r2, [pc, #28]	; (80019e0 <HAL_Init+0x28>)
 80019c2:	f043 0310 	orr.w	r3, r3, #16
 80019c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c8:	2003      	movs	r0, #3
 80019ca:	f000 f94d 	bl	8001c68 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ce:	2000      	movs	r0, #0
 80019d0:	f000 f808 	bl	80019e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019d4:	f7ff fcb2 	bl	800133c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40022000 	.word	0x40022000

080019e4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_InitTick+0x54>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_InitTick+0x58>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	4619      	mov	r1, r3
 80019f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80019fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 f965 	bl	8001cd2 <HAL_SYSTICK_Config>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e00e      	b.n	8001a30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b0f      	cmp	r3, #15
 8001a16:	d80a      	bhi.n	8001a2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a20:	f000 f92d 	bl	8001c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a24:	4a06      	ldr	r2, [pc, #24]	; (8001a40 <HAL_InitTick+0x5c>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	e000      	b.n	8001a30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	20000008 	.word	0x20000008
 8001a40:	20000004 	.word	0x20000004

08001a44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_IncTick+0x20>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_IncTick+0x24>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4413      	add	r3, r2
 8001a54:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <HAL_IncTick+0x24>)
 8001a56:	6013      	str	r3, [r2, #0]
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20000008 	.word	0x20000008
 8001a68:	20000448 	.word	0x20000448

08001a6c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a70:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <HAL_GetTick+0x14>)
 8001a72:	681b      	ldr	r3, [r3, #0]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000448 	.word	0x20000448

08001a84 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a8c:	f7ff ffee 	bl	8001a6c <HAL_GetTick>
 8001a90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a9c:	d005      	beq.n	8001aaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_Delay+0x40>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001aaa:	bf00      	nop
 8001aac:	f7ff ffde 	bl	8001a6c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d8f7      	bhi.n	8001aac <HAL_Delay+0x28>
  {
  }
}
 8001abc:	bf00      	nop
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000008 	.word	0x20000008

08001ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <__NVIC_SetPriorityGrouping+0x44>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afa:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <__NVIC_SetPriorityGrouping+0x44>)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	60d3      	str	r3, [r2, #12]
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <__NVIC_GetPriorityGrouping+0x18>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	0a1b      	lsrs	r3, r3, #8
 8001b1a:	f003 0307 	and.w	r3, r3, #7
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	db0b      	blt.n	8001b56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	f003 021f 	and.w	r2, r3, #31
 8001b44:	4907      	ldr	r1, [pc, #28]	; (8001b64 <__NVIC_EnableIRQ+0x38>)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	095b      	lsrs	r3, r3, #5
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000e100 	.word	0xe000e100

08001b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	6039      	str	r1, [r7, #0]
 8001b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	db0a      	blt.n	8001b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	490c      	ldr	r1, [pc, #48]	; (8001bb4 <__NVIC_SetPriority+0x4c>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	0112      	lsls	r2, r2, #4
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b90:	e00a      	b.n	8001ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4908      	ldr	r1, [pc, #32]	; (8001bb8 <__NVIC_SetPriority+0x50>)
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	3b04      	subs	r3, #4
 8001ba0:	0112      	lsls	r2, r2, #4
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	761a      	strb	r2, [r3, #24]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000e100 	.word	0xe000e100
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	; 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f1c3 0307 	rsb	r3, r3, #7
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	bf28      	it	cs
 8001bda:	2304      	movcs	r3, #4
 8001bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3304      	adds	r3, #4
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d902      	bls.n	8001bec <NVIC_EncodePriority+0x30>
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3b03      	subs	r3, #3
 8001bea:	e000      	b.n	8001bee <NVIC_EncodePriority+0x32>
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	401a      	ands	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	43d9      	mvns	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	4313      	orrs	r3, r2
         );
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3724      	adds	r7, #36	; 0x24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c34:	d301      	bcc.n	8001c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00f      	b.n	8001c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <SysTick_Config+0x40>)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c42:	210f      	movs	r1, #15
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c48:	f7ff ff8e 	bl	8001b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <SysTick_Config+0x40>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c52:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <SysTick_Config+0x40>)
 8001c54:	2207      	movs	r2, #7
 8001c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	e000e010 	.word	0xe000e010

08001c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff ff29 	bl	8001ac8 <__NVIC_SetPriorityGrouping>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b086      	sub	sp, #24
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	4603      	mov	r3, r0
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
 8001c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c90:	f7ff ff3e 	bl	8001b10 <__NVIC_GetPriorityGrouping>
 8001c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	68b9      	ldr	r1, [r7, #8]
 8001c9a:	6978      	ldr	r0, [r7, #20]
 8001c9c:	f7ff ff8e 	bl	8001bbc <NVIC_EncodePriority>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff5d 	bl	8001b68 <__NVIC_SetPriority>
}
 8001cae:	bf00      	nop
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff31 	bl	8001b2c <__NVIC_EnableIRQ>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff ffa2 	bl	8001c24 <SysTick_Config>
 8001ce0:	4603      	mov	r3, r0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cfa:	e14e      	b.n	8001f9a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	2101      	movs	r1, #1
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 8140 	beq.w	8001f94 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x38>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b12      	cmp	r3, #18
 8001d22:	d123      	bne.n	8001d6c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	08da      	lsrs	r2, r3, #3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3208      	adds	r2, #8
 8001d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	08da      	lsrs	r2, r3, #3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3208      	adds	r2, #8
 8001d66:	6939      	ldr	r1, [r7, #16]
 8001d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2203      	movs	r2, #3
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0203 	and.w	r2, r3, #3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d00b      	beq.n	8001dc0 <HAL_GPIO_Init+0xd4>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d007      	beq.n	8001dc0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001db4:	2b11      	cmp	r3, #17
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b12      	cmp	r3, #18
 8001dbe:	d130      	bne.n	8001e22 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001df6:	2201      	movs	r2, #1
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	091b      	lsrs	r3, r3, #4
 8001e0c:	f003 0201 	and.w	r2, r3, #1
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4013      	ands	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 809a 	beq.w	8001f94 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e60:	4b55      	ldr	r3, [pc, #340]	; (8001fb8 <HAL_GPIO_Init+0x2cc>)
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	4a54      	ldr	r2, [pc, #336]	; (8001fb8 <HAL_GPIO_Init+0x2cc>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6193      	str	r3, [r2, #24]
 8001e6c:	4b52      	ldr	r3, [pc, #328]	; (8001fb8 <HAL_GPIO_Init+0x2cc>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e78:	4a50      	ldr	r2, [pc, #320]	; (8001fbc <HAL_GPIO_Init+0x2d0>)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	089b      	lsrs	r3, r3, #2
 8001e7e:	3302      	adds	r3, #2
 8001e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	220f      	movs	r2, #15
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ea2:	d013      	beq.n	8001ecc <HAL_GPIO_Init+0x1e0>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a46      	ldr	r2, [pc, #280]	; (8001fc0 <HAL_GPIO_Init+0x2d4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d00d      	beq.n	8001ec8 <HAL_GPIO_Init+0x1dc>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a45      	ldr	r2, [pc, #276]	; (8001fc4 <HAL_GPIO_Init+0x2d8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d007      	beq.n	8001ec4 <HAL_GPIO_Init+0x1d8>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a44      	ldr	r2, [pc, #272]	; (8001fc8 <HAL_GPIO_Init+0x2dc>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d101      	bne.n	8001ec0 <HAL_GPIO_Init+0x1d4>
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e006      	b.n	8001ece <HAL_GPIO_Init+0x1e2>
 8001ec0:	2305      	movs	r3, #5
 8001ec2:	e004      	b.n	8001ece <HAL_GPIO_Init+0x1e2>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e002      	b.n	8001ece <HAL_GPIO_Init+0x1e2>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <HAL_GPIO_Init+0x1e2>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	f002 0203 	and.w	r2, r2, #3
 8001ed4:	0092      	lsls	r2, r2, #2
 8001ed6:	4093      	lsls	r3, r2
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ede:	4937      	ldr	r1, [pc, #220]	; (8001fbc <HAL_GPIO_Init+0x2d0>)
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eec:	4b37      	ldr	r3, [pc, #220]	; (8001fcc <HAL_GPIO_Init+0x2e0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f10:	4a2e      	ldr	r2, [pc, #184]	; (8001fcc <HAL_GPIO_Init+0x2e0>)
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f16:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <HAL_GPIO_Init+0x2e0>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f3a:	4a24      	ldr	r2, [pc, #144]	; (8001fcc <HAL_GPIO_Init+0x2e0>)
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f40:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <HAL_GPIO_Init+0x2e0>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f64:	4a19      	ldr	r2, [pc, #100]	; (8001fcc <HAL_GPIO_Init+0x2e0>)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f6a:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <HAL_GPIO_Init+0x2e0>)
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4013      	ands	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f8e:	4a0f      	ldr	r2, [pc, #60]	; (8001fcc <HAL_GPIO_Init+0x2e0>)
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	3301      	adds	r3, #1
 8001f98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f47f aea9 	bne.w	8001cfc <HAL_GPIO_Init+0x10>
  }
}
 8001faa:	bf00      	nop
 8001fac:	371c      	adds	r7, #28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40010000 	.word	0x40010000
 8001fc0:	48000400 	.word	0x48000400
 8001fc4:	48000800 	.word	0x48000800
 8001fc8:	48000c00 	.word	0x48000c00
 8001fcc:	40010400 	.word	0x40010400

08001fd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691a      	ldr	r2, [r3, #16]
 8001fe0:	887b      	ldrh	r3, [r7, #2]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
 8001fec:	e001      	b.n	8001ff2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	807b      	strh	r3, [r7, #2]
 800200c:	4613      	mov	r3, r2
 800200e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002010:	787b      	ldrb	r3, [r7, #1]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002016:	887a      	ldrh	r2, [r7, #2]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800201c:	e002      	b.n	8002024 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800201e:	887a      	ldrh	r2, [r7, #2]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695a      	ldr	r2, [r3, #20]
 8002040:	887b      	ldrh	r3, [r7, #2]
 8002042:	4013      	ands	r3, r2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d004      	beq.n	8002052 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002048:	887b      	ldrh	r3, [r7, #2]
 800204a:	041a      	lsls	r2, r3, #16
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002050:	e002      	b.n	8002058 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002052:	887a      	ldrh	r2, [r7, #2]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	619a      	str	r2, [r3, #24]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e081      	b.n	800217a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d106      	bne.n	8002090 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7fe fe94 	bl	8000db8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2224      	movs	r2, #36	; 0x24
 8002094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0201 	bic.w	r2, r2, #1
 80020a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d107      	bne.n	80020de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	e006      	b.n	80020ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d104      	bne.n	80020fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800210c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002110:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002120:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691a      	ldr	r2, [r3, #16]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	ea42 0103 	orr.w	r1, r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	021a      	lsls	r2, r3, #8
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69d9      	ldr	r1, [r3, #28]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1a      	ldr	r2, [r3, #32]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2220      	movs	r2, #32
 8002166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af02      	add	r7, sp, #8
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	4608      	mov	r0, r1
 800218e:	4611      	mov	r1, r2
 8002190:	461a      	mov	r2, r3
 8002192:	4603      	mov	r3, r0
 8002194:	817b      	strh	r3, [r7, #10]
 8002196:	460b      	mov	r3, r1
 8002198:	813b      	strh	r3, [r7, #8]
 800219a:	4613      	mov	r3, r2
 800219c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b20      	cmp	r3, #32
 80021a8:	f040 80fd 	bne.w	80023a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80021ac:	6a3b      	ldr	r3, [r7, #32]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <HAL_I2C_Mem_Read+0x34>
 80021b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d105      	bne.n	80021c4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0f1      	b.n	80023a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_I2C_Mem_Read+0x4e>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e0ea      	b.n	80023a8 <HAL_I2C_Mem_Read+0x224>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021da:	f7ff fc47 	bl	8001a6c <HAL_GetTick>
 80021de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	2319      	movs	r3, #25
 80021e6:	2201      	movs	r2, #1
 80021e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 f95b 	bl	80024a8 <I2C_WaitOnFlagUntilTimeout>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e0d5      	b.n	80023a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2222      	movs	r2, #34	; 0x22
 8002200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2240      	movs	r2, #64	; 0x40
 8002208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6a3a      	ldr	r2, [r7, #32]
 8002216:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800221c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002224:	88f8      	ldrh	r0, [r7, #6]
 8002226:	893a      	ldrh	r2, [r7, #8]
 8002228:	8979      	ldrh	r1, [r7, #10]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	9301      	str	r3, [sp, #4]
 800222e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	4603      	mov	r3, r0
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 f8bf 	bl	80023b8 <I2C_RequestMemoryRead>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0ad      	b.n	80023a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002250:	b29b      	uxth	r3, r3
 8002252:	2bff      	cmp	r3, #255	; 0xff
 8002254:	d90e      	bls.n	8002274 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	22ff      	movs	r2, #255	; 0xff
 800225a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002260:	b2da      	uxtb	r2, r3
 8002262:	8979      	ldrh	r1, [r7, #10]
 8002264:	4b52      	ldr	r3, [pc, #328]	; (80023b0 <HAL_I2C_Mem_Read+0x22c>)
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 fa3d 	bl	80026ec <I2C_TransferConfig>
 8002272:	e00f      	b.n	8002294 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002278:	b29a      	uxth	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002282:	b2da      	uxtb	r2, r3
 8002284:	8979      	ldrh	r1, [r7, #10]
 8002286:	4b4a      	ldr	r3, [pc, #296]	; (80023b0 <HAL_I2C_Mem_Read+0x22c>)
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 fa2c 	bl	80026ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229a:	2200      	movs	r2, #0
 800229c:	2104      	movs	r1, #4
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 f902 	bl	80024a8 <I2C_WaitOnFlagUntilTimeout>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e07c      	b.n	80023a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	1c5a      	adds	r2, r3, #1
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d034      	beq.n	8002354 <HAL_I2C_Mem_Read+0x1d0>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d130      	bne.n	8002354 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f8:	2200      	movs	r2, #0
 80022fa:	2180      	movs	r1, #128	; 0x80
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 f8d3 	bl	80024a8 <I2C_WaitOnFlagUntilTimeout>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e04d      	b.n	80023a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002310:	b29b      	uxth	r3, r3
 8002312:	2bff      	cmp	r3, #255	; 0xff
 8002314:	d90e      	bls.n	8002334 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	22ff      	movs	r2, #255	; 0xff
 800231a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002320:	b2da      	uxtb	r2, r3
 8002322:	8979      	ldrh	r1, [r7, #10]
 8002324:	2300      	movs	r3, #0
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f000 f9dd 	bl	80026ec <I2C_TransferConfig>
 8002332:	e00f      	b.n	8002354 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002342:	b2da      	uxtb	r2, r3
 8002344:	8979      	ldrh	r1, [r7, #10]
 8002346:	2300      	movs	r3, #0
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 f9cc 	bl	80026ec <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002358:	b29b      	uxth	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d19a      	bne.n	8002294 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 f920 	bl	80025a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e01a      	b.n	80023a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2220      	movs	r2, #32
 8002378:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6859      	ldr	r1, [r3, #4]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HAL_I2C_Mem_Read+0x230>)
 8002386:	400b      	ands	r3, r1
 8002388:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2220      	movs	r2, #32
 800238e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	e000      	b.n	80023a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80023a6:	2302      	movs	r3, #2
  }
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	80002400 	.word	0x80002400
 80023b4:	fe00e800 	.word	0xfe00e800

080023b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af02      	add	r7, sp, #8
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	4608      	mov	r0, r1
 80023c2:	4611      	mov	r1, r2
 80023c4:	461a      	mov	r2, r3
 80023c6:	4603      	mov	r3, r0
 80023c8:	817b      	strh	r3, [r7, #10]
 80023ca:	460b      	mov	r3, r1
 80023cc:	813b      	strh	r3, [r7, #8]
 80023ce:	4613      	mov	r3, r2
 80023d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80023d2:	88fb      	ldrh	r3, [r7, #6]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	8979      	ldrh	r1, [r7, #10]
 80023d8:	4b20      	ldr	r3, [pc, #128]	; (800245c <I2C_RequestMemoryRead+0xa4>)
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	2300      	movs	r3, #0
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 f984 	bl	80026ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	69b9      	ldr	r1, [r7, #24]
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 f89d 	bl	8002528 <I2C_WaitOnTXISFlagUntilTimeout>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e02c      	b.n	8002452 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d105      	bne.n	800240a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023fe:	893b      	ldrh	r3, [r7, #8]
 8002400:	b2da      	uxtb	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	629a      	str	r2, [r3, #40]	; 0x28
 8002408:	e015      	b.n	8002436 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800240a:	893b      	ldrh	r3, [r7, #8]
 800240c:	0a1b      	lsrs	r3, r3, #8
 800240e:	b29b      	uxth	r3, r3
 8002410:	b2da      	uxtb	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002418:	69fa      	ldr	r2, [r7, #28]
 800241a:	69b9      	ldr	r1, [r7, #24]
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 f883 	bl	8002528 <I2C_WaitOnTXISFlagUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e012      	b.n	8002452 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800242c:	893b      	ldrh	r3, [r7, #8]
 800242e:	b2da      	uxtb	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	2200      	movs	r2, #0
 800243e:	2140      	movs	r1, #64	; 0x40
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 f831 	bl	80024a8 <I2C_WaitOnFlagUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e000      	b.n	8002452 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	80002000 	.word	0x80002000

08002460 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b02      	cmp	r3, #2
 8002474:	d103      	bne.n	800247e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2200      	movs	r2, #0
 800247c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b01      	cmp	r3, #1
 800248a:	d007      	beq.n	800249c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	699a      	ldr	r2, [r3, #24]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0201 	orr.w	r2, r2, #1
 800249a:	619a      	str	r2, [r3, #24]
  }
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	4613      	mov	r3, r2
 80024b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024b8:	e022      	b.n	8002500 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024c0:	d01e      	beq.n	8002500 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024c2:	f7ff fad3 	bl	8001a6c <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d302      	bcc.n	80024d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d113      	bne.n	8002500 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024dc:	f043 0220 	orr.w	r2, r3, #32
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e00f      	b.n	8002520 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699a      	ldr	r2, [r3, #24]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	4013      	ands	r3, r2
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	429a      	cmp	r2, r3
 800250e:	bf0c      	ite	eq
 8002510:	2301      	moveq	r3, #1
 8002512:	2300      	movne	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	429a      	cmp	r2, r3
 800251c:	d0cd      	beq.n	80024ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002534:	e02c      	b.n	8002590 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f870 	bl	8002620 <I2C_IsAcknowledgeFailed>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e02a      	b.n	80025a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002550:	d01e      	beq.n	8002590 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002552:	f7ff fa8b 	bl	8001a6c <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	429a      	cmp	r2, r3
 8002560:	d302      	bcc.n	8002568 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d113      	bne.n	8002590 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256c:	f043 0220 	orr.w	r2, r3, #32
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2220      	movs	r2, #32
 8002578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e007      	b.n	80025a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b02      	cmp	r3, #2
 800259c:	d1cb      	bne.n	8002536 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025b4:	e028      	b.n	8002608 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 f830 	bl	8002620 <I2C_IsAcknowledgeFailed>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e026      	b.n	8002618 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ca:	f7ff fa4f 	bl	8001a6c <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d302      	bcc.n	80025e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d113      	bne.n	8002608 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e4:	f043 0220 	orr.w	r2, r3, #32
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e007      	b.n	8002618 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	2b20      	cmp	r3, #32
 8002614:	d1cf      	bne.n	80025b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	2b10      	cmp	r3, #16
 8002638:	d151      	bne.n	80026de <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800263a:	e022      	b.n	8002682 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002642:	d01e      	beq.n	8002682 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002644:	f7ff fa12 	bl	8001a6c <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	429a      	cmp	r2, r3
 8002652:	d302      	bcc.n	800265a <I2C_IsAcknowledgeFailed+0x3a>
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d113      	bne.n	8002682 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	f043 0220 	orr.w	r2, r3, #32
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2220      	movs	r2, #32
 800266a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e02e      	b.n	80026e0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f003 0320 	and.w	r3, r3, #32
 800268c:	2b20      	cmp	r3, #32
 800268e:	d1d5      	bne.n	800263c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2210      	movs	r2, #16
 8002696:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2220      	movs	r2, #32
 800269e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f7ff fedd 	bl	8002460 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4b0d      	ldr	r3, [pc, #52]	; (80026e8 <I2C_IsAcknowledgeFailed+0xc8>)
 80026b2:	400b      	ands	r3, r1
 80026b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	f043 0204 	orr.w	r2, r3, #4
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2220      	movs	r2, #32
 80026c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	fe00e800 	.word	0xfe00e800

080026ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	460b      	mov	r3, r1
 80026f8:	817b      	strh	r3, [r7, #10]
 80026fa:	4613      	mov	r3, r2
 80026fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	0d5b      	lsrs	r3, r3, #21
 8002708:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800270c:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <I2C_TransferConfig+0x58>)
 800270e:	430b      	orrs	r3, r1
 8002710:	43db      	mvns	r3, r3
 8002712:	ea02 0103 	and.w	r1, r2, r3
 8002716:	897b      	ldrh	r3, [r7, #10]
 8002718:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800271c:	7a7b      	ldrb	r3, [r7, #9]
 800271e:	041b      	lsls	r3, r3, #16
 8002720:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	431a      	orrs	r2, r3
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	431a      	orrs	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002736:	bf00      	nop
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	03ff63ff 	.word	0x03ff63ff

08002748 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b20      	cmp	r3, #32
 800275c:	d138      	bne.n	80027d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002768:	2302      	movs	r3, #2
 800276a:	e032      	b.n	80027d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2224      	movs	r2, #36	; 0x24
 8002778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0201 	bic.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800279a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6819      	ldr	r1, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	e000      	b.n	80027d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027d0:	2302      	movs	r3, #2
  }
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027de:	b480      	push	{r7}
 80027e0:	b085      	sub	sp, #20
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	d139      	bne.n	8002868 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027fe:	2302      	movs	r3, #2
 8002800:	e033      	b.n	800286a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2224      	movs	r2, #36	; 0x24
 800280e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0201 	bic.w	r2, r2, #1
 8002820:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002830:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	021b      	lsls	r3, r3, #8
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4313      	orrs	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0201 	orr.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2220      	movs	r2, #32
 8002858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002864:	2300      	movs	r3, #0
 8002866:	e000      	b.n	800286a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002868:	2302      	movs	r3, #2
  }
}
 800286a:	4618      	mov	r0, r3
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800287e:	af00      	add	r7, sp, #0
 8002880:	1d3b      	adds	r3, r7, #4
 8002882:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002884:	1d3b      	adds	r3, r7, #4
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d102      	bne.n	8002892 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	f000 bef4 	b.w	800367a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002892:	1d3b      	adds	r3, r7, #4
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 816a 	beq.w	8002b76 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028a2:	4bb3      	ldr	r3, [pc, #716]	; (8002b70 <HAL_RCC_OscConfig+0x2f8>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d00c      	beq.n	80028c8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028ae:	4bb0      	ldr	r3, [pc, #704]	; (8002b70 <HAL_RCC_OscConfig+0x2f8>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d159      	bne.n	800296e <HAL_RCC_OscConfig+0xf6>
 80028ba:	4bad      	ldr	r3, [pc, #692]	; (8002b70 <HAL_RCC_OscConfig+0x2f8>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c6:	d152      	bne.n	800296e <HAL_RCC_OscConfig+0xf6>
 80028c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028cc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028dc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e0:	fab3 f383 	clz	r3, r3
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d102      	bne.n	80028fa <HAL_RCC_OscConfig+0x82>
 80028f4:	4b9e      	ldr	r3, [pc, #632]	; (8002b70 <HAL_RCC_OscConfig+0x2f8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	e015      	b.n	8002926 <HAL_RCC_OscConfig+0xae>
 80028fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028fe:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800290e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002912:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002916:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002922:	4b93      	ldr	r3, [pc, #588]	; (8002b70 <HAL_RCC_OscConfig+0x2f8>)
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800292a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800292e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002932:	fa92 f2a2 	rbit	r2, r2
 8002936:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800293a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800293e:	fab2 f282 	clz	r2, r2
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	f042 0220 	orr.w	r2, r2, #32
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	f002 021f 	and.w	r2, r2, #31
 800294e:	2101      	movs	r1, #1
 8002950:	fa01 f202 	lsl.w	r2, r1, r2
 8002954:	4013      	ands	r3, r2
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 810c 	beq.w	8002b74 <HAL_RCC_OscConfig+0x2fc>
 800295c:	1d3b      	adds	r3, r7, #4
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f040 8106 	bne.w	8002b74 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	f000 be86 	b.w	800367a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800296e:	1d3b      	adds	r3, r7, #4
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002978:	d106      	bne.n	8002988 <HAL_RCC_OscConfig+0x110>
 800297a:	4b7d      	ldr	r3, [pc, #500]	; (8002b70 <HAL_RCC_OscConfig+0x2f8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a7c      	ldr	r2, [pc, #496]	; (8002b70 <HAL_RCC_OscConfig+0x2f8>)
 8002980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	e030      	b.n	80029ea <HAL_RCC_OscConfig+0x172>
 8002988:	1d3b      	adds	r3, r7, #4
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10c      	bne.n	80029ac <HAL_RCC_OscConfig+0x134>
 8002992:	4b77      	ldr	r3, [pc, #476]	; (8002b70 <HAL_RCC_OscConfig+0x2f8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a76      	ldr	r2, [pc, #472]	; (8002b70 <HAL_RCC_OscConfig+0x2f8>)
 8002998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	4b74      	ldr	r3, [pc, #464]	; (8002b70 <HAL_RCC_OscConfig+0x2f8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a73      	ldr	r2, [pc, #460]	; (8002b70 <HAL_RCC_OscConfig+0x2f8>)
 80029a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	e01e      	b.n	80029ea <HAL_RCC_OscConfig+0x172>
 80029ac:	1d3b      	adds	r3, r7, #4
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029b6:	d10c      	bne.n	80029d2 <HAL_RCC_OscConfig+0x15a>
 80029b8:	4b6d      	ldr	r3, [pc, #436]	; (8002b70 <HAL_RCC_OscConfig+0x2f8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a6c      	ldr	r2, [pc, #432]	; (8002b70 <HAL_RCC_OscConfig+0x2f8>)
 80029be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	4b6a      	ldr	r3, [pc, #424]	; (8002b70 <HAL_RCC_OscConfig+0x2f8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a69      	ldr	r2, [pc, #420]	; (8002b70 <HAL_RCC_OscConfig+0x2f8>)
 80029ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	e00b      	b.n	80029ea <HAL_RCC_OscConfig+0x172>
 80029d2:	4b67      	ldr	r3, [pc, #412]	; (8002b70 <HAL_RCC_OscConfig+0x2f8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a66      	ldr	r2, [pc, #408]	; (8002b70 <HAL_RCC_OscConfig+0x2f8>)
 80029d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	4b64      	ldr	r3, [pc, #400]	; (8002b70 <HAL_RCC_OscConfig+0x2f8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a63      	ldr	r2, [pc, #396]	; (8002b70 <HAL_RCC_OscConfig+0x2f8>)
 80029e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029e8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029ea:	4b61      	ldr	r3, [pc, #388]	; (8002b70 <HAL_RCC_OscConfig+0x2f8>)
 80029ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ee:	f023 020f 	bic.w	r2, r3, #15
 80029f2:	1d3b      	adds	r3, r7, #4
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	495d      	ldr	r1, [pc, #372]	; (8002b70 <HAL_RCC_OscConfig+0x2f8>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029fe:	1d3b      	adds	r3, r7, #4
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d059      	beq.n	8002abc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7ff f830 	bl	8001a6c <HAL_GetTick>
 8002a0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a10:	e00a      	b.n	8002a28 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a12:	f7ff f82b 	bl	8001a6c <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	; 0x64
 8002a20:	d902      	bls.n	8002a28 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	f000 be29 	b.w	800367a <HAL_RCC_OscConfig+0xe02>
 8002a28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a2c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a30:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002a34:	fa93 f3a3 	rbit	r3, r3
 8002a38:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002a3c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d102      	bne.n	8002a5a <HAL_RCC_OscConfig+0x1e2>
 8002a54:	4b46      	ldr	r3, [pc, #280]	; (8002b70 <HAL_RCC_OscConfig+0x2f8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	e015      	b.n	8002a86 <HAL_RCC_OscConfig+0x20e>
 8002a5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a5e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002a6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a72:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002a76:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002a82:	4b3b      	ldr	r3, [pc, #236]	; (8002b70 <HAL_RCC_OscConfig+0x2f8>)
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a8a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002a8e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002a92:	fa92 f2a2 	rbit	r2, r2
 8002a96:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002a9a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002a9e:	fab2 f282 	clz	r2, r2
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	f042 0220 	orr.w	r2, r2, #32
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	f002 021f 	and.w	r2, r2, #31
 8002aae:	2101      	movs	r1, #1
 8002ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0ab      	beq.n	8002a12 <HAL_RCC_OscConfig+0x19a>
 8002aba:	e05c      	b.n	8002b76 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7fe ffd6 	bl	8001a6c <HAL_GetTick>
 8002ac0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ac4:	e00a      	b.n	8002adc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ac6:	f7fe ffd1 	bl	8001a6c <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b64      	cmp	r3, #100	; 0x64
 8002ad4:	d902      	bls.n	8002adc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	f000 bdcf 	b.w	800367a <HAL_RCC_OscConfig+0xe02>
 8002adc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ae0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002ae8:	fa93 f3a3 	rbit	r3, r3
 8002aec:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002af0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af4:	fab3 f383 	clz	r3, r3
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	095b      	lsrs	r3, r3, #5
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d102      	bne.n	8002b0e <HAL_RCC_OscConfig+0x296>
 8002b08:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <HAL_RCC_OscConfig+0x2f8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	e015      	b.n	8002b3a <HAL_RCC_OscConfig+0x2c2>
 8002b0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b12:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002b1a:	fa93 f3a3 	rbit	r3, r3
 8002b1e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002b22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b26:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002b2a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002b2e:	fa93 f3a3 	rbit	r3, r3
 8002b32:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002b36:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <HAL_RCC_OscConfig+0x2f8>)
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b3e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002b42:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002b46:	fa92 f2a2 	rbit	r2, r2
 8002b4a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002b4e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002b52:	fab2 f282 	clz	r2, r2
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	f042 0220 	orr.w	r2, r2, #32
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	f002 021f 	and.w	r2, r2, #31
 8002b62:	2101      	movs	r1, #1
 8002b64:	fa01 f202 	lsl.w	r2, r1, r2
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1ab      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x24e>
 8002b6e:	e002      	b.n	8002b76 <HAL_RCC_OscConfig+0x2fe>
 8002b70:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b76:	1d3b      	adds	r3, r7, #4
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 816f 	beq.w	8002e64 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b86:	4bd0      	ldr	r3, [pc, #832]	; (8002ec8 <HAL_RCC_OscConfig+0x650>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00b      	beq.n	8002baa <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b92:	4bcd      	ldr	r3, [pc, #820]	; (8002ec8 <HAL_RCC_OscConfig+0x650>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d16c      	bne.n	8002c78 <HAL_RCC_OscConfig+0x400>
 8002b9e:	4bca      	ldr	r3, [pc, #808]	; (8002ec8 <HAL_RCC_OscConfig+0x650>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d166      	bne.n	8002c78 <HAL_RCC_OscConfig+0x400>
 8002baa:	2302      	movs	r3, #2
 8002bac:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002bb4:	fa93 f3a3 	rbit	r3, r3
 8002bb8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002bbc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc0:	fab3 f383 	clz	r3, r3
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d102      	bne.n	8002bda <HAL_RCC_OscConfig+0x362>
 8002bd4:	4bbc      	ldr	r3, [pc, #752]	; (8002ec8 <HAL_RCC_OscConfig+0x650>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	e013      	b.n	8002c02 <HAL_RCC_OscConfig+0x38a>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002be4:	fa93 f3a3 	rbit	r3, r3
 8002be8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002bec:	2302      	movs	r3, #2
 8002bee:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002bf2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002bfe:	4bb2      	ldr	r3, [pc, #712]	; (8002ec8 <HAL_RCC_OscConfig+0x650>)
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	2202      	movs	r2, #2
 8002c04:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002c08:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002c0c:	fa92 f2a2 	rbit	r2, r2
 8002c10:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002c14:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002c18:	fab2 f282 	clz	r2, r2
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	f042 0220 	orr.w	r2, r2, #32
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	f002 021f 	and.w	r2, r2, #31
 8002c28:	2101      	movs	r1, #1
 8002c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d007      	beq.n	8002c44 <HAL_RCC_OscConfig+0x3cc>
 8002c34:	1d3b      	adds	r3, r7, #4
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d002      	beq.n	8002c44 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	f000 bd1b 	b.w	800367a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c44:	4ba0      	ldr	r3, [pc, #640]	; (8002ec8 <HAL_RCC_OscConfig+0x650>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c4c:	1d3b      	adds	r3, r7, #4
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	21f8      	movs	r1, #248	; 0xf8
 8002c54:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002c5c:	fa91 f1a1 	rbit	r1, r1
 8002c60:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002c64:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002c68:	fab1 f181 	clz	r1, r1
 8002c6c:	b2c9      	uxtb	r1, r1
 8002c6e:	408b      	lsls	r3, r1
 8002c70:	4995      	ldr	r1, [pc, #596]	; (8002ec8 <HAL_RCC_OscConfig+0x650>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c76:	e0f5      	b.n	8002e64 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c78:	1d3b      	adds	r3, r7, #4
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 8085 	beq.w	8002d8e <HAL_RCC_OscConfig+0x516>
 8002c84:	2301      	movs	r3, #1
 8002c86:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002c96:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ca4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	461a      	mov	r2, r3
 8002cac:	2301      	movs	r3, #1
 8002cae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fedc 	bl	8001a6c <HAL_GetTick>
 8002cb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb8:	e00a      	b.n	8002cd0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cba:	f7fe fed7 	bl	8001a6c <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d902      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	f000 bcd5 	b.w	800367a <HAL_RCC_OscConfig+0xe02>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002cda:	fa93 f3a3 	rbit	r3, r3
 8002cde:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002ce2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	095b      	lsrs	r3, r3, #5
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d102      	bne.n	8002d00 <HAL_RCC_OscConfig+0x488>
 8002cfa:	4b73      	ldr	r3, [pc, #460]	; (8002ec8 <HAL_RCC_OscConfig+0x650>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	e013      	b.n	8002d28 <HAL_RCC_OscConfig+0x4b0>
 8002d00:	2302      	movs	r3, #2
 8002d02:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002d0a:	fa93 f3a3 	rbit	r3, r3
 8002d0e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002d12:	2302      	movs	r3, #2
 8002d14:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002d18:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002d1c:	fa93 f3a3 	rbit	r3, r3
 8002d20:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002d24:	4b68      	ldr	r3, [pc, #416]	; (8002ec8 <HAL_RCC_OscConfig+0x650>)
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	2202      	movs	r2, #2
 8002d2a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002d2e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002d32:	fa92 f2a2 	rbit	r2, r2
 8002d36:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002d3a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002d3e:	fab2 f282 	clz	r2, r2
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	f042 0220 	orr.w	r2, r2, #32
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	f002 021f 	and.w	r2, r2, #31
 8002d4e:	2101      	movs	r1, #1
 8002d50:	fa01 f202 	lsl.w	r2, r1, r2
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0af      	beq.n	8002cba <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5a:	4b5b      	ldr	r3, [pc, #364]	; (8002ec8 <HAL_RCC_OscConfig+0x650>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d62:	1d3b      	adds	r3, r7, #4
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	21f8      	movs	r1, #248	; 0xf8
 8002d6a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002d72:	fa91 f1a1 	rbit	r1, r1
 8002d76:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002d7a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002d7e:	fab1 f181 	clz	r1, r1
 8002d82:	b2c9      	uxtb	r1, r1
 8002d84:	408b      	lsls	r3, r1
 8002d86:	4950      	ldr	r1, [pc, #320]	; (8002ec8 <HAL_RCC_OscConfig+0x650>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	600b      	str	r3, [r1, #0]
 8002d8c:	e06a      	b.n	8002e64 <HAL_RCC_OscConfig+0x5ec>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d94:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002d98:	fa93 f3a3 	rbit	r3, r3
 8002d9c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002da0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002da4:	fab3 f383 	clz	r3, r3
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	461a      	mov	r2, r3
 8002db6:	2300      	movs	r3, #0
 8002db8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dba:	f7fe fe57 	bl	8001a6c <HAL_GetTick>
 8002dbe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc2:	e00a      	b.n	8002dda <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc4:	f7fe fe52 	bl	8001a6c <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d902      	bls.n	8002dda <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	f000 bc50 	b.w	800367a <HAL_RCC_OscConfig+0xe02>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002de4:	fa93 f3a3 	rbit	r3, r3
 8002de8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002dec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df0:	fab3 f383 	clz	r3, r3
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d102      	bne.n	8002e0a <HAL_RCC_OscConfig+0x592>
 8002e04:	4b30      	ldr	r3, [pc, #192]	; (8002ec8 <HAL_RCC_OscConfig+0x650>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	e013      	b.n	8002e32 <HAL_RCC_OscConfig+0x5ba>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002e22:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002e2e:	4b26      	ldr	r3, [pc, #152]	; (8002ec8 <HAL_RCC_OscConfig+0x650>)
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	2202      	movs	r2, #2
 8002e34:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002e38:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002e3c:	fa92 f2a2 	rbit	r2, r2
 8002e40:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002e44:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002e48:	fab2 f282 	clz	r2, r2
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	f042 0220 	orr.w	r2, r2, #32
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	f002 021f 	and.w	r2, r2, #31
 8002e58:	2101      	movs	r1, #1
 8002e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1af      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e64:	1d3b      	adds	r3, r7, #4
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 80da 	beq.w	8003028 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e74:	1d3b      	adds	r3, r7, #4
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d069      	beq.n	8002f52 <HAL_RCC_OscConfig+0x6da>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e84:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002e88:	fa93 f3a3 	rbit	r3, r3
 8002e8c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e94:	fab3 f383 	clz	r3, r3
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_RCC_OscConfig+0x654>)
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea8:	f7fe fde0 	bl	8001a6c <HAL_GetTick>
 8002eac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb0:	e00e      	b.n	8002ed0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb2:	f7fe fddb 	bl	8001a6c <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d906      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e3d9      	b.n	800367a <HAL_RCC_OscConfig+0xe02>
 8002ec6:	bf00      	nop
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	10908120 	.word	0x10908120
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002eda:	fa93 f3a3 	rbit	r3, r3
 8002ede:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002ee2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	fa93 f2a3 	rbit	r2, r3
 8002ef4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002efe:	2202      	movs	r2, #2
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	fa93 f2a3 	rbit	r2, r3
 8002f0c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002f10:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f12:	4ba5      	ldr	r3, [pc, #660]	; (80031a8 <HAL_RCC_OscConfig+0x930>)
 8002f14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f16:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002f1a:	2102      	movs	r1, #2
 8002f1c:	6019      	str	r1, [r3, #0]
 8002f1e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	fa93 f1a3 	rbit	r1, r3
 8002f28:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002f2c:	6019      	str	r1, [r3, #0]
  return result;
 8002f2e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	fab3 f383 	clz	r3, r3
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	2101      	movs	r1, #1
 8002f46:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0b0      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x63a>
 8002f50:	e06a      	b.n	8003028 <HAL_RCC_OscConfig+0x7b0>
 8002f52:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002f56:	2201      	movs	r2, #1
 8002f58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	fa93 f2a3 	rbit	r2, r3
 8002f64:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002f68:	601a      	str	r2, [r3, #0]
  return result;
 8002f6a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002f6e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f70:	fab3 f383 	clz	r3, r3
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	461a      	mov	r2, r3
 8002f78:	4b8c      	ldr	r3, [pc, #560]	; (80031ac <HAL_RCC_OscConfig+0x934>)
 8002f7a:	4413      	add	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2300      	movs	r3, #0
 8002f82:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f84:	f7fe fd72 	bl	8001a6c <HAL_GetTick>
 8002f88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f8c:	e009      	b.n	8002fa2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f8e:	f7fe fd6d 	bl	8001a6c <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e36b      	b.n	800367a <HAL_RCC_OscConfig+0xe02>
 8002fa2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	fa93 f2a3 	rbit	r2, r3
 8002fb4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	fa93 f2a3 	rbit	r2, r3
 8002fcc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	fa93 f2a3 	rbit	r2, r3
 8002fe4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002fe8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fea:	4b6f      	ldr	r3, [pc, #444]	; (80031a8 <HAL_RCC_OscConfig+0x930>)
 8002fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002ff2:	2102      	movs	r1, #2
 8002ff4:	6019      	str	r1, [r3, #0]
 8002ff6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	fa93 f1a3 	rbit	r1, r3
 8003000:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003004:	6019      	str	r1, [r3, #0]
  return result;
 8003006:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	fab3 f383 	clz	r3, r3
 8003010:	b2db      	uxtb	r3, r3
 8003012:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003016:	b2db      	uxtb	r3, r3
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	2101      	movs	r1, #1
 800301e:	fa01 f303 	lsl.w	r3, r1, r3
 8003022:	4013      	ands	r3, r2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1b2      	bne.n	8002f8e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003028:	1d3b      	adds	r3, r7, #4
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 8158 	beq.w	80032e8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003038:	2300      	movs	r3, #0
 800303a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800303e:	4b5a      	ldr	r3, [pc, #360]	; (80031a8 <HAL_RCC_OscConfig+0x930>)
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d112      	bne.n	8003070 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800304a:	4b57      	ldr	r3, [pc, #348]	; (80031a8 <HAL_RCC_OscConfig+0x930>)
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	4a56      	ldr	r2, [pc, #344]	; (80031a8 <HAL_RCC_OscConfig+0x930>)
 8003050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003054:	61d3      	str	r3, [r2, #28]
 8003056:	4b54      	ldr	r3, [pc, #336]	; (80031a8 <HAL_RCC_OscConfig+0x930>)
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800305e:	f107 0308 	add.w	r3, r7, #8
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	f107 0308 	add.w	r3, r7, #8
 8003068:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800306a:	2301      	movs	r3, #1
 800306c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003070:	4b4f      	ldr	r3, [pc, #316]	; (80031b0 <HAL_RCC_OscConfig+0x938>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003078:	2b00      	cmp	r3, #0
 800307a:	d11a      	bne.n	80030b2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800307c:	4b4c      	ldr	r3, [pc, #304]	; (80031b0 <HAL_RCC_OscConfig+0x938>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a4b      	ldr	r2, [pc, #300]	; (80031b0 <HAL_RCC_OscConfig+0x938>)
 8003082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003086:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003088:	f7fe fcf0 	bl	8001a6c <HAL_GetTick>
 800308c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003090:	e009      	b.n	80030a6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003092:	f7fe fceb 	bl	8001a6c <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b64      	cmp	r3, #100	; 0x64
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e2e9      	b.n	800367a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a6:	4b42      	ldr	r3, [pc, #264]	; (80031b0 <HAL_RCC_OscConfig+0x938>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0ef      	beq.n	8003092 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030b2:	1d3b      	adds	r3, r7, #4
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d106      	bne.n	80030ca <HAL_RCC_OscConfig+0x852>
 80030bc:	4b3a      	ldr	r3, [pc, #232]	; (80031a8 <HAL_RCC_OscConfig+0x930>)
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	4a39      	ldr	r2, [pc, #228]	; (80031a8 <HAL_RCC_OscConfig+0x930>)
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	6213      	str	r3, [r2, #32]
 80030c8:	e02f      	b.n	800312a <HAL_RCC_OscConfig+0x8b2>
 80030ca:	1d3b      	adds	r3, r7, #4
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10c      	bne.n	80030ee <HAL_RCC_OscConfig+0x876>
 80030d4:	4b34      	ldr	r3, [pc, #208]	; (80031a8 <HAL_RCC_OscConfig+0x930>)
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	4a33      	ldr	r2, [pc, #204]	; (80031a8 <HAL_RCC_OscConfig+0x930>)
 80030da:	f023 0301 	bic.w	r3, r3, #1
 80030de:	6213      	str	r3, [r2, #32]
 80030e0:	4b31      	ldr	r3, [pc, #196]	; (80031a8 <HAL_RCC_OscConfig+0x930>)
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	4a30      	ldr	r2, [pc, #192]	; (80031a8 <HAL_RCC_OscConfig+0x930>)
 80030e6:	f023 0304 	bic.w	r3, r3, #4
 80030ea:	6213      	str	r3, [r2, #32]
 80030ec:	e01d      	b.n	800312a <HAL_RCC_OscConfig+0x8b2>
 80030ee:	1d3b      	adds	r3, r7, #4
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	2b05      	cmp	r3, #5
 80030f6:	d10c      	bne.n	8003112 <HAL_RCC_OscConfig+0x89a>
 80030f8:	4b2b      	ldr	r3, [pc, #172]	; (80031a8 <HAL_RCC_OscConfig+0x930>)
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	4a2a      	ldr	r2, [pc, #168]	; (80031a8 <HAL_RCC_OscConfig+0x930>)
 80030fe:	f043 0304 	orr.w	r3, r3, #4
 8003102:	6213      	str	r3, [r2, #32]
 8003104:	4b28      	ldr	r3, [pc, #160]	; (80031a8 <HAL_RCC_OscConfig+0x930>)
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	4a27      	ldr	r2, [pc, #156]	; (80031a8 <HAL_RCC_OscConfig+0x930>)
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	6213      	str	r3, [r2, #32]
 8003110:	e00b      	b.n	800312a <HAL_RCC_OscConfig+0x8b2>
 8003112:	4b25      	ldr	r3, [pc, #148]	; (80031a8 <HAL_RCC_OscConfig+0x930>)
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	4a24      	ldr	r2, [pc, #144]	; (80031a8 <HAL_RCC_OscConfig+0x930>)
 8003118:	f023 0301 	bic.w	r3, r3, #1
 800311c:	6213      	str	r3, [r2, #32]
 800311e:	4b22      	ldr	r3, [pc, #136]	; (80031a8 <HAL_RCC_OscConfig+0x930>)
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	4a21      	ldr	r2, [pc, #132]	; (80031a8 <HAL_RCC_OscConfig+0x930>)
 8003124:	f023 0304 	bic.w	r3, r3, #4
 8003128:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800312a:	1d3b      	adds	r3, r7, #4
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d06b      	beq.n	800320c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003134:	f7fe fc9a 	bl	8001a6c <HAL_GetTick>
 8003138:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313c:	e00b      	b.n	8003156 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800313e:	f7fe fc95 	bl	8001a6c <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f241 3288 	movw	r2, #5000	; 0x1388
 800314e:	4293      	cmp	r3, r2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e291      	b.n	800367a <HAL_RCC_OscConfig+0xe02>
 8003156:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800315a:	2202      	movs	r2, #2
 800315c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	fa93 f2a3 	rbit	r2, r3
 8003168:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003172:	2202      	movs	r2, #2
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	fa93 f2a3 	rbit	r2, r3
 8003180:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003184:	601a      	str	r2, [r3, #0]
  return result;
 8003186:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800318a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318c:	fab3 f383 	clz	r3, r3
 8003190:	b2db      	uxtb	r3, r3
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	b2db      	uxtb	r3, r3
 8003196:	f043 0302 	orr.w	r3, r3, #2
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d109      	bne.n	80031b4 <HAL_RCC_OscConfig+0x93c>
 80031a0:	4b01      	ldr	r3, [pc, #4]	; (80031a8 <HAL_RCC_OscConfig+0x930>)
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	e014      	b.n	80031d0 <HAL_RCC_OscConfig+0x958>
 80031a6:	bf00      	nop
 80031a8:	40021000 	.word	0x40021000
 80031ac:	10908120 	.word	0x10908120
 80031b0:	40007000 	.word	0x40007000
 80031b4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80031b8:	2202      	movs	r2, #2
 80031ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031bc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	fa93 f2a3 	rbit	r2, r3
 80031c6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	4bbb      	ldr	r3, [pc, #748]	; (80034bc <HAL_RCC_OscConfig+0xc44>)
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80031d4:	2102      	movs	r1, #2
 80031d6:	6011      	str	r1, [r2, #0]
 80031d8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80031dc:	6812      	ldr	r2, [r2, #0]
 80031de:	fa92 f1a2 	rbit	r1, r2
 80031e2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80031e6:	6011      	str	r1, [r2, #0]
  return result;
 80031e8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80031ec:	6812      	ldr	r2, [r2, #0]
 80031ee:	fab2 f282 	clz	r2, r2
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	f002 021f 	and.w	r2, r2, #31
 80031fe:	2101      	movs	r1, #1
 8003200:	fa01 f202 	lsl.w	r2, r1, r2
 8003204:	4013      	ands	r3, r2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d099      	beq.n	800313e <HAL_RCC_OscConfig+0x8c6>
 800320a:	e063      	b.n	80032d4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320c:	f7fe fc2e 	bl	8001a6c <HAL_GetTick>
 8003210:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003214:	e00b      	b.n	800322e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003216:	f7fe fc29 	bl	8001a6c <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	f241 3288 	movw	r2, #5000	; 0x1388
 8003226:	4293      	cmp	r3, r2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e225      	b.n	800367a <HAL_RCC_OscConfig+0xe02>
 800322e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003232:	2202      	movs	r2, #2
 8003234:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003236:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	fa93 f2a3 	rbit	r2, r3
 8003240:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800324a:	2202      	movs	r2, #2
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	fa93 f2a3 	rbit	r2, r3
 8003258:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800325c:	601a      	str	r2, [r3, #0]
  return result;
 800325e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003262:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	b2db      	uxtb	r3, r3
 800326e:	f043 0302 	orr.w	r3, r3, #2
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d102      	bne.n	800327e <HAL_RCC_OscConfig+0xa06>
 8003278:	4b90      	ldr	r3, [pc, #576]	; (80034bc <HAL_RCC_OscConfig+0xc44>)
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	e00d      	b.n	800329a <HAL_RCC_OscConfig+0xa22>
 800327e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003282:	2202      	movs	r2, #2
 8003284:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	fa93 f2a3 	rbit	r2, r3
 8003290:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	4b89      	ldr	r3, [pc, #548]	; (80034bc <HAL_RCC_OscConfig+0xc44>)
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800329e:	2102      	movs	r1, #2
 80032a0:	6011      	str	r1, [r2, #0]
 80032a2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	fa92 f1a2 	rbit	r1, r2
 80032ac:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80032b0:	6011      	str	r1, [r2, #0]
  return result;
 80032b2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	fab2 f282 	clz	r2, r2
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	f002 021f 	and.w	r2, r2, #31
 80032c8:	2101      	movs	r1, #1
 80032ca:	fa01 f202 	lsl.w	r2, r1, r2
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1a0      	bne.n	8003216 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032d4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d105      	bne.n	80032e8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032dc:	4b77      	ldr	r3, [pc, #476]	; (80034bc <HAL_RCC_OscConfig+0xc44>)
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	4a76      	ldr	r2, [pc, #472]	; (80034bc <HAL_RCC_OscConfig+0xc44>)
 80032e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032e8:	1d3b      	adds	r3, r7, #4
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 81c2 	beq.w	8003678 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032f4:	4b71      	ldr	r3, [pc, #452]	; (80034bc <HAL_RCC_OscConfig+0xc44>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 030c 	and.w	r3, r3, #12
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	f000 819c 	beq.w	800363a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003302:	1d3b      	adds	r3, r7, #4
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	2b02      	cmp	r3, #2
 800330a:	f040 8114 	bne.w	8003536 <HAL_RCC_OscConfig+0xcbe>
 800330e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003312:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003316:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003318:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	fa93 f2a3 	rbit	r2, r3
 8003322:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003326:	601a      	str	r2, [r3, #0]
  return result;
 8003328:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800332c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332e:	fab3 f383 	clz	r3, r3
 8003332:	b2db      	uxtb	r3, r3
 8003334:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003338:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	461a      	mov	r2, r3
 8003340:	2300      	movs	r3, #0
 8003342:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7fe fb92 	bl	8001a6c <HAL_GetTick>
 8003348:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800334c:	e009      	b.n	8003362 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800334e:	f7fe fb8d 	bl	8001a6c <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e18b      	b.n	800367a <HAL_RCC_OscConfig+0xe02>
 8003362:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003366:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800336a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	fa93 f2a3 	rbit	r2, r3
 8003376:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800337a:	601a      	str	r2, [r3, #0]
  return result;
 800337c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003380:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003382:	fab3 f383 	clz	r3, r3
 8003386:	b2db      	uxtb	r3, r3
 8003388:	095b      	lsrs	r3, r3, #5
 800338a:	b2db      	uxtb	r3, r3
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b01      	cmp	r3, #1
 8003394:	d102      	bne.n	800339c <HAL_RCC_OscConfig+0xb24>
 8003396:	4b49      	ldr	r3, [pc, #292]	; (80034bc <HAL_RCC_OscConfig+0xc44>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	e01b      	b.n	80033d4 <HAL_RCC_OscConfig+0xb5c>
 800339c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80033a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	fa93 f2a3 	rbit	r2, r3
 80033b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80033ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	fa93 f2a3 	rbit	r2, r3
 80033ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	4b3a      	ldr	r3, [pc, #232]	; (80034bc <HAL_RCC_OscConfig+0xc44>)
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80033d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033dc:	6011      	str	r1, [r2, #0]
 80033de:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80033e2:	6812      	ldr	r2, [r2, #0]
 80033e4:	fa92 f1a2 	rbit	r1, r2
 80033e8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80033ec:	6011      	str	r1, [r2, #0]
  return result;
 80033ee:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	fab2 f282 	clz	r2, r2
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	f042 0220 	orr.w	r2, r2, #32
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	f002 021f 	and.w	r2, r2, #31
 8003404:	2101      	movs	r1, #1
 8003406:	fa01 f202 	lsl.w	r2, r1, r2
 800340a:	4013      	ands	r3, r2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d19e      	bne.n	800334e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003410:	4b2a      	ldr	r3, [pc, #168]	; (80034bc <HAL_RCC_OscConfig+0xc44>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003418:	1d3b      	adds	r3, r7, #4
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800341e:	1d3b      	adds	r3, r7, #4
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	430b      	orrs	r3, r1
 8003426:	4925      	ldr	r1, [pc, #148]	; (80034bc <HAL_RCC_OscConfig+0xc44>)
 8003428:	4313      	orrs	r3, r2
 800342a:	604b      	str	r3, [r1, #4]
 800342c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003430:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003434:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	fa93 f2a3 	rbit	r2, r3
 8003440:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003444:	601a      	str	r2, [r3, #0]
  return result;
 8003446:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800344a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800344c:	fab3 f383 	clz	r3, r3
 8003450:	b2db      	uxtb	r3, r3
 8003452:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003456:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	461a      	mov	r2, r3
 800345e:	2301      	movs	r3, #1
 8003460:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003462:	f7fe fb03 	bl	8001a6c <HAL_GetTick>
 8003466:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800346a:	e009      	b.n	8003480 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800346c:	f7fe fafe 	bl	8001a6c <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e0fc      	b.n	800367a <HAL_RCC_OscConfig+0xe02>
 8003480:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003484:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003488:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	fa93 f2a3 	rbit	r2, r3
 8003494:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003498:	601a      	str	r2, [r3, #0]
  return result;
 800349a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800349e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034a0:	fab3 f383 	clz	r3, r3
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d105      	bne.n	80034c0 <HAL_RCC_OscConfig+0xc48>
 80034b4:	4b01      	ldr	r3, [pc, #4]	; (80034bc <HAL_RCC_OscConfig+0xc44>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	e01e      	b.n	80034f8 <HAL_RCC_OscConfig+0xc80>
 80034ba:	bf00      	nop
 80034bc:	40021000 	.word	0x40021000
 80034c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	fa93 f2a3 	rbit	r2, r3
 80034d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80034de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	fa93 f2a3 	rbit	r2, r3
 80034ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	4b63      	ldr	r3, [pc, #396]	; (8003684 <HAL_RCC_OscConfig+0xe0c>)
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80034fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003500:	6011      	str	r1, [r2, #0]
 8003502:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003506:	6812      	ldr	r2, [r2, #0]
 8003508:	fa92 f1a2 	rbit	r1, r2
 800350c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003510:	6011      	str	r1, [r2, #0]
  return result;
 8003512:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003516:	6812      	ldr	r2, [r2, #0]
 8003518:	fab2 f282 	clz	r2, r2
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	f042 0220 	orr.w	r2, r2, #32
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	f002 021f 	and.w	r2, r2, #31
 8003528:	2101      	movs	r1, #1
 800352a:	fa01 f202 	lsl.w	r2, r1, r2
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d09b      	beq.n	800346c <HAL_RCC_OscConfig+0xbf4>
 8003534:	e0a0      	b.n	8003678 <HAL_RCC_OscConfig+0xe00>
 8003536:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800353a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800353e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003540:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	fa93 f2a3 	rbit	r2, r3
 800354a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800354e:	601a      	str	r2, [r3, #0]
  return result;
 8003550:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003554:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003556:	fab3 f383 	clz	r3, r3
 800355a:	b2db      	uxtb	r3, r3
 800355c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003560:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	461a      	mov	r2, r3
 8003568:	2300      	movs	r3, #0
 800356a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7fe fa7e 	bl	8001a6c <HAL_GetTick>
 8003570:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003574:	e009      	b.n	800358a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003576:	f7fe fa79 	bl	8001a6c <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e077      	b.n	800367a <HAL_RCC_OscConfig+0xe02>
 800358a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800358e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003592:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003594:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	fa93 f2a3 	rbit	r2, r3
 800359e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035a2:	601a      	str	r2, [r3, #0]
  return result;
 80035a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035aa:	fab3 f383 	clz	r3, r3
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	095b      	lsrs	r3, r3, #5
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d102      	bne.n	80035c4 <HAL_RCC_OscConfig+0xd4c>
 80035be:	4b31      	ldr	r3, [pc, #196]	; (8003684 <HAL_RCC_OscConfig+0xe0c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	e01b      	b.n	80035fc <HAL_RCC_OscConfig+0xd84>
 80035c4:	f107 0320 	add.w	r3, r7, #32
 80035c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ce:	f107 0320 	add.w	r3, r7, #32
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	fa93 f2a3 	rbit	r2, r3
 80035d8:	f107 031c 	add.w	r3, r7, #28
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	f107 0318 	add.w	r3, r7, #24
 80035e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	f107 0318 	add.w	r3, r7, #24
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	fa93 f2a3 	rbit	r2, r3
 80035f2:	f107 0314 	add.w	r3, r7, #20
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	4b22      	ldr	r3, [pc, #136]	; (8003684 <HAL_RCC_OscConfig+0xe0c>)
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	f107 0210 	add.w	r2, r7, #16
 8003600:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003604:	6011      	str	r1, [r2, #0]
 8003606:	f107 0210 	add.w	r2, r7, #16
 800360a:	6812      	ldr	r2, [r2, #0]
 800360c:	fa92 f1a2 	rbit	r1, r2
 8003610:	f107 020c 	add.w	r2, r7, #12
 8003614:	6011      	str	r1, [r2, #0]
  return result;
 8003616:	f107 020c 	add.w	r2, r7, #12
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	fab2 f282 	clz	r2, r2
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	f042 0220 	orr.w	r2, r2, #32
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	f002 021f 	and.w	r2, r2, #31
 800362c:	2101      	movs	r1, #1
 800362e:	fa01 f202 	lsl.w	r2, r1, r2
 8003632:	4013      	ands	r3, r2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d19e      	bne.n	8003576 <HAL_RCC_OscConfig+0xcfe>
 8003638:	e01e      	b.n	8003678 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800363a:	1d3b      	adds	r3, r7, #4
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e018      	b.n	800367a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003648:	4b0e      	ldr	r3, [pc, #56]	; (8003684 <HAL_RCC_OscConfig+0xe0c>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003650:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003654:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003658:	1d3b      	adds	r3, r7, #4
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	429a      	cmp	r2, r3
 8003660:	d108      	bne.n	8003674 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003662:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003666:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800366a:	1d3b      	adds	r3, r7, #4
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003670:	429a      	cmp	r2, r3
 8003672:	d001      	beq.n	8003678 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e000      	b.n	800367a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40021000 	.word	0x40021000

08003688 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b09e      	sub	sp, #120	; 0x78
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003692:	2300      	movs	r3, #0
 8003694:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e162      	b.n	8003966 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036a0:	4b90      	ldr	r3, [pc, #576]	; (80038e4 <HAL_RCC_ClockConfig+0x25c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d910      	bls.n	80036d0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ae:	4b8d      	ldr	r3, [pc, #564]	; (80038e4 <HAL_RCC_ClockConfig+0x25c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 0207 	bic.w	r2, r3, #7
 80036b6:	498b      	ldr	r1, [pc, #556]	; (80038e4 <HAL_RCC_ClockConfig+0x25c>)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036be:	4b89      	ldr	r3, [pc, #548]	; (80038e4 <HAL_RCC_ClockConfig+0x25c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d001      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e14a      	b.n	8003966 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036dc:	4b82      	ldr	r3, [pc, #520]	; (80038e8 <HAL_RCC_ClockConfig+0x260>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	497f      	ldr	r1, [pc, #508]	; (80038e8 <HAL_RCC_ClockConfig+0x260>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 80dc 	beq.w	80038b4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d13c      	bne.n	800377e <HAL_RCC_ClockConfig+0xf6>
 8003704:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003708:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800370c:	fa93 f3a3 	rbit	r3, r3
 8003710:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003714:	fab3 f383 	clz	r3, r3
 8003718:	b2db      	uxtb	r3, r3
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	b2db      	uxtb	r3, r3
 800371e:	f043 0301 	orr.w	r3, r3, #1
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b01      	cmp	r3, #1
 8003726:	d102      	bne.n	800372e <HAL_RCC_ClockConfig+0xa6>
 8003728:	4b6f      	ldr	r3, [pc, #444]	; (80038e8 <HAL_RCC_ClockConfig+0x260>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	e00f      	b.n	800374e <HAL_RCC_ClockConfig+0xc6>
 800372e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003732:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003734:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003736:	fa93 f3a3 	rbit	r3, r3
 800373a:	667b      	str	r3, [r7, #100]	; 0x64
 800373c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003740:	663b      	str	r3, [r7, #96]	; 0x60
 8003742:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003744:	fa93 f3a3 	rbit	r3, r3
 8003748:	65fb      	str	r3, [r7, #92]	; 0x5c
 800374a:	4b67      	ldr	r3, [pc, #412]	; (80038e8 <HAL_RCC_ClockConfig+0x260>)
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003752:	65ba      	str	r2, [r7, #88]	; 0x58
 8003754:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003756:	fa92 f2a2 	rbit	r2, r2
 800375a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800375c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800375e:	fab2 f282 	clz	r2, r2
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	f042 0220 	orr.w	r2, r2, #32
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	f002 021f 	and.w	r2, r2, #31
 800376e:	2101      	movs	r1, #1
 8003770:	fa01 f202 	lsl.w	r2, r1, r2
 8003774:	4013      	ands	r3, r2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d17b      	bne.n	8003872 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e0f3      	b.n	8003966 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d13c      	bne.n	8003800 <HAL_RCC_ClockConfig+0x178>
 8003786:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800378a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800378e:	fa93 f3a3 	rbit	r3, r3
 8003792:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003796:	fab3 f383 	clz	r3, r3
 800379a:	b2db      	uxtb	r3, r3
 800379c:	095b      	lsrs	r3, r3, #5
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	f043 0301 	orr.w	r3, r3, #1
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d102      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x128>
 80037aa:	4b4f      	ldr	r3, [pc, #316]	; (80038e8 <HAL_RCC_ClockConfig+0x260>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	e00f      	b.n	80037d0 <HAL_RCC_ClockConfig+0x148>
 80037b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037b8:	fa93 f3a3 	rbit	r3, r3
 80037bc:	647b      	str	r3, [r7, #68]	; 0x44
 80037be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037c2:	643b      	str	r3, [r7, #64]	; 0x40
 80037c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037c6:	fa93 f3a3 	rbit	r3, r3
 80037ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037cc:	4b46      	ldr	r3, [pc, #280]	; (80038e8 <HAL_RCC_ClockConfig+0x260>)
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037d4:	63ba      	str	r2, [r7, #56]	; 0x38
 80037d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037d8:	fa92 f2a2 	rbit	r2, r2
 80037dc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80037de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037e0:	fab2 f282 	clz	r2, r2
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	f042 0220 	orr.w	r2, r2, #32
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	f002 021f 	and.w	r2, r2, #31
 80037f0:	2101      	movs	r1, #1
 80037f2:	fa01 f202 	lsl.w	r2, r1, r2
 80037f6:	4013      	ands	r3, r2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d13a      	bne.n	8003872 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0b2      	b.n	8003966 <HAL_RCC_ClockConfig+0x2de>
 8003800:	2302      	movs	r3, #2
 8003802:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003806:	fa93 f3a3 	rbit	r3, r3
 800380a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800380c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380e:	fab3 f383 	clz	r3, r3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	095b      	lsrs	r3, r3, #5
 8003816:	b2db      	uxtb	r3, r3
 8003818:	f043 0301 	orr.w	r3, r3, #1
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b01      	cmp	r3, #1
 8003820:	d102      	bne.n	8003828 <HAL_RCC_ClockConfig+0x1a0>
 8003822:	4b31      	ldr	r3, [pc, #196]	; (80038e8 <HAL_RCC_ClockConfig+0x260>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	e00d      	b.n	8003844 <HAL_RCC_ClockConfig+0x1bc>
 8003828:	2302      	movs	r3, #2
 800382a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382e:	fa93 f3a3 	rbit	r3, r3
 8003832:	627b      	str	r3, [r7, #36]	; 0x24
 8003834:	2302      	movs	r3, #2
 8003836:	623b      	str	r3, [r7, #32]
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	fa93 f3a3 	rbit	r3, r3
 800383e:	61fb      	str	r3, [r7, #28]
 8003840:	4b29      	ldr	r3, [pc, #164]	; (80038e8 <HAL_RCC_ClockConfig+0x260>)
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	2202      	movs	r2, #2
 8003846:	61ba      	str	r2, [r7, #24]
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	fa92 f2a2 	rbit	r2, r2
 800384e:	617a      	str	r2, [r7, #20]
  return result;
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	fab2 f282 	clz	r2, r2
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	f042 0220 	orr.w	r2, r2, #32
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	f002 021f 	and.w	r2, r2, #31
 8003862:	2101      	movs	r1, #1
 8003864:	fa01 f202 	lsl.w	r2, r1, r2
 8003868:	4013      	ands	r3, r2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e079      	b.n	8003966 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003872:	4b1d      	ldr	r3, [pc, #116]	; (80038e8 <HAL_RCC_ClockConfig+0x260>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f023 0203 	bic.w	r2, r3, #3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	491a      	ldr	r1, [pc, #104]	; (80038e8 <HAL_RCC_ClockConfig+0x260>)
 8003880:	4313      	orrs	r3, r2
 8003882:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003884:	f7fe f8f2 	bl	8001a6c <HAL_GetTick>
 8003888:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800388c:	f7fe f8ee 	bl	8001a6c <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	; 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e061      	b.n	8003966 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a2:	4b11      	ldr	r3, [pc, #68]	; (80038e8 <HAL_RCC_ClockConfig+0x260>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f003 020c 	and.w	r2, r3, #12
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d1eb      	bne.n	800388c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038b4:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <HAL_RCC_ClockConfig+0x25c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d214      	bcs.n	80038ec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c2:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <HAL_RCC_ClockConfig+0x25c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f023 0207 	bic.w	r2, r3, #7
 80038ca:	4906      	ldr	r1, [pc, #24]	; (80038e4 <HAL_RCC_ClockConfig+0x25c>)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d2:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <HAL_RCC_ClockConfig+0x25c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d005      	beq.n	80038ec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e040      	b.n	8003966 <HAL_RCC_ClockConfig+0x2de>
 80038e4:	40022000 	.word	0x40022000
 80038e8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d008      	beq.n	800390a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038f8:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <HAL_RCC_ClockConfig+0x2e8>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	491a      	ldr	r1, [pc, #104]	; (8003970 <HAL_RCC_ClockConfig+0x2e8>)
 8003906:	4313      	orrs	r3, r2
 8003908:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d009      	beq.n	800392a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003916:	4b16      	ldr	r3, [pc, #88]	; (8003970 <HAL_RCC_ClockConfig+0x2e8>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4912      	ldr	r1, [pc, #72]	; (8003970 <HAL_RCC_ClockConfig+0x2e8>)
 8003926:	4313      	orrs	r3, r2
 8003928:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800392a:	f000 f829 	bl	8003980 <HAL_RCC_GetSysClockFreq>
 800392e:	4601      	mov	r1, r0
 8003930:	4b0f      	ldr	r3, [pc, #60]	; (8003970 <HAL_RCC_ClockConfig+0x2e8>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003938:	22f0      	movs	r2, #240	; 0xf0
 800393a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	fa92 f2a2 	rbit	r2, r2
 8003942:	60fa      	str	r2, [r7, #12]
  return result;
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	fab2 f282 	clz	r2, r2
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	40d3      	lsrs	r3, r2
 800394e:	4a09      	ldr	r2, [pc, #36]	; (8003974 <HAL_RCC_ClockConfig+0x2ec>)
 8003950:	5cd3      	ldrb	r3, [r2, r3]
 8003952:	fa21 f303 	lsr.w	r3, r1, r3
 8003956:	4a08      	ldr	r2, [pc, #32]	; (8003978 <HAL_RCC_ClockConfig+0x2f0>)
 8003958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800395a:	4b08      	ldr	r3, [pc, #32]	; (800397c <HAL_RCC_ClockConfig+0x2f4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f7fe f840 	bl	80019e4 <HAL_InitTick>
  
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3778      	adds	r7, #120	; 0x78
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40021000 	.word	0x40021000
 8003974:	08009ac0 	.word	0x08009ac0
 8003978:	20000000 	.word	0x20000000
 800397c:	20000004 	.word	0x20000004

08003980 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003980:	b480      	push	{r7}
 8003982:	b08b      	sub	sp, #44	; 0x2c
 8003984:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	2300      	movs	r3, #0
 800398c:	61bb      	str	r3, [r7, #24]
 800398e:	2300      	movs	r3, #0
 8003990:	627b      	str	r3, [r7, #36]	; 0x24
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800399a:	4b29      	ldr	r3, [pc, #164]	; (8003a40 <HAL_RCC_GetSysClockFreq+0xc0>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f003 030c 	and.w	r3, r3, #12
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d002      	beq.n	80039b0 <HAL_RCC_GetSysClockFreq+0x30>
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d003      	beq.n	80039b6 <HAL_RCC_GetSysClockFreq+0x36>
 80039ae:	e03c      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039b0:	4b24      	ldr	r3, [pc, #144]	; (8003a44 <HAL_RCC_GetSysClockFreq+0xc4>)
 80039b2:	623b      	str	r3, [r7, #32]
      break;
 80039b4:	e03c      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80039bc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80039c0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	fa92 f2a2 	rbit	r2, r2
 80039c8:	607a      	str	r2, [r7, #4]
  return result;
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	fab2 f282 	clz	r2, r2
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	40d3      	lsrs	r3, r2
 80039d4:	4a1c      	ldr	r2, [pc, #112]	; (8003a48 <HAL_RCC_GetSysClockFreq+0xc8>)
 80039d6:	5cd3      	ldrb	r3, [r2, r3]
 80039d8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80039da:	4b19      	ldr	r3, [pc, #100]	; (8003a40 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	220f      	movs	r2, #15
 80039e4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	fa92 f2a2 	rbit	r2, r2
 80039ec:	60fa      	str	r2, [r7, #12]
  return result;
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	fab2 f282 	clz	r2, r2
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	40d3      	lsrs	r3, r2
 80039f8:	4a14      	ldr	r2, [pc, #80]	; (8003a4c <HAL_RCC_GetSysClockFreq+0xcc>)
 80039fa:	5cd3      	ldrb	r3, [r2, r3]
 80039fc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a08:	4a0e      	ldr	r2, [pc, #56]	; (8003a44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	fb02 f303 	mul.w	r3, r2, r3
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
 8003a18:	e004      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	4a0c      	ldr	r2, [pc, #48]	; (8003a50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a1e:	fb02 f303 	mul.w	r3, r2, r3
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	623b      	str	r3, [r7, #32]
      break;
 8003a28:	e002      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a2a:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a2c:	623b      	str	r3, [r7, #32]
      break;
 8003a2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a30:	6a3b      	ldr	r3, [r7, #32]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	372c      	adds	r7, #44	; 0x2c
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40021000 	.word	0x40021000
 8003a44:	007a1200 	.word	0x007a1200
 8003a48:	08009ad8 	.word	0x08009ad8
 8003a4c:	08009ae8 	.word	0x08009ae8
 8003a50:	003d0900 	.word	0x003d0900

08003a54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a58:	4b03      	ldr	r3, [pc, #12]	; (8003a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	20000000 	.word	0x20000000

08003a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003a72:	f7ff ffef 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 8003a76:	4601      	mov	r1, r0
 8003a78:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a80:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003a84:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	fa92 f2a2 	rbit	r2, r2
 8003a8c:	603a      	str	r2, [r7, #0]
  return result;
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	fab2 f282 	clz	r2, r2
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	40d3      	lsrs	r3, r2
 8003a98:	4a04      	ldr	r2, [pc, #16]	; (8003aac <HAL_RCC_GetPCLK1Freq+0x40>)
 8003a9a:	5cd3      	ldrb	r3, [r2, r3]
 8003a9c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	08009ad0 	.word	0x08009ad0

08003ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003ab6:	f7ff ffcd 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 8003aba:	4601      	mov	r1, r0
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003ac4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003ac8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	fa92 f2a2 	rbit	r2, r2
 8003ad0:	603a      	str	r2, [r7, #0]
  return result;
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	fab2 f282 	clz	r2, r2
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	40d3      	lsrs	r3, r2
 8003adc:	4a04      	ldr	r2, [pc, #16]	; (8003af0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003ade:	5cd3      	ldrb	r3, [r2, r3]
 8003ae0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40021000 	.word	0x40021000
 8003af0:	08009ad0 	.word	0x08009ad0

08003af4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b092      	sub	sp, #72	; 0x48
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 80d0 	beq.w	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003b12:	2300      	movs	r3, #0
 8003b14:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b18:	4b86      	ldr	r3, [pc, #536]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10e      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b24:	4b83      	ldr	r3, [pc, #524]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	4a82      	ldr	r2, [pc, #520]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	61d3      	str	r3, [r2, #28]
 8003b30:	4b80      	ldr	r3, [pc, #512]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b38:	60bb      	str	r3, [r7, #8]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b42:	4b7d      	ldr	r3, [pc, #500]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d118      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b4e:	4b7a      	ldr	r3, [pc, #488]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a79      	ldr	r2, [pc, #484]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b58:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b5a:	f7fd ff87 	bl	8001a6c <HAL_GetTick>
 8003b5e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b60:	e008      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b62:	f7fd ff83 	bl	8001a6c <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b64      	cmp	r3, #100	; 0x64
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e0db      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b74:	4b70      	ldr	r3, [pc, #448]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b80:	4b6c      	ldr	r3, [pc, #432]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b88:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d07d      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d076      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b9e:	4b65      	ldr	r3, [pc, #404]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bac:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb0:	fa93 f3a3 	rbit	r3, r3
 8003bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bb8:	fab3 f383 	clz	r3, r3
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	4b5e      	ldr	r3, [pc, #376]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	2301      	movs	r3, #1
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd4:	fa93 f3a3 	rbit	r3, r3
 8003bd8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bdc:	fab3 f383 	clz	r3, r3
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	461a      	mov	r2, r3
 8003be4:	4b55      	ldr	r3, [pc, #340]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003be6:	4413      	add	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	461a      	mov	r2, r3
 8003bec:	2300      	movs	r3, #0
 8003bee:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bf0:	4a50      	ldr	r2, [pc, #320]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d045      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c00:	f7fd ff34 	bl	8001a6c <HAL_GetTick>
 8003c04:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c06:	e00a      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c08:	f7fd ff30 	bl	8001a6c <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e086      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c24:	fa93 f3a3 	rbit	r3, r3
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	623b      	str	r3, [r7, #32]
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	fa93 f3a3 	rbit	r3, r3
 8003c34:	61fb      	str	r3, [r7, #28]
  return result;
 8003c36:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c38:	fab3 f383 	clz	r3, r3
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	f043 0302 	orr.w	r3, r3, #2
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d102      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003c4c:	4b39      	ldr	r3, [pc, #228]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	e007      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003c52:	2302      	movs	r3, #2
 8003c54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	fa93 f3a3 	rbit	r3, r3
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	4b35      	ldr	r3, [pc, #212]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	2202      	movs	r2, #2
 8003c64:	613a      	str	r2, [r7, #16]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	fa92 f2a2 	rbit	r2, r2
 8003c6c:	60fa      	str	r2, [r7, #12]
  return result;
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	fab2 f282 	clz	r2, r2
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	f002 021f 	and.w	r2, r2, #31
 8003c80:	2101      	movs	r1, #1
 8003c82:	fa01 f202 	lsl.w	r2, r1, r2
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0bd      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003c8c:	4b29      	ldr	r3, [pc, #164]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	4926      	ldr	r1, [pc, #152]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c9e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d105      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca6:	4b23      	ldr	r3, [pc, #140]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	4a22      	ldr	r2, [pc, #136]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d008      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cbe:	4b1d      	ldr	r3, [pc, #116]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	f023 0203 	bic.w	r2, r3, #3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	491a      	ldr	r1, [pc, #104]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0320 	and.w	r3, r3, #32
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cdc:	4b15      	ldr	r3, [pc, #84]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	f023 0210 	bic.w	r2, r3, #16
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4912      	ldr	r1, [pc, #72]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d008      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003cfa:	4b0e      	ldr	r3, [pc, #56]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	490b      	ldr	r1, [pc, #44]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d18:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	4903      	ldr	r1, [pc, #12]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3748      	adds	r7, #72	; 0x48
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40021000 	.word	0x40021000
 8003d38:	40007000 	.word	0x40007000
 8003d3c:	10908100 	.word	0x10908100

08003d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e01d      	b.n	8003d8e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fd fcb8 	bl	80016dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4610      	mov	r0, r2
 8003d80:	f000 fbd6 	bl	8004530 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0201 	orr.w	r2, r2, #1
 8003dae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	4b0c      	ldr	r3, [pc, #48]	; (8003de8 <HAL_TIM_Base_Start_IT+0x50>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b06      	cmp	r3, #6
 8003dc0:	d00b      	beq.n	8003dda <HAL_TIM_Base_Start_IT+0x42>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc8:	d007      	beq.n	8003dda <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f042 0201 	orr.w	r2, r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	00010007 	.word	0x00010007

08003dec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e01d      	b.n	8003e3a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d106      	bne.n	8003e18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f815 	bl	8003e42 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3304      	adds	r3, #4
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	f000 fb80 	bl	8004530 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
	...

08003e58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2201      	movs	r2, #1
 8003e68:	6839      	ldr	r1, [r7, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 ff18 	bl	8004ca0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a1c      	ldr	r2, [pc, #112]	; (8003ee8 <HAL_TIM_PWM_Start+0x90>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00e      	beq.n	8003e98 <HAL_TIM_PWM_Start+0x40>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a1b      	ldr	r2, [pc, #108]	; (8003eec <HAL_TIM_PWM_Start+0x94>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d009      	beq.n	8003e98 <HAL_TIM_PWM_Start+0x40>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a19      	ldr	r2, [pc, #100]	; (8003ef0 <HAL_TIM_PWM_Start+0x98>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d004      	beq.n	8003e98 <HAL_TIM_PWM_Start+0x40>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a18      	ldr	r2, [pc, #96]	; (8003ef4 <HAL_TIM_PWM_Start+0x9c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d101      	bne.n	8003e9c <HAL_TIM_PWM_Start+0x44>
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e000      	b.n	8003e9e <HAL_TIM_PWM_Start+0x46>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d007      	beq.n	8003eb2 <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <HAL_TIM_PWM_Start+0xa0>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b06      	cmp	r3, #6
 8003ec2:	d00b      	beq.n	8003edc <HAL_TIM_PWM_Start+0x84>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eca:	d007      	beq.n	8003edc <HAL_TIM_PWM_Start+0x84>
  {
    __HAL_TIM_ENABLE(htim);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40012c00 	.word	0x40012c00
 8003eec:	40014000 	.word	0x40014000
 8003ef0:	40014400 	.word	0x40014400
 8003ef4:	40014800 	.word	0x40014800
 8003ef8:	00010007 	.word	0x00010007

08003efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d122      	bne.n	8003f58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d11b      	bne.n	8003f58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f06f 0202 	mvn.w	r2, #2
 8003f28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	f003 0303 	and.w	r3, r3, #3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 fad7 	bl	80044f2 <HAL_TIM_IC_CaptureCallback>
 8003f44:	e005      	b.n	8003f52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 fac9 	bl	80044de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 fada 	bl	8004506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d122      	bne.n	8003fac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d11b      	bne.n	8003fac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f06f 0204 	mvn.w	r2, #4
 8003f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2202      	movs	r2, #2
 8003f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 faad 	bl	80044f2 <HAL_TIM_IC_CaptureCallback>
 8003f98:	e005      	b.n	8003fa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fa9f 	bl	80044de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 fab0 	bl	8004506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d122      	bne.n	8004000 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d11b      	bne.n	8004000 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0208 	mvn.w	r2, #8
 8003fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2204      	movs	r2, #4
 8003fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 fa83 	bl	80044f2 <HAL_TIM_IC_CaptureCallback>
 8003fec:	e005      	b.n	8003ffa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fa75 	bl	80044de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 fa86 	bl	8004506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0310 	and.w	r3, r3, #16
 800400a:	2b10      	cmp	r3, #16
 800400c:	d122      	bne.n	8004054 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b10      	cmp	r3, #16
 800401a:	d11b      	bne.n	8004054 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0210 	mvn.w	r2, #16
 8004024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2208      	movs	r2, #8
 800402a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 fa59 	bl	80044f2 <HAL_TIM_IC_CaptureCallback>
 8004040:	e005      	b.n	800404e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fa4b 	bl	80044de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 fa5c 	bl	8004506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b01      	cmp	r3, #1
 8004060:	d10e      	bne.n	8004080 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b01      	cmp	r3, #1
 800406e:	d107      	bne.n	8004080 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f06f 0201 	mvn.w	r2, #1
 8004078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fd f8f4 	bl	8001268 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408a:	2b80      	cmp	r3, #128	; 0x80
 800408c:	d10e      	bne.n	80040ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004098:	2b80      	cmp	r3, #128	; 0x80
 800409a:	d107      	bne.n	80040ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 fe98 	bl	8004ddc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ba:	d10e      	bne.n	80040da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c6:	2b80      	cmp	r3, #128	; 0x80
 80040c8:	d107      	bne.n	80040da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80040d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 fe8b 	bl	8004df0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e4:	2b40      	cmp	r3, #64	; 0x40
 80040e6:	d10e      	bne.n	8004106 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f2:	2b40      	cmp	r3, #64	; 0x40
 80040f4:	d107      	bne.n	8004106 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 fa0a 	bl	800451a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	f003 0320 	and.w	r3, r3, #32
 8004110:	2b20      	cmp	r3, #32
 8004112:	d10e      	bne.n	8004132 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f003 0320 	and.w	r3, r3, #32
 800411e:	2b20      	cmp	r3, #32
 8004120:	d107      	bne.n	8004132 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f06f 0220 	mvn.w	r2, #32
 800412a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 fe4b 	bl	8004dc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004132:	bf00      	nop
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
	...

0800413c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800414e:	2b01      	cmp	r3, #1
 8004150:	d101      	bne.n	8004156 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004152:	2302      	movs	r3, #2
 8004154:	e105      	b.n	8004362 <HAL_TIM_PWM_ConfigChannel+0x226>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2202      	movs	r2, #2
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b14      	cmp	r3, #20
 800416a:	f200 80f0 	bhi.w	800434e <HAL_TIM_PWM_ConfigChannel+0x212>
 800416e:	a201      	add	r2, pc, #4	; (adr r2, 8004174 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004174:	080041c9 	.word	0x080041c9
 8004178:	0800434f 	.word	0x0800434f
 800417c:	0800434f 	.word	0x0800434f
 8004180:	0800434f 	.word	0x0800434f
 8004184:	08004209 	.word	0x08004209
 8004188:	0800434f 	.word	0x0800434f
 800418c:	0800434f 	.word	0x0800434f
 8004190:	0800434f 	.word	0x0800434f
 8004194:	0800424b 	.word	0x0800424b
 8004198:	0800434f 	.word	0x0800434f
 800419c:	0800434f 	.word	0x0800434f
 80041a0:	0800434f 	.word	0x0800434f
 80041a4:	0800428b 	.word	0x0800428b
 80041a8:	0800434f 	.word	0x0800434f
 80041ac:	0800434f 	.word	0x0800434f
 80041b0:	0800434f 	.word	0x0800434f
 80041b4:	080042cd 	.word	0x080042cd
 80041b8:	0800434f 	.word	0x0800434f
 80041bc:	0800434f 	.word	0x0800434f
 80041c0:	0800434f 	.word	0x0800434f
 80041c4:	0800430d 	.word	0x0800430d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68b9      	ldr	r1, [r7, #8]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fa26 	bl	8004620 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699a      	ldr	r2, [r3, #24]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0208 	orr.w	r2, r2, #8
 80041e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699a      	ldr	r2, [r3, #24]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0204 	bic.w	r2, r2, #4
 80041f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6999      	ldr	r1, [r3, #24]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	691a      	ldr	r2, [r3, #16]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	619a      	str	r2, [r3, #24]
      break;
 8004206:	e0a3      	b.n	8004350 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68b9      	ldr	r1, [r7, #8]
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fa8c 	bl	800472c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699a      	ldr	r2, [r3, #24]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699a      	ldr	r2, [r3, #24]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6999      	ldr	r1, [r3, #24]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	021a      	lsls	r2, r3, #8
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	619a      	str	r2, [r3, #24]
      break;
 8004248:	e082      	b.n	8004350 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68b9      	ldr	r1, [r7, #8]
 8004250:	4618      	mov	r0, r3
 8004252:	f000 faeb 	bl	800482c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69da      	ldr	r2, [r3, #28]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f042 0208 	orr.w	r2, r2, #8
 8004264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69da      	ldr	r2, [r3, #28]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0204 	bic.w	r2, r2, #4
 8004274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69d9      	ldr	r1, [r3, #28]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	61da      	str	r2, [r3, #28]
      break;
 8004288:	e062      	b.n	8004350 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68b9      	ldr	r1, [r7, #8]
 8004290:	4618      	mov	r0, r3
 8004292:	f000 fb49 	bl	8004928 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69da      	ldr	r2, [r3, #28]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	69da      	ldr	r2, [r3, #28]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	69d9      	ldr	r1, [r3, #28]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	021a      	lsls	r2, r3, #8
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	61da      	str	r2, [r3, #28]
      break;
 80042ca:	e041      	b.n	8004350 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 fb8c 	bl	80049f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0208 	orr.w	r2, r2, #8
 80042e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0204 	bic.w	r2, r2, #4
 80042f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800430a:	e021      	b.n	8004350 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	4618      	mov	r0, r3
 8004314:	f000 fbca 	bl	8004aac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004326:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004336:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	021a      	lsls	r2, r3, #8
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800434c:	e000      	b.n	8004350 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 800434e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop

0800436c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <HAL_TIM_ConfigClockSource+0x18>
 8004380:	2302      	movs	r3, #2
 8004382:	e0a8      	b.n	80044d6 <HAL_TIM_ConfigClockSource+0x16a>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b40      	cmp	r3, #64	; 0x40
 80043be:	d067      	beq.n	8004490 <HAL_TIM_ConfigClockSource+0x124>
 80043c0:	2b40      	cmp	r3, #64	; 0x40
 80043c2:	d80b      	bhi.n	80043dc <HAL_TIM_ConfigClockSource+0x70>
 80043c4:	2b10      	cmp	r3, #16
 80043c6:	d073      	beq.n	80044b0 <HAL_TIM_ConfigClockSource+0x144>
 80043c8:	2b10      	cmp	r3, #16
 80043ca:	d802      	bhi.n	80043d2 <HAL_TIM_ConfigClockSource+0x66>
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d06f      	beq.n	80044b0 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80043d0:	e078      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80043d2:	2b20      	cmp	r3, #32
 80043d4:	d06c      	beq.n	80044b0 <HAL_TIM_ConfigClockSource+0x144>
 80043d6:	2b30      	cmp	r3, #48	; 0x30
 80043d8:	d06a      	beq.n	80044b0 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80043da:	e073      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80043dc:	2b70      	cmp	r3, #112	; 0x70
 80043de:	d00d      	beq.n	80043fc <HAL_TIM_ConfigClockSource+0x90>
 80043e0:	2b70      	cmp	r3, #112	; 0x70
 80043e2:	d804      	bhi.n	80043ee <HAL_TIM_ConfigClockSource+0x82>
 80043e4:	2b50      	cmp	r3, #80	; 0x50
 80043e6:	d033      	beq.n	8004450 <HAL_TIM_ConfigClockSource+0xe4>
 80043e8:	2b60      	cmp	r3, #96	; 0x60
 80043ea:	d041      	beq.n	8004470 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80043ec:	e06a      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80043ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f2:	d066      	beq.n	80044c2 <HAL_TIM_ConfigClockSource+0x156>
 80043f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043f8:	d017      	beq.n	800442a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80043fa:	e063      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6818      	ldr	r0, [r3, #0]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	6899      	ldr	r1, [r3, #8]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f000 fc28 	bl	8004c60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800441e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	609a      	str	r2, [r3, #8]
      break;
 8004428:	e04c      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	6899      	ldr	r1, [r3, #8]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f000 fc11 	bl	8004c60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800444c:	609a      	str	r2, [r3, #8]
      break;
 800444e:	e039      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6818      	ldr	r0, [r3, #0]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	6859      	ldr	r1, [r3, #4]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	461a      	mov	r2, r3
 800445e:	f000 fb85 	bl	8004b6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2150      	movs	r1, #80	; 0x50
 8004468:	4618      	mov	r0, r3
 800446a:	f000 fbde 	bl	8004c2a <TIM_ITRx_SetConfig>
      break;
 800446e:	e029      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6818      	ldr	r0, [r3, #0]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	6859      	ldr	r1, [r3, #4]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	461a      	mov	r2, r3
 800447e:	f000 fba4 	bl	8004bca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2160      	movs	r1, #96	; 0x60
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fbce 	bl	8004c2a <TIM_ITRx_SetConfig>
      break;
 800448e:	e019      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	6859      	ldr	r1, [r3, #4]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	461a      	mov	r2, r3
 800449e:	f000 fb65 	bl	8004b6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2140      	movs	r1, #64	; 0x40
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fbbe 	bl	8004c2a <TIM_ITRx_SetConfig>
      break;
 80044ae:	e009      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4619      	mov	r1, r3
 80044ba:	4610      	mov	r0, r2
 80044bc:	f000 fbb5 	bl	8004c2a <TIM_ITRx_SetConfig>
      break;
 80044c0:	e000      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80044c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
	...

08004530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a32      	ldr	r2, [pc, #200]	; (800460c <TIM_Base_SetConfig+0xdc>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d007      	beq.n	8004558 <TIM_Base_SetConfig+0x28>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454e:	d003      	beq.n	8004558 <TIM_Base_SetConfig+0x28>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a2f      	ldr	r2, [pc, #188]	; (8004610 <TIM_Base_SetConfig+0xe0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d108      	bne.n	800456a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a27      	ldr	r2, [pc, #156]	; (800460c <TIM_Base_SetConfig+0xdc>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d013      	beq.n	800459a <TIM_Base_SetConfig+0x6a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004578:	d00f      	beq.n	800459a <TIM_Base_SetConfig+0x6a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a24      	ldr	r2, [pc, #144]	; (8004610 <TIM_Base_SetConfig+0xe0>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00b      	beq.n	800459a <TIM_Base_SetConfig+0x6a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a23      	ldr	r2, [pc, #140]	; (8004614 <TIM_Base_SetConfig+0xe4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d007      	beq.n	800459a <TIM_Base_SetConfig+0x6a>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a22      	ldr	r2, [pc, #136]	; (8004618 <TIM_Base_SetConfig+0xe8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d003      	beq.n	800459a <TIM_Base_SetConfig+0x6a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a21      	ldr	r2, [pc, #132]	; (800461c <TIM_Base_SetConfig+0xec>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d108      	bne.n	80045ac <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a0e      	ldr	r2, [pc, #56]	; (800460c <TIM_Base_SetConfig+0xdc>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d00b      	beq.n	80045f0 <TIM_Base_SetConfig+0xc0>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a0e      	ldr	r2, [pc, #56]	; (8004614 <TIM_Base_SetConfig+0xe4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d007      	beq.n	80045f0 <TIM_Base_SetConfig+0xc0>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a0d      	ldr	r2, [pc, #52]	; (8004618 <TIM_Base_SetConfig+0xe8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d003      	beq.n	80045f0 <TIM_Base_SetConfig+0xc0>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a0c      	ldr	r2, [pc, #48]	; (800461c <TIM_Base_SetConfig+0xec>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d103      	bne.n	80045f8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	691a      	ldr	r2, [r3, #16]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	615a      	str	r2, [r3, #20]
}
 80045fe:	bf00      	nop
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40012c00 	.word	0x40012c00
 8004610:	40000400 	.word	0x40000400
 8004614:	40014000 	.word	0x40014000
 8004618:	40014400 	.word	0x40014400
 800461c:	40014800 	.word	0x40014800

08004620 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	f023 0201 	bic.w	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800464e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0303 	bic.w	r3, r3, #3
 800465a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f023 0302 	bic.w	r3, r3, #2
 800466c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4313      	orrs	r3, r2
 8004676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a28      	ldr	r2, [pc, #160]	; (800471c <TIM_OC1_SetConfig+0xfc>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d00b      	beq.n	8004698 <TIM_OC1_SetConfig+0x78>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a27      	ldr	r2, [pc, #156]	; (8004720 <TIM_OC1_SetConfig+0x100>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d007      	beq.n	8004698 <TIM_OC1_SetConfig+0x78>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a26      	ldr	r2, [pc, #152]	; (8004724 <TIM_OC1_SetConfig+0x104>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d003      	beq.n	8004698 <TIM_OC1_SetConfig+0x78>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a25      	ldr	r2, [pc, #148]	; (8004728 <TIM_OC1_SetConfig+0x108>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d10c      	bne.n	80046b2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f023 0308 	bic.w	r3, r3, #8
 800469e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f023 0304 	bic.w	r3, r3, #4
 80046b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a19      	ldr	r2, [pc, #100]	; (800471c <TIM_OC1_SetConfig+0xfc>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d00b      	beq.n	80046d2 <TIM_OC1_SetConfig+0xb2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a18      	ldr	r2, [pc, #96]	; (8004720 <TIM_OC1_SetConfig+0x100>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d007      	beq.n	80046d2 <TIM_OC1_SetConfig+0xb2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a17      	ldr	r2, [pc, #92]	; (8004724 <TIM_OC1_SetConfig+0x104>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d003      	beq.n	80046d2 <TIM_OC1_SetConfig+0xb2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a16      	ldr	r2, [pc, #88]	; (8004728 <TIM_OC1_SetConfig+0x108>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d111      	bne.n	80046f6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	621a      	str	r2, [r3, #32]
}
 8004710:	bf00      	nop
 8004712:	371c      	adds	r7, #28
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	40012c00 	.word	0x40012c00
 8004720:	40014000 	.word	0x40014000
 8004724:	40014400 	.word	0x40014400
 8004728:	40014800 	.word	0x40014800

0800472c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	f023 0210 	bic.w	r2, r3, #16
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800475a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004766:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	021b      	lsls	r3, r3, #8
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4313      	orrs	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f023 0320 	bic.w	r3, r3, #32
 800477a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a24      	ldr	r2, [pc, #144]	; (800481c <TIM_OC2_SetConfig+0xf0>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d10d      	bne.n	80047ac <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004796:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a1b      	ldr	r2, [pc, #108]	; (800481c <TIM_OC2_SetConfig+0xf0>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d00b      	beq.n	80047cc <TIM_OC2_SetConfig+0xa0>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a1a      	ldr	r2, [pc, #104]	; (8004820 <TIM_OC2_SetConfig+0xf4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d007      	beq.n	80047cc <TIM_OC2_SetConfig+0xa0>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a19      	ldr	r2, [pc, #100]	; (8004824 <TIM_OC2_SetConfig+0xf8>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d003      	beq.n	80047cc <TIM_OC2_SetConfig+0xa0>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a18      	ldr	r2, [pc, #96]	; (8004828 <TIM_OC2_SetConfig+0xfc>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d113      	bne.n	80047f4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047d2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047da:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	621a      	str	r2, [r3, #32]
}
 800480e:	bf00      	nop
 8004810:	371c      	adds	r7, #28
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40012c00 	.word	0x40012c00
 8004820:	40014000 	.word	0x40014000
 8004824:	40014400 	.word	0x40014400
 8004828:	40014800 	.word	0x40014800

0800482c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800482c:	b480      	push	{r7}
 800482e:	b087      	sub	sp, #28
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800485a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f023 0303 	bic.w	r3, r3, #3
 8004866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	4313      	orrs	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	021b      	lsls	r3, r3, #8
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	4313      	orrs	r3, r2
 8004884:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a23      	ldr	r2, [pc, #140]	; (8004918 <TIM_OC3_SetConfig+0xec>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d10d      	bne.n	80048aa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004894:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	021b      	lsls	r3, r3, #8
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	4313      	orrs	r3, r2
 80048a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048a8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a1a      	ldr	r2, [pc, #104]	; (8004918 <TIM_OC3_SetConfig+0xec>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00b      	beq.n	80048ca <TIM_OC3_SetConfig+0x9e>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a19      	ldr	r2, [pc, #100]	; (800491c <TIM_OC3_SetConfig+0xf0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d007      	beq.n	80048ca <TIM_OC3_SetConfig+0x9e>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a18      	ldr	r2, [pc, #96]	; (8004920 <TIM_OC3_SetConfig+0xf4>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d003      	beq.n	80048ca <TIM_OC3_SetConfig+0x9e>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a17      	ldr	r2, [pc, #92]	; (8004924 <TIM_OC3_SetConfig+0xf8>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d113      	bne.n	80048f2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	011b      	lsls	r3, r3, #4
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	621a      	str	r2, [r3, #32]
}
 800490c:	bf00      	nop
 800490e:	371c      	adds	r7, #28
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	40012c00 	.word	0x40012c00
 800491c:	40014000 	.word	0x40014000
 8004920:	40014400 	.word	0x40014400
 8004924:	40014800 	.word	0x40014800

08004928 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800495a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	021b      	lsls	r3, r3, #8
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4313      	orrs	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004976:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	031b      	lsls	r3, r3, #12
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	4313      	orrs	r3, r2
 8004982:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a16      	ldr	r2, [pc, #88]	; (80049e0 <TIM_OC4_SetConfig+0xb8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d00b      	beq.n	80049a4 <TIM_OC4_SetConfig+0x7c>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a15      	ldr	r2, [pc, #84]	; (80049e4 <TIM_OC4_SetConfig+0xbc>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d007      	beq.n	80049a4 <TIM_OC4_SetConfig+0x7c>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a14      	ldr	r2, [pc, #80]	; (80049e8 <TIM_OC4_SetConfig+0xc0>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d003      	beq.n	80049a4 <TIM_OC4_SetConfig+0x7c>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a13      	ldr	r2, [pc, #76]	; (80049ec <TIM_OC4_SetConfig+0xc4>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d109      	bne.n	80049b8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	019b      	lsls	r3, r3, #6
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	621a      	str	r2, [r3, #32]
}
 80049d2:	bf00      	nop
 80049d4:	371c      	adds	r7, #28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40012c00 	.word	0x40012c00
 80049e4:	40014000 	.word	0x40014000
 80049e8:	40014400 	.word	0x40014400
 80049ec:	40014800 	.word	0x40014800

080049f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004a34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	041b      	lsls	r3, r3, #16
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a15      	ldr	r2, [pc, #84]	; (8004a9c <TIM_OC5_SetConfig+0xac>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d00b      	beq.n	8004a62 <TIM_OC5_SetConfig+0x72>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a14      	ldr	r2, [pc, #80]	; (8004aa0 <TIM_OC5_SetConfig+0xb0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d007      	beq.n	8004a62 <TIM_OC5_SetConfig+0x72>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a13      	ldr	r2, [pc, #76]	; (8004aa4 <TIM_OC5_SetConfig+0xb4>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d003      	beq.n	8004a62 <TIM_OC5_SetConfig+0x72>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a12      	ldr	r2, [pc, #72]	; (8004aa8 <TIM_OC5_SetConfig+0xb8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d109      	bne.n	8004a76 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	021b      	lsls	r3, r3, #8
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	621a      	str	r2, [r3, #32]
}
 8004a90:	bf00      	nop
 8004a92:	371c      	adds	r7, #28
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	40012c00 	.word	0x40012c00
 8004aa0:	40014000 	.word	0x40014000
 8004aa4:	40014400 	.word	0x40014400
 8004aa8:	40014800 	.word	0x40014800

08004aac <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	021b      	lsls	r3, r3, #8
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004af2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	051b      	lsls	r3, r3, #20
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a16      	ldr	r2, [pc, #88]	; (8004b5c <TIM_OC6_SetConfig+0xb0>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d00b      	beq.n	8004b20 <TIM_OC6_SetConfig+0x74>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a15      	ldr	r2, [pc, #84]	; (8004b60 <TIM_OC6_SetConfig+0xb4>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d007      	beq.n	8004b20 <TIM_OC6_SetConfig+0x74>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a14      	ldr	r2, [pc, #80]	; (8004b64 <TIM_OC6_SetConfig+0xb8>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d003      	beq.n	8004b20 <TIM_OC6_SetConfig+0x74>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a13      	ldr	r2, [pc, #76]	; (8004b68 <TIM_OC6_SetConfig+0xbc>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d109      	bne.n	8004b34 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	029b      	lsls	r3, r3, #10
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	621a      	str	r2, [r3, #32]
}
 8004b4e:	bf00      	nop
 8004b50:	371c      	adds	r7, #28
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	40012c00 	.word	0x40012c00
 8004b60:	40014000 	.word	0x40014000
 8004b64:	40014400 	.word	0x40014400
 8004b68:	40014800 	.word	0x40014800

08004b6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	f023 0201 	bic.w	r2, r3, #1
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f023 030a 	bic.w	r3, r3, #10
 8004ba8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	621a      	str	r2, [r3, #32]
}
 8004bbe:	bf00      	nop
 8004bc0:	371c      	adds	r7, #28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b087      	sub	sp, #28
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	60f8      	str	r0, [r7, #12]
 8004bd2:	60b9      	str	r1, [r7, #8]
 8004bd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	f023 0210 	bic.w	r2, r3, #16
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	031b      	lsls	r3, r3, #12
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	621a      	str	r2, [r3, #32]
}
 8004c1e:	bf00      	nop
 8004c20:	371c      	adds	r7, #28
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b085      	sub	sp, #20
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f043 0307 	orr.w	r3, r3, #7
 8004c4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	609a      	str	r2, [r3, #8]
}
 8004c54:	bf00      	nop
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	021a      	lsls	r2, r3, #8
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	431a      	orrs	r2, r3
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	609a      	str	r2, [r3, #8]
}
 8004c94:	bf00      	nop
 8004c96:	371c      	adds	r7, #28
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f003 031f 	and.w	r3, r3, #31
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6a1a      	ldr	r2, [r3, #32]
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	401a      	ands	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6a1a      	ldr	r2, [r3, #32]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f003 031f 	and.w	r3, r3, #31
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	621a      	str	r2, [r3, #32]
}
 8004cde:	bf00      	nop
 8004ce0:	371c      	adds	r7, #28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
	...

08004cec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e054      	b.n	8004dae <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a24      	ldr	r2, [pc, #144]	; (8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d108      	bne.n	8004d40 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a17      	ldr	r2, [pc, #92]	; (8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d00e      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d6c:	d009      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a13      	ldr	r2, [pc, #76]	; (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d004      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a11      	ldr	r2, [pc, #68]	; (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d10c      	bne.n	8004d9c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	40012c00 	.word	0x40012c00
 8004dc0:	40000400 	.word	0x40000400
 8004dc4:	40014000 	.word	0x40014000

08004dc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e040      	b.n	8004e98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d106      	bne.n	8004e2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7fc fd26 	bl	8001878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2224      	movs	r2, #36	; 0x24
 8004e30:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0201 	bic.w	r2, r2, #1
 8004e40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f8c0 	bl	8004fc8 <UART_SetConfig>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d101      	bne.n	8004e52 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e022      	b.n	8004e98 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 fa36 	bl	80052cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0201 	orr.w	r2, r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 fabd 	bl	8005410 <UART_CheckIdleState>
 8004e96:	4603      	mov	r3, r0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08a      	sub	sp, #40	; 0x28
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	603b      	str	r3, [r7, #0]
 8004eac:	4613      	mov	r3, r2
 8004eae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb4:	2b20      	cmp	r3, #32
 8004eb6:	f040 8081 	bne.w	8004fbc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d002      	beq.n	8004ec6 <HAL_UART_Transmit+0x26>
 8004ec0:	88fb      	ldrh	r3, [r7, #6]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e079      	b.n	8004fbe <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <HAL_UART_Transmit+0x38>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e072      	b.n	8004fbe <HAL_UART_Transmit+0x11e>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2221      	movs	r2, #33	; 0x21
 8004eea:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004eec:	f7fc fdbe 	bl	8001a6c <HAL_GetTick>
 8004ef0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	88fa      	ldrh	r2, [r7, #6]
 8004ef6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	88fa      	ldrh	r2, [r7, #6]
 8004efe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f0a:	d108      	bne.n	8004f1e <HAL_UART_Transmit+0x7e>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d104      	bne.n	8004f1e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004f14:	2300      	movs	r3, #0
 8004f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	61bb      	str	r3, [r7, #24]
 8004f1c:	e003      	b.n	8004f26 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f26:	e02d      	b.n	8004f84 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	2180      	movs	r1, #128	; 0x80
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 fab1 	bl	800549a <UART_WaitOnFlagUntilTimeout>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e03d      	b.n	8004fbe <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10b      	bne.n	8004f60 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	881a      	ldrh	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f54:	b292      	uxth	r2, r2
 8004f56:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	3302      	adds	r3, #2
 8004f5c:	61bb      	str	r3, [r7, #24]
 8004f5e:	e008      	b.n	8004f72 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	781a      	ldrb	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	b292      	uxth	r2, r2
 8004f6a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1cb      	bne.n	8004f28 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	2200      	movs	r2, #0
 8004f98:	2140      	movs	r1, #64	; 0x40
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 fa7d 	bl	800549a <UART_WaitOnFlagUntilTimeout>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e009      	b.n	8004fbe <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2220      	movs	r2, #32
 8004fae:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	e000      	b.n	8004fbe <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004fbc:	2302      	movs	r3, #2
  }
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3720      	adds	r7, #32
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	69db      	ldr	r3, [r3, #28]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	4ba2      	ldr	r3, [pc, #648]	; (8005280 <UART_SetConfig+0x2b8>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6812      	ldr	r2, [r2, #0]
 8004ffe:	6939      	ldr	r1, [r7, #16]
 8005000:	430b      	orrs	r3, r1
 8005002:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4313      	orrs	r3, r2
 8005028:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	430a      	orrs	r2, r1
 800503c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a90      	ldr	r2, [pc, #576]	; (8005284 <UART_SetConfig+0x2bc>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d121      	bne.n	800508c <UART_SetConfig+0xc4>
 8005048:	4b8f      	ldr	r3, [pc, #572]	; (8005288 <UART_SetConfig+0x2c0>)
 800504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504c:	f003 0303 	and.w	r3, r3, #3
 8005050:	2b03      	cmp	r3, #3
 8005052:	d817      	bhi.n	8005084 <UART_SetConfig+0xbc>
 8005054:	a201      	add	r2, pc, #4	; (adr r2, 800505c <UART_SetConfig+0x94>)
 8005056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505a:	bf00      	nop
 800505c:	0800506d 	.word	0x0800506d
 8005060:	08005079 	.word	0x08005079
 8005064:	0800507f 	.word	0x0800507f
 8005068:	08005073 	.word	0x08005073
 800506c:	2300      	movs	r3, #0
 800506e:	77fb      	strb	r3, [r7, #31]
 8005070:	e01e      	b.n	80050b0 <UART_SetConfig+0xe8>
 8005072:	2302      	movs	r3, #2
 8005074:	77fb      	strb	r3, [r7, #31]
 8005076:	e01b      	b.n	80050b0 <UART_SetConfig+0xe8>
 8005078:	2304      	movs	r3, #4
 800507a:	77fb      	strb	r3, [r7, #31]
 800507c:	e018      	b.n	80050b0 <UART_SetConfig+0xe8>
 800507e:	2308      	movs	r3, #8
 8005080:	77fb      	strb	r3, [r7, #31]
 8005082:	e015      	b.n	80050b0 <UART_SetConfig+0xe8>
 8005084:	2310      	movs	r3, #16
 8005086:	77fb      	strb	r3, [r7, #31]
 8005088:	bf00      	nop
 800508a:	e011      	b.n	80050b0 <UART_SetConfig+0xe8>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a7e      	ldr	r2, [pc, #504]	; (800528c <UART_SetConfig+0x2c4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d102      	bne.n	800509c <UART_SetConfig+0xd4>
 8005096:	2300      	movs	r3, #0
 8005098:	77fb      	strb	r3, [r7, #31]
 800509a:	e009      	b.n	80050b0 <UART_SetConfig+0xe8>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a7b      	ldr	r2, [pc, #492]	; (8005290 <UART_SetConfig+0x2c8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d102      	bne.n	80050ac <UART_SetConfig+0xe4>
 80050a6:	2300      	movs	r3, #0
 80050a8:	77fb      	strb	r3, [r7, #31]
 80050aa:	e001      	b.n	80050b0 <UART_SetConfig+0xe8>
 80050ac:	2310      	movs	r3, #16
 80050ae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050b8:	f040 8082 	bne.w	80051c0 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80050bc:	7ffb      	ldrb	r3, [r7, #31]
 80050be:	2b08      	cmp	r3, #8
 80050c0:	d85e      	bhi.n	8005180 <UART_SetConfig+0x1b8>
 80050c2:	a201      	add	r2, pc, #4	; (adr r2, 80050c8 <UART_SetConfig+0x100>)
 80050c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c8:	080050ed 	.word	0x080050ed
 80050cc:	0800510d 	.word	0x0800510d
 80050d0:	0800512d 	.word	0x0800512d
 80050d4:	08005181 	.word	0x08005181
 80050d8:	08005149 	.word	0x08005149
 80050dc:	08005181 	.word	0x08005181
 80050e0:	08005181 	.word	0x08005181
 80050e4:	08005181 	.word	0x08005181
 80050e8:	08005169 	.word	0x08005169
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050ec:	f7fe fcbe 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 80050f0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	005a      	lsls	r2, r3, #1
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	085b      	lsrs	r3, r3, #1
 80050fc:	441a      	add	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	fbb2 f3f3 	udiv	r3, r2, r3
 8005106:	b29b      	uxth	r3, r3
 8005108:	61bb      	str	r3, [r7, #24]
        break;
 800510a:	e03c      	b.n	8005186 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800510c:	f7fe fcd0 	bl	8003ab0 <HAL_RCC_GetPCLK2Freq>
 8005110:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	005a      	lsls	r2, r3, #1
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	085b      	lsrs	r3, r3, #1
 800511c:	441a      	add	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	fbb2 f3f3 	udiv	r3, r2, r3
 8005126:	b29b      	uxth	r3, r3
 8005128:	61bb      	str	r3, [r7, #24]
        break;
 800512a:	e02c      	b.n	8005186 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	085b      	lsrs	r3, r3, #1
 8005132:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005136:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6852      	ldr	r2, [r2, #4]
 800513e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005142:	b29b      	uxth	r3, r3
 8005144:	61bb      	str	r3, [r7, #24]
        break;
 8005146:	e01e      	b.n	8005186 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005148:	f7fe fc1a 	bl	8003980 <HAL_RCC_GetSysClockFreq>
 800514c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	005a      	lsls	r2, r3, #1
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	085b      	lsrs	r3, r3, #1
 8005158:	441a      	add	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005162:	b29b      	uxth	r3, r3
 8005164:	61bb      	str	r3, [r7, #24]
        break;
 8005166:	e00e      	b.n	8005186 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	085b      	lsrs	r3, r3, #1
 800516e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	fbb2 f3f3 	udiv	r3, r2, r3
 800517a:	b29b      	uxth	r3, r3
 800517c:	61bb      	str	r3, [r7, #24]
        break;
 800517e:	e002      	b.n	8005186 <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	75fb      	strb	r3, [r7, #23]
        break;
 8005184:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	2b0f      	cmp	r3, #15
 800518a:	d916      	bls.n	80051ba <UART_SetConfig+0x1f2>
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005192:	d212      	bcs.n	80051ba <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	b29b      	uxth	r3, r3
 8005198:	f023 030f 	bic.w	r3, r3, #15
 800519c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	085b      	lsrs	r3, r3, #1
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	897b      	ldrh	r3, [r7, #10]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	897a      	ldrh	r2, [r7, #10]
 80051b6:	60da      	str	r2, [r3, #12]
 80051b8:	e07d      	b.n	80052b6 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	75fb      	strb	r3, [r7, #23]
 80051be:	e07a      	b.n	80052b6 <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 80051c0:	7ffb      	ldrb	r3, [r7, #31]
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	d866      	bhi.n	8005294 <UART_SetConfig+0x2cc>
 80051c6:	a201      	add	r2, pc, #4	; (adr r2, 80051cc <UART_SetConfig+0x204>)
 80051c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051cc:	080051f1 	.word	0x080051f1
 80051d0:	0800520f 	.word	0x0800520f
 80051d4:	0800522d 	.word	0x0800522d
 80051d8:	08005295 	.word	0x08005295
 80051dc:	08005249 	.word	0x08005249
 80051e0:	08005295 	.word	0x08005295
 80051e4:	08005295 	.word	0x08005295
 80051e8:	08005295 	.word	0x08005295
 80051ec:	08005267 	.word	0x08005267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f0:	f7fe fc3c 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 80051f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	085a      	lsrs	r2, r3, #1
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	441a      	add	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	fbb2 f3f3 	udiv	r3, r2, r3
 8005208:	b29b      	uxth	r3, r3
 800520a:	61bb      	str	r3, [r7, #24]
        break;
 800520c:	e045      	b.n	800529a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800520e:	f7fe fc4f 	bl	8003ab0 <HAL_RCC_GetPCLK2Freq>
 8005212:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	085a      	lsrs	r2, r3, #1
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	441a      	add	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	fbb2 f3f3 	udiv	r3, r2, r3
 8005226:	b29b      	uxth	r3, r3
 8005228:	61bb      	str	r3, [r7, #24]
        break;
 800522a:	e036      	b.n	800529a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	085b      	lsrs	r3, r3, #1
 8005232:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8005236:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6852      	ldr	r2, [r2, #4]
 800523e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005242:	b29b      	uxth	r3, r3
 8005244:	61bb      	str	r3, [r7, #24]
        break;
 8005246:	e028      	b.n	800529a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005248:	f7fe fb9a 	bl	8003980 <HAL_RCC_GetSysClockFreq>
 800524c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	085a      	lsrs	r2, r3, #1
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	441a      	add	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005260:	b29b      	uxth	r3, r3
 8005262:	61bb      	str	r3, [r7, #24]
        break;
 8005264:	e019      	b.n	800529a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	085b      	lsrs	r3, r3, #1
 800526c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	fbb2 f3f3 	udiv	r3, r2, r3
 8005278:	b29b      	uxth	r3, r3
 800527a:	61bb      	str	r3, [r7, #24]
        break;
 800527c:	e00d      	b.n	800529a <UART_SetConfig+0x2d2>
 800527e:	bf00      	nop
 8005280:	efff69f3 	.word	0xefff69f3
 8005284:	40013800 	.word	0x40013800
 8005288:	40021000 	.word	0x40021000
 800528c:	40004400 	.word	0x40004400
 8005290:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	75fb      	strb	r3, [r7, #23]
        break;
 8005298:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	2b0f      	cmp	r3, #15
 800529e:	d908      	bls.n	80052b2 <UART_SetConfig+0x2ea>
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052a6:	d204      	bcs.n	80052b2 <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	60da      	str	r2, [r3, #12]
 80052b0:	e001      	b.n	80052b6 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80052c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3720      	adds	r7, #32
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00a      	beq.n	80052f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00a      	beq.n	800533a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	f003 0308 	and.w	r3, r3, #8
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00a      	beq.n	800535c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	f003 0310 	and.w	r3, r3, #16
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00a      	beq.n	800537e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	f003 0320 	and.w	r3, r3, #32
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d01a      	beq.n	80053e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053ca:	d10a      	bne.n	80053e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	605a      	str	r2, [r3, #4]
  }
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af02      	add	r7, sp, #8
 8005416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800541e:	f7fc fb25 	bl	8001a6c <HAL_GetTick>
 8005422:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0308 	and.w	r3, r3, #8
 800542e:	2b08      	cmp	r3, #8
 8005430:	d10e      	bne.n	8005450 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005432:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005436:	9300      	str	r3, [sp, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f82a 	bl	800549a <UART_WaitOnFlagUntilTimeout>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e020      	b.n	8005492 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b04      	cmp	r3, #4
 800545c:	d10e      	bne.n	800547c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800545e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f814 	bl	800549a <UART_WaitOnFlagUntilTimeout>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e00a      	b.n	8005492 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2220      	movs	r2, #32
 8005480:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2220      	movs	r2, #32
 8005486:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b084      	sub	sp, #16
 800549e:	af00      	add	r7, sp, #0
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	603b      	str	r3, [r7, #0]
 80054a6:	4613      	mov	r3, r2
 80054a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054aa:	e05d      	b.n	8005568 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054b2:	d059      	beq.n	8005568 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b4:	f7fc fada 	bl	8001a6c <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d302      	bcc.n	80054ca <UART_WaitOnFlagUntilTimeout+0x30>
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d11b      	bne.n	8005502 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054d8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0201 	bic.w	r2, r2, #1
 80054e8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2220      	movs	r2, #32
 80054ee:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2220      	movs	r2, #32
 80054f4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e042      	b.n	8005588 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0304 	and.w	r3, r3, #4
 800550c:	2b00      	cmp	r3, #0
 800550e:	d02b      	beq.n	8005568 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800551a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800551e:	d123      	bne.n	8005568 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005528:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005538:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 0201 	bic.w	r2, r2, #1
 8005548:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2220      	movs	r2, #32
 800554e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2220      	movs	r2, #32
 8005554:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2220      	movs	r2, #32
 800555a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e00f      	b.n	8005588 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	69da      	ldr	r2, [r3, #28]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	4013      	ands	r3, r2
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	429a      	cmp	r2, r3
 8005576:	bf0c      	ite	eq
 8005578:	2301      	moveq	r3, #1
 800557a:	2300      	movne	r3, #0
 800557c:	b2db      	uxtb	r3, r3
 800557e:	461a      	mov	r2, r3
 8005580:	79fb      	ldrb	r3, [r7, #7]
 8005582:	429a      	cmp	r2, r3
 8005584:	d092      	beq.n	80054ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <__errno>:
 8005590:	4b01      	ldr	r3, [pc, #4]	; (8005598 <__errno+0x8>)
 8005592:	6818      	ldr	r0, [r3, #0]
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	2000000c 	.word	0x2000000c

0800559c <__libc_init_array>:
 800559c:	b570      	push	{r4, r5, r6, lr}
 800559e:	4e0d      	ldr	r6, [pc, #52]	; (80055d4 <__libc_init_array+0x38>)
 80055a0:	4c0d      	ldr	r4, [pc, #52]	; (80055d8 <__libc_init_array+0x3c>)
 80055a2:	1ba4      	subs	r4, r4, r6
 80055a4:	10a4      	asrs	r4, r4, #2
 80055a6:	2500      	movs	r5, #0
 80055a8:	42a5      	cmp	r5, r4
 80055aa:	d109      	bne.n	80055c0 <__libc_init_array+0x24>
 80055ac:	4e0b      	ldr	r6, [pc, #44]	; (80055dc <__libc_init_array+0x40>)
 80055ae:	4c0c      	ldr	r4, [pc, #48]	; (80055e0 <__libc_init_array+0x44>)
 80055b0:	f004 fa60 	bl	8009a74 <_init>
 80055b4:	1ba4      	subs	r4, r4, r6
 80055b6:	10a4      	asrs	r4, r4, #2
 80055b8:	2500      	movs	r5, #0
 80055ba:	42a5      	cmp	r5, r4
 80055bc:	d105      	bne.n	80055ca <__libc_init_array+0x2e>
 80055be:	bd70      	pop	{r4, r5, r6, pc}
 80055c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055c4:	4798      	blx	r3
 80055c6:	3501      	adds	r5, #1
 80055c8:	e7ee      	b.n	80055a8 <__libc_init_array+0xc>
 80055ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055ce:	4798      	blx	r3
 80055d0:	3501      	adds	r5, #1
 80055d2:	e7f2      	b.n	80055ba <__libc_init_array+0x1e>
 80055d4:	08009e18 	.word	0x08009e18
 80055d8:	08009e18 	.word	0x08009e18
 80055dc:	08009e18 	.word	0x08009e18
 80055e0:	08009e1c 	.word	0x08009e1c

080055e4 <memcpy>:
 80055e4:	b510      	push	{r4, lr}
 80055e6:	1e43      	subs	r3, r0, #1
 80055e8:	440a      	add	r2, r1
 80055ea:	4291      	cmp	r1, r2
 80055ec:	d100      	bne.n	80055f0 <memcpy+0xc>
 80055ee:	bd10      	pop	{r4, pc}
 80055f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055f8:	e7f7      	b.n	80055ea <memcpy+0x6>

080055fa <memset>:
 80055fa:	4402      	add	r2, r0
 80055fc:	4603      	mov	r3, r0
 80055fe:	4293      	cmp	r3, r2
 8005600:	d100      	bne.n	8005604 <memset+0xa>
 8005602:	4770      	bx	lr
 8005604:	f803 1b01 	strb.w	r1, [r3], #1
 8005608:	e7f9      	b.n	80055fe <memset+0x4>

0800560a <__cvt>:
 800560a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800560e:	ec55 4b10 	vmov	r4, r5, d0
 8005612:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005614:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005618:	2d00      	cmp	r5, #0
 800561a:	460e      	mov	r6, r1
 800561c:	4691      	mov	r9, r2
 800561e:	4619      	mov	r1, r3
 8005620:	bfb8      	it	lt
 8005622:	4622      	movlt	r2, r4
 8005624:	462b      	mov	r3, r5
 8005626:	f027 0720 	bic.w	r7, r7, #32
 800562a:	bfbb      	ittet	lt
 800562c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005630:	461d      	movlt	r5, r3
 8005632:	2300      	movge	r3, #0
 8005634:	232d      	movlt	r3, #45	; 0x2d
 8005636:	bfb8      	it	lt
 8005638:	4614      	movlt	r4, r2
 800563a:	2f46      	cmp	r7, #70	; 0x46
 800563c:	700b      	strb	r3, [r1, #0]
 800563e:	d004      	beq.n	800564a <__cvt+0x40>
 8005640:	2f45      	cmp	r7, #69	; 0x45
 8005642:	d100      	bne.n	8005646 <__cvt+0x3c>
 8005644:	3601      	adds	r6, #1
 8005646:	2102      	movs	r1, #2
 8005648:	e000      	b.n	800564c <__cvt+0x42>
 800564a:	2103      	movs	r1, #3
 800564c:	ab03      	add	r3, sp, #12
 800564e:	9301      	str	r3, [sp, #4]
 8005650:	ab02      	add	r3, sp, #8
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	4632      	mov	r2, r6
 8005656:	4653      	mov	r3, sl
 8005658:	ec45 4b10 	vmov	d0, r4, r5
 800565c:	f001 feb4 	bl	80073c8 <_dtoa_r>
 8005660:	2f47      	cmp	r7, #71	; 0x47
 8005662:	4680      	mov	r8, r0
 8005664:	d102      	bne.n	800566c <__cvt+0x62>
 8005666:	f019 0f01 	tst.w	r9, #1
 800566a:	d026      	beq.n	80056ba <__cvt+0xb0>
 800566c:	2f46      	cmp	r7, #70	; 0x46
 800566e:	eb08 0906 	add.w	r9, r8, r6
 8005672:	d111      	bne.n	8005698 <__cvt+0x8e>
 8005674:	f898 3000 	ldrb.w	r3, [r8]
 8005678:	2b30      	cmp	r3, #48	; 0x30
 800567a:	d10a      	bne.n	8005692 <__cvt+0x88>
 800567c:	2200      	movs	r2, #0
 800567e:	2300      	movs	r3, #0
 8005680:	4620      	mov	r0, r4
 8005682:	4629      	mov	r1, r5
 8005684:	f7fb fa20 	bl	8000ac8 <__aeabi_dcmpeq>
 8005688:	b918      	cbnz	r0, 8005692 <__cvt+0x88>
 800568a:	f1c6 0601 	rsb	r6, r6, #1
 800568e:	f8ca 6000 	str.w	r6, [sl]
 8005692:	f8da 3000 	ldr.w	r3, [sl]
 8005696:	4499      	add	r9, r3
 8005698:	2200      	movs	r2, #0
 800569a:	2300      	movs	r3, #0
 800569c:	4620      	mov	r0, r4
 800569e:	4629      	mov	r1, r5
 80056a0:	f7fb fa12 	bl	8000ac8 <__aeabi_dcmpeq>
 80056a4:	b938      	cbnz	r0, 80056b6 <__cvt+0xac>
 80056a6:	2230      	movs	r2, #48	; 0x30
 80056a8:	9b03      	ldr	r3, [sp, #12]
 80056aa:	454b      	cmp	r3, r9
 80056ac:	d205      	bcs.n	80056ba <__cvt+0xb0>
 80056ae:	1c59      	adds	r1, r3, #1
 80056b0:	9103      	str	r1, [sp, #12]
 80056b2:	701a      	strb	r2, [r3, #0]
 80056b4:	e7f8      	b.n	80056a8 <__cvt+0x9e>
 80056b6:	f8cd 900c 	str.w	r9, [sp, #12]
 80056ba:	9b03      	ldr	r3, [sp, #12]
 80056bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056be:	eba3 0308 	sub.w	r3, r3, r8
 80056c2:	4640      	mov	r0, r8
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	b004      	add	sp, #16
 80056c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080056cc <__exponent>:
 80056cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056ce:	2900      	cmp	r1, #0
 80056d0:	4604      	mov	r4, r0
 80056d2:	bfba      	itte	lt
 80056d4:	4249      	neglt	r1, r1
 80056d6:	232d      	movlt	r3, #45	; 0x2d
 80056d8:	232b      	movge	r3, #43	; 0x2b
 80056da:	2909      	cmp	r1, #9
 80056dc:	f804 2b02 	strb.w	r2, [r4], #2
 80056e0:	7043      	strb	r3, [r0, #1]
 80056e2:	dd20      	ble.n	8005726 <__exponent+0x5a>
 80056e4:	f10d 0307 	add.w	r3, sp, #7
 80056e8:	461f      	mov	r7, r3
 80056ea:	260a      	movs	r6, #10
 80056ec:	fb91 f5f6 	sdiv	r5, r1, r6
 80056f0:	fb06 1115 	mls	r1, r6, r5, r1
 80056f4:	3130      	adds	r1, #48	; 0x30
 80056f6:	2d09      	cmp	r5, #9
 80056f8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80056fc:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8005700:	4629      	mov	r1, r5
 8005702:	dc09      	bgt.n	8005718 <__exponent+0x4c>
 8005704:	3130      	adds	r1, #48	; 0x30
 8005706:	3b02      	subs	r3, #2
 8005708:	f802 1c01 	strb.w	r1, [r2, #-1]
 800570c:	42bb      	cmp	r3, r7
 800570e:	4622      	mov	r2, r4
 8005710:	d304      	bcc.n	800571c <__exponent+0x50>
 8005712:	1a10      	subs	r0, r2, r0
 8005714:	b003      	add	sp, #12
 8005716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005718:	4613      	mov	r3, r2
 800571a:	e7e7      	b.n	80056ec <__exponent+0x20>
 800571c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005720:	f804 2b01 	strb.w	r2, [r4], #1
 8005724:	e7f2      	b.n	800570c <__exponent+0x40>
 8005726:	2330      	movs	r3, #48	; 0x30
 8005728:	4419      	add	r1, r3
 800572a:	7083      	strb	r3, [r0, #2]
 800572c:	1d02      	adds	r2, r0, #4
 800572e:	70c1      	strb	r1, [r0, #3]
 8005730:	e7ef      	b.n	8005712 <__exponent+0x46>
	...

08005734 <_printf_float>:
 8005734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005738:	b08d      	sub	sp, #52	; 0x34
 800573a:	460c      	mov	r4, r1
 800573c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005740:	4616      	mov	r6, r2
 8005742:	461f      	mov	r7, r3
 8005744:	4605      	mov	r5, r0
 8005746:	f003 f89d 	bl	8008884 <_localeconv_r>
 800574a:	6803      	ldr	r3, [r0, #0]
 800574c:	9304      	str	r3, [sp, #16]
 800574e:	4618      	mov	r0, r3
 8005750:	f7fa fd3e 	bl	80001d0 <strlen>
 8005754:	2300      	movs	r3, #0
 8005756:	930a      	str	r3, [sp, #40]	; 0x28
 8005758:	f8d8 3000 	ldr.w	r3, [r8]
 800575c:	9005      	str	r0, [sp, #20]
 800575e:	3307      	adds	r3, #7
 8005760:	f023 0307 	bic.w	r3, r3, #7
 8005764:	f103 0208 	add.w	r2, r3, #8
 8005768:	f894 a018 	ldrb.w	sl, [r4, #24]
 800576c:	f8d4 b000 	ldr.w	fp, [r4]
 8005770:	f8c8 2000 	str.w	r2, [r8]
 8005774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005778:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800577c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005780:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005784:	9307      	str	r3, [sp, #28]
 8005786:	f8cd 8018 	str.w	r8, [sp, #24]
 800578a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800578e:	4ba7      	ldr	r3, [pc, #668]	; (8005a2c <_printf_float+0x2f8>)
 8005790:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005794:	f7fb f9ca 	bl	8000b2c <__aeabi_dcmpun>
 8005798:	bb70      	cbnz	r0, 80057f8 <_printf_float+0xc4>
 800579a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800579e:	4ba3      	ldr	r3, [pc, #652]	; (8005a2c <_printf_float+0x2f8>)
 80057a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057a4:	f7fb f9a4 	bl	8000af0 <__aeabi_dcmple>
 80057a8:	bb30      	cbnz	r0, 80057f8 <_printf_float+0xc4>
 80057aa:	2200      	movs	r2, #0
 80057ac:	2300      	movs	r3, #0
 80057ae:	4640      	mov	r0, r8
 80057b0:	4649      	mov	r1, r9
 80057b2:	f7fb f993 	bl	8000adc <__aeabi_dcmplt>
 80057b6:	b110      	cbz	r0, 80057be <_printf_float+0x8a>
 80057b8:	232d      	movs	r3, #45	; 0x2d
 80057ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057be:	4a9c      	ldr	r2, [pc, #624]	; (8005a30 <_printf_float+0x2fc>)
 80057c0:	4b9c      	ldr	r3, [pc, #624]	; (8005a34 <_printf_float+0x300>)
 80057c2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80057c6:	bf8c      	ite	hi
 80057c8:	4690      	movhi	r8, r2
 80057ca:	4698      	movls	r8, r3
 80057cc:	2303      	movs	r3, #3
 80057ce:	f02b 0204 	bic.w	r2, fp, #4
 80057d2:	6123      	str	r3, [r4, #16]
 80057d4:	6022      	str	r2, [r4, #0]
 80057d6:	f04f 0900 	mov.w	r9, #0
 80057da:	9700      	str	r7, [sp, #0]
 80057dc:	4633      	mov	r3, r6
 80057de:	aa0b      	add	r2, sp, #44	; 0x2c
 80057e0:	4621      	mov	r1, r4
 80057e2:	4628      	mov	r0, r5
 80057e4:	f000 f9e6 	bl	8005bb4 <_printf_common>
 80057e8:	3001      	adds	r0, #1
 80057ea:	f040 808d 	bne.w	8005908 <_printf_float+0x1d4>
 80057ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057f2:	b00d      	add	sp, #52	; 0x34
 80057f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057f8:	4642      	mov	r2, r8
 80057fa:	464b      	mov	r3, r9
 80057fc:	4640      	mov	r0, r8
 80057fe:	4649      	mov	r1, r9
 8005800:	f7fb f994 	bl	8000b2c <__aeabi_dcmpun>
 8005804:	b110      	cbz	r0, 800580c <_printf_float+0xd8>
 8005806:	4a8c      	ldr	r2, [pc, #560]	; (8005a38 <_printf_float+0x304>)
 8005808:	4b8c      	ldr	r3, [pc, #560]	; (8005a3c <_printf_float+0x308>)
 800580a:	e7da      	b.n	80057c2 <_printf_float+0x8e>
 800580c:	6861      	ldr	r1, [r4, #4]
 800580e:	1c4b      	adds	r3, r1, #1
 8005810:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005814:	a80a      	add	r0, sp, #40	; 0x28
 8005816:	d13e      	bne.n	8005896 <_printf_float+0x162>
 8005818:	2306      	movs	r3, #6
 800581a:	6063      	str	r3, [r4, #4]
 800581c:	2300      	movs	r3, #0
 800581e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005822:	ab09      	add	r3, sp, #36	; 0x24
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	ec49 8b10 	vmov	d0, r8, r9
 800582a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800582e:	6022      	str	r2, [r4, #0]
 8005830:	f8cd a004 	str.w	sl, [sp, #4]
 8005834:	6861      	ldr	r1, [r4, #4]
 8005836:	4628      	mov	r0, r5
 8005838:	f7ff fee7 	bl	800560a <__cvt>
 800583c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005840:	2b47      	cmp	r3, #71	; 0x47
 8005842:	4680      	mov	r8, r0
 8005844:	d109      	bne.n	800585a <_printf_float+0x126>
 8005846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005848:	1cd8      	adds	r0, r3, #3
 800584a:	db02      	blt.n	8005852 <_printf_float+0x11e>
 800584c:	6862      	ldr	r2, [r4, #4]
 800584e:	4293      	cmp	r3, r2
 8005850:	dd47      	ble.n	80058e2 <_printf_float+0x1ae>
 8005852:	f1aa 0a02 	sub.w	sl, sl, #2
 8005856:	fa5f fa8a 	uxtb.w	sl, sl
 800585a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800585e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005860:	d824      	bhi.n	80058ac <_printf_float+0x178>
 8005862:	3901      	subs	r1, #1
 8005864:	4652      	mov	r2, sl
 8005866:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800586a:	9109      	str	r1, [sp, #36]	; 0x24
 800586c:	f7ff ff2e 	bl	80056cc <__exponent>
 8005870:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005872:	1813      	adds	r3, r2, r0
 8005874:	2a01      	cmp	r2, #1
 8005876:	4681      	mov	r9, r0
 8005878:	6123      	str	r3, [r4, #16]
 800587a:	dc02      	bgt.n	8005882 <_printf_float+0x14e>
 800587c:	6822      	ldr	r2, [r4, #0]
 800587e:	07d1      	lsls	r1, r2, #31
 8005880:	d501      	bpl.n	8005886 <_printf_float+0x152>
 8005882:	3301      	adds	r3, #1
 8005884:	6123      	str	r3, [r4, #16]
 8005886:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0a5      	beq.n	80057da <_printf_float+0xa6>
 800588e:	232d      	movs	r3, #45	; 0x2d
 8005890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005894:	e7a1      	b.n	80057da <_printf_float+0xa6>
 8005896:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800589a:	f000 8177 	beq.w	8005b8c <_printf_float+0x458>
 800589e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80058a2:	d1bb      	bne.n	800581c <_printf_float+0xe8>
 80058a4:	2900      	cmp	r1, #0
 80058a6:	d1b9      	bne.n	800581c <_printf_float+0xe8>
 80058a8:	2301      	movs	r3, #1
 80058aa:	e7b6      	b.n	800581a <_printf_float+0xe6>
 80058ac:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80058b0:	d119      	bne.n	80058e6 <_printf_float+0x1b2>
 80058b2:	2900      	cmp	r1, #0
 80058b4:	6863      	ldr	r3, [r4, #4]
 80058b6:	dd0c      	ble.n	80058d2 <_printf_float+0x19e>
 80058b8:	6121      	str	r1, [r4, #16]
 80058ba:	b913      	cbnz	r3, 80058c2 <_printf_float+0x18e>
 80058bc:	6822      	ldr	r2, [r4, #0]
 80058be:	07d2      	lsls	r2, r2, #31
 80058c0:	d502      	bpl.n	80058c8 <_printf_float+0x194>
 80058c2:	3301      	adds	r3, #1
 80058c4:	440b      	add	r3, r1
 80058c6:	6123      	str	r3, [r4, #16]
 80058c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ca:	65a3      	str	r3, [r4, #88]	; 0x58
 80058cc:	f04f 0900 	mov.w	r9, #0
 80058d0:	e7d9      	b.n	8005886 <_printf_float+0x152>
 80058d2:	b913      	cbnz	r3, 80058da <_printf_float+0x1a6>
 80058d4:	6822      	ldr	r2, [r4, #0]
 80058d6:	07d0      	lsls	r0, r2, #31
 80058d8:	d501      	bpl.n	80058de <_printf_float+0x1aa>
 80058da:	3302      	adds	r3, #2
 80058dc:	e7f3      	b.n	80058c6 <_printf_float+0x192>
 80058de:	2301      	movs	r3, #1
 80058e0:	e7f1      	b.n	80058c6 <_printf_float+0x192>
 80058e2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80058e6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80058ea:	4293      	cmp	r3, r2
 80058ec:	db05      	blt.n	80058fa <_printf_float+0x1c6>
 80058ee:	6822      	ldr	r2, [r4, #0]
 80058f0:	6123      	str	r3, [r4, #16]
 80058f2:	07d1      	lsls	r1, r2, #31
 80058f4:	d5e8      	bpl.n	80058c8 <_printf_float+0x194>
 80058f6:	3301      	adds	r3, #1
 80058f8:	e7e5      	b.n	80058c6 <_printf_float+0x192>
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	bfd4      	ite	le
 80058fe:	f1c3 0302 	rsble	r3, r3, #2
 8005902:	2301      	movgt	r3, #1
 8005904:	4413      	add	r3, r2
 8005906:	e7de      	b.n	80058c6 <_printf_float+0x192>
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	055a      	lsls	r2, r3, #21
 800590c:	d407      	bmi.n	800591e <_printf_float+0x1ea>
 800590e:	6923      	ldr	r3, [r4, #16]
 8005910:	4642      	mov	r2, r8
 8005912:	4631      	mov	r1, r6
 8005914:	4628      	mov	r0, r5
 8005916:	47b8      	blx	r7
 8005918:	3001      	adds	r0, #1
 800591a:	d12b      	bne.n	8005974 <_printf_float+0x240>
 800591c:	e767      	b.n	80057ee <_printf_float+0xba>
 800591e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005922:	f240 80dc 	bls.w	8005ade <_printf_float+0x3aa>
 8005926:	2200      	movs	r2, #0
 8005928:	2300      	movs	r3, #0
 800592a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800592e:	f7fb f8cb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005932:	2800      	cmp	r0, #0
 8005934:	d033      	beq.n	800599e <_printf_float+0x26a>
 8005936:	2301      	movs	r3, #1
 8005938:	4a41      	ldr	r2, [pc, #260]	; (8005a40 <_printf_float+0x30c>)
 800593a:	4631      	mov	r1, r6
 800593c:	4628      	mov	r0, r5
 800593e:	47b8      	blx	r7
 8005940:	3001      	adds	r0, #1
 8005942:	f43f af54 	beq.w	80057ee <_printf_float+0xba>
 8005946:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800594a:	429a      	cmp	r2, r3
 800594c:	db02      	blt.n	8005954 <_printf_float+0x220>
 800594e:	6823      	ldr	r3, [r4, #0]
 8005950:	07d8      	lsls	r0, r3, #31
 8005952:	d50f      	bpl.n	8005974 <_printf_float+0x240>
 8005954:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005958:	4631      	mov	r1, r6
 800595a:	4628      	mov	r0, r5
 800595c:	47b8      	blx	r7
 800595e:	3001      	adds	r0, #1
 8005960:	f43f af45 	beq.w	80057ee <_printf_float+0xba>
 8005964:	f04f 0800 	mov.w	r8, #0
 8005968:	f104 091a 	add.w	r9, r4, #26
 800596c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800596e:	3b01      	subs	r3, #1
 8005970:	4543      	cmp	r3, r8
 8005972:	dc09      	bgt.n	8005988 <_printf_float+0x254>
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	079b      	lsls	r3, r3, #30
 8005978:	f100 8103 	bmi.w	8005b82 <_printf_float+0x44e>
 800597c:	68e0      	ldr	r0, [r4, #12]
 800597e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005980:	4298      	cmp	r0, r3
 8005982:	bfb8      	it	lt
 8005984:	4618      	movlt	r0, r3
 8005986:	e734      	b.n	80057f2 <_printf_float+0xbe>
 8005988:	2301      	movs	r3, #1
 800598a:	464a      	mov	r2, r9
 800598c:	4631      	mov	r1, r6
 800598e:	4628      	mov	r0, r5
 8005990:	47b8      	blx	r7
 8005992:	3001      	adds	r0, #1
 8005994:	f43f af2b 	beq.w	80057ee <_printf_float+0xba>
 8005998:	f108 0801 	add.w	r8, r8, #1
 800599c:	e7e6      	b.n	800596c <_printf_float+0x238>
 800599e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	dc2b      	bgt.n	80059fc <_printf_float+0x2c8>
 80059a4:	2301      	movs	r3, #1
 80059a6:	4a26      	ldr	r2, [pc, #152]	; (8005a40 <_printf_float+0x30c>)
 80059a8:	4631      	mov	r1, r6
 80059aa:	4628      	mov	r0, r5
 80059ac:	47b8      	blx	r7
 80059ae:	3001      	adds	r0, #1
 80059b0:	f43f af1d 	beq.w	80057ee <_printf_float+0xba>
 80059b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059b6:	b923      	cbnz	r3, 80059c2 <_printf_float+0x28e>
 80059b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059ba:	b913      	cbnz	r3, 80059c2 <_printf_float+0x28e>
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	07d9      	lsls	r1, r3, #31
 80059c0:	d5d8      	bpl.n	8005974 <_printf_float+0x240>
 80059c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059c6:	4631      	mov	r1, r6
 80059c8:	4628      	mov	r0, r5
 80059ca:	47b8      	blx	r7
 80059cc:	3001      	adds	r0, #1
 80059ce:	f43f af0e 	beq.w	80057ee <_printf_float+0xba>
 80059d2:	f04f 0900 	mov.w	r9, #0
 80059d6:	f104 0a1a 	add.w	sl, r4, #26
 80059da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059dc:	425b      	negs	r3, r3
 80059de:	454b      	cmp	r3, r9
 80059e0:	dc01      	bgt.n	80059e6 <_printf_float+0x2b2>
 80059e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059e4:	e794      	b.n	8005910 <_printf_float+0x1dc>
 80059e6:	2301      	movs	r3, #1
 80059e8:	4652      	mov	r2, sl
 80059ea:	4631      	mov	r1, r6
 80059ec:	4628      	mov	r0, r5
 80059ee:	47b8      	blx	r7
 80059f0:	3001      	adds	r0, #1
 80059f2:	f43f aefc 	beq.w	80057ee <_printf_float+0xba>
 80059f6:	f109 0901 	add.w	r9, r9, #1
 80059fa:	e7ee      	b.n	80059da <_printf_float+0x2a6>
 80059fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a00:	429a      	cmp	r2, r3
 8005a02:	bfa8      	it	ge
 8005a04:	461a      	movge	r2, r3
 8005a06:	2a00      	cmp	r2, #0
 8005a08:	4691      	mov	r9, r2
 8005a0a:	dd07      	ble.n	8005a1c <_printf_float+0x2e8>
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	4631      	mov	r1, r6
 8005a10:	4642      	mov	r2, r8
 8005a12:	4628      	mov	r0, r5
 8005a14:	47b8      	blx	r7
 8005a16:	3001      	adds	r0, #1
 8005a18:	f43f aee9 	beq.w	80057ee <_printf_float+0xba>
 8005a1c:	f104 031a 	add.w	r3, r4, #26
 8005a20:	f04f 0b00 	mov.w	fp, #0
 8005a24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a28:	9306      	str	r3, [sp, #24]
 8005a2a:	e015      	b.n	8005a58 <_printf_float+0x324>
 8005a2c:	7fefffff 	.word	0x7fefffff
 8005a30:	08009b00 	.word	0x08009b00
 8005a34:	08009afc 	.word	0x08009afc
 8005a38:	08009b08 	.word	0x08009b08
 8005a3c:	08009b04 	.word	0x08009b04
 8005a40:	08009b0c 	.word	0x08009b0c
 8005a44:	2301      	movs	r3, #1
 8005a46:	9a06      	ldr	r2, [sp, #24]
 8005a48:	4631      	mov	r1, r6
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	47b8      	blx	r7
 8005a4e:	3001      	adds	r0, #1
 8005a50:	f43f aecd 	beq.w	80057ee <_printf_float+0xba>
 8005a54:	f10b 0b01 	add.w	fp, fp, #1
 8005a58:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005a5c:	ebaa 0309 	sub.w	r3, sl, r9
 8005a60:	455b      	cmp	r3, fp
 8005a62:	dcef      	bgt.n	8005a44 <_printf_float+0x310>
 8005a64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	44d0      	add	r8, sl
 8005a6c:	db15      	blt.n	8005a9a <_printf_float+0x366>
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	07da      	lsls	r2, r3, #31
 8005a72:	d412      	bmi.n	8005a9a <_printf_float+0x366>
 8005a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a78:	eba3 020a 	sub.w	r2, r3, sl
 8005a7c:	eba3 0a01 	sub.w	sl, r3, r1
 8005a80:	4592      	cmp	sl, r2
 8005a82:	bfa8      	it	ge
 8005a84:	4692      	movge	sl, r2
 8005a86:	f1ba 0f00 	cmp.w	sl, #0
 8005a8a:	dc0e      	bgt.n	8005aaa <_printf_float+0x376>
 8005a8c:	f04f 0800 	mov.w	r8, #0
 8005a90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a94:	f104 091a 	add.w	r9, r4, #26
 8005a98:	e019      	b.n	8005ace <_printf_float+0x39a>
 8005a9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a9e:	4631      	mov	r1, r6
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	47b8      	blx	r7
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	d1e5      	bne.n	8005a74 <_printf_float+0x340>
 8005aa8:	e6a1      	b.n	80057ee <_printf_float+0xba>
 8005aaa:	4653      	mov	r3, sl
 8005aac:	4642      	mov	r2, r8
 8005aae:	4631      	mov	r1, r6
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	47b8      	blx	r7
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	d1e9      	bne.n	8005a8c <_printf_float+0x358>
 8005ab8:	e699      	b.n	80057ee <_printf_float+0xba>
 8005aba:	2301      	movs	r3, #1
 8005abc:	464a      	mov	r2, r9
 8005abe:	4631      	mov	r1, r6
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	47b8      	blx	r7
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	f43f ae92 	beq.w	80057ee <_printf_float+0xba>
 8005aca:	f108 0801 	add.w	r8, r8, #1
 8005ace:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ad2:	1a9b      	subs	r3, r3, r2
 8005ad4:	eba3 030a 	sub.w	r3, r3, sl
 8005ad8:	4543      	cmp	r3, r8
 8005ada:	dcee      	bgt.n	8005aba <_printf_float+0x386>
 8005adc:	e74a      	b.n	8005974 <_printf_float+0x240>
 8005ade:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ae0:	2a01      	cmp	r2, #1
 8005ae2:	dc01      	bgt.n	8005ae8 <_printf_float+0x3b4>
 8005ae4:	07db      	lsls	r3, r3, #31
 8005ae6:	d53a      	bpl.n	8005b5e <_printf_float+0x42a>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	4642      	mov	r2, r8
 8005aec:	4631      	mov	r1, r6
 8005aee:	4628      	mov	r0, r5
 8005af0:	47b8      	blx	r7
 8005af2:	3001      	adds	r0, #1
 8005af4:	f43f ae7b 	beq.w	80057ee <_printf_float+0xba>
 8005af8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005afc:	4631      	mov	r1, r6
 8005afe:	4628      	mov	r0, r5
 8005b00:	47b8      	blx	r7
 8005b02:	3001      	adds	r0, #1
 8005b04:	f108 0801 	add.w	r8, r8, #1
 8005b08:	f43f ae71 	beq.w	80057ee <_printf_float+0xba>
 8005b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8005b14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b18:	2300      	movs	r3, #0
 8005b1a:	f7fa ffd5 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b1e:	b9c8      	cbnz	r0, 8005b54 <_printf_float+0x420>
 8005b20:	4653      	mov	r3, sl
 8005b22:	4642      	mov	r2, r8
 8005b24:	4631      	mov	r1, r6
 8005b26:	4628      	mov	r0, r5
 8005b28:	47b8      	blx	r7
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	d10e      	bne.n	8005b4c <_printf_float+0x418>
 8005b2e:	e65e      	b.n	80057ee <_printf_float+0xba>
 8005b30:	2301      	movs	r3, #1
 8005b32:	4652      	mov	r2, sl
 8005b34:	4631      	mov	r1, r6
 8005b36:	4628      	mov	r0, r5
 8005b38:	47b8      	blx	r7
 8005b3a:	3001      	adds	r0, #1
 8005b3c:	f43f ae57 	beq.w	80057ee <_printf_float+0xba>
 8005b40:	f108 0801 	add.w	r8, r8, #1
 8005b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b46:	3b01      	subs	r3, #1
 8005b48:	4543      	cmp	r3, r8
 8005b4a:	dcf1      	bgt.n	8005b30 <_printf_float+0x3fc>
 8005b4c:	464b      	mov	r3, r9
 8005b4e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b52:	e6de      	b.n	8005912 <_printf_float+0x1de>
 8005b54:	f04f 0800 	mov.w	r8, #0
 8005b58:	f104 0a1a 	add.w	sl, r4, #26
 8005b5c:	e7f2      	b.n	8005b44 <_printf_float+0x410>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e7df      	b.n	8005b22 <_printf_float+0x3ee>
 8005b62:	2301      	movs	r3, #1
 8005b64:	464a      	mov	r2, r9
 8005b66:	4631      	mov	r1, r6
 8005b68:	4628      	mov	r0, r5
 8005b6a:	47b8      	blx	r7
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	f43f ae3e 	beq.w	80057ee <_printf_float+0xba>
 8005b72:	f108 0801 	add.w	r8, r8, #1
 8005b76:	68e3      	ldr	r3, [r4, #12]
 8005b78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b7a:	1a9b      	subs	r3, r3, r2
 8005b7c:	4543      	cmp	r3, r8
 8005b7e:	dcf0      	bgt.n	8005b62 <_printf_float+0x42e>
 8005b80:	e6fc      	b.n	800597c <_printf_float+0x248>
 8005b82:	f04f 0800 	mov.w	r8, #0
 8005b86:	f104 0919 	add.w	r9, r4, #25
 8005b8a:	e7f4      	b.n	8005b76 <_printf_float+0x442>
 8005b8c:	2900      	cmp	r1, #0
 8005b8e:	f43f ae8b 	beq.w	80058a8 <_printf_float+0x174>
 8005b92:	2300      	movs	r3, #0
 8005b94:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005b98:	ab09      	add	r3, sp, #36	; 0x24
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	ec49 8b10 	vmov	d0, r8, r9
 8005ba0:	6022      	str	r2, [r4, #0]
 8005ba2:	f8cd a004 	str.w	sl, [sp, #4]
 8005ba6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005baa:	4628      	mov	r0, r5
 8005bac:	f7ff fd2d 	bl	800560a <__cvt>
 8005bb0:	4680      	mov	r8, r0
 8005bb2:	e648      	b.n	8005846 <_printf_float+0x112>

08005bb4 <_printf_common>:
 8005bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bb8:	4691      	mov	r9, r2
 8005bba:	461f      	mov	r7, r3
 8005bbc:	688a      	ldr	r2, [r1, #8]
 8005bbe:	690b      	ldr	r3, [r1, #16]
 8005bc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	bfb8      	it	lt
 8005bc8:	4613      	movlt	r3, r2
 8005bca:	f8c9 3000 	str.w	r3, [r9]
 8005bce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bd2:	4606      	mov	r6, r0
 8005bd4:	460c      	mov	r4, r1
 8005bd6:	b112      	cbz	r2, 8005bde <_printf_common+0x2a>
 8005bd8:	3301      	adds	r3, #1
 8005bda:	f8c9 3000 	str.w	r3, [r9]
 8005bde:	6823      	ldr	r3, [r4, #0]
 8005be0:	0699      	lsls	r1, r3, #26
 8005be2:	bf42      	ittt	mi
 8005be4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005be8:	3302      	addmi	r3, #2
 8005bea:	f8c9 3000 	strmi.w	r3, [r9]
 8005bee:	6825      	ldr	r5, [r4, #0]
 8005bf0:	f015 0506 	ands.w	r5, r5, #6
 8005bf4:	d107      	bne.n	8005c06 <_printf_common+0x52>
 8005bf6:	f104 0a19 	add.w	sl, r4, #25
 8005bfa:	68e3      	ldr	r3, [r4, #12]
 8005bfc:	f8d9 2000 	ldr.w	r2, [r9]
 8005c00:	1a9b      	subs	r3, r3, r2
 8005c02:	42ab      	cmp	r3, r5
 8005c04:	dc28      	bgt.n	8005c58 <_printf_common+0xa4>
 8005c06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005c0a:	6822      	ldr	r2, [r4, #0]
 8005c0c:	3300      	adds	r3, #0
 8005c0e:	bf18      	it	ne
 8005c10:	2301      	movne	r3, #1
 8005c12:	0692      	lsls	r2, r2, #26
 8005c14:	d42d      	bmi.n	8005c72 <_printf_common+0xbe>
 8005c16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c1a:	4639      	mov	r1, r7
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	47c0      	blx	r8
 8005c20:	3001      	adds	r0, #1
 8005c22:	d020      	beq.n	8005c66 <_printf_common+0xb2>
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	68e5      	ldr	r5, [r4, #12]
 8005c28:	f8d9 2000 	ldr.w	r2, [r9]
 8005c2c:	f003 0306 	and.w	r3, r3, #6
 8005c30:	2b04      	cmp	r3, #4
 8005c32:	bf08      	it	eq
 8005c34:	1aad      	subeq	r5, r5, r2
 8005c36:	68a3      	ldr	r3, [r4, #8]
 8005c38:	6922      	ldr	r2, [r4, #16]
 8005c3a:	bf0c      	ite	eq
 8005c3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c40:	2500      	movne	r5, #0
 8005c42:	4293      	cmp	r3, r2
 8005c44:	bfc4      	itt	gt
 8005c46:	1a9b      	subgt	r3, r3, r2
 8005c48:	18ed      	addgt	r5, r5, r3
 8005c4a:	f04f 0900 	mov.w	r9, #0
 8005c4e:	341a      	adds	r4, #26
 8005c50:	454d      	cmp	r5, r9
 8005c52:	d11a      	bne.n	8005c8a <_printf_common+0xd6>
 8005c54:	2000      	movs	r0, #0
 8005c56:	e008      	b.n	8005c6a <_printf_common+0xb6>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	4652      	mov	r2, sl
 8005c5c:	4639      	mov	r1, r7
 8005c5e:	4630      	mov	r0, r6
 8005c60:	47c0      	blx	r8
 8005c62:	3001      	adds	r0, #1
 8005c64:	d103      	bne.n	8005c6e <_printf_common+0xba>
 8005c66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c6e:	3501      	adds	r5, #1
 8005c70:	e7c3      	b.n	8005bfa <_printf_common+0x46>
 8005c72:	18e1      	adds	r1, r4, r3
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	2030      	movs	r0, #48	; 0x30
 8005c78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c7c:	4422      	add	r2, r4
 8005c7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c86:	3302      	adds	r3, #2
 8005c88:	e7c5      	b.n	8005c16 <_printf_common+0x62>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	4622      	mov	r2, r4
 8005c8e:	4639      	mov	r1, r7
 8005c90:	4630      	mov	r0, r6
 8005c92:	47c0      	blx	r8
 8005c94:	3001      	adds	r0, #1
 8005c96:	d0e6      	beq.n	8005c66 <_printf_common+0xb2>
 8005c98:	f109 0901 	add.w	r9, r9, #1
 8005c9c:	e7d8      	b.n	8005c50 <_printf_common+0x9c>
	...

08005ca0 <_printf_i>:
 8005ca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ca4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005ca8:	460c      	mov	r4, r1
 8005caa:	7e09      	ldrb	r1, [r1, #24]
 8005cac:	b085      	sub	sp, #20
 8005cae:	296e      	cmp	r1, #110	; 0x6e
 8005cb0:	4617      	mov	r7, r2
 8005cb2:	4606      	mov	r6, r0
 8005cb4:	4698      	mov	r8, r3
 8005cb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005cb8:	f000 80b3 	beq.w	8005e22 <_printf_i+0x182>
 8005cbc:	d822      	bhi.n	8005d04 <_printf_i+0x64>
 8005cbe:	2963      	cmp	r1, #99	; 0x63
 8005cc0:	d036      	beq.n	8005d30 <_printf_i+0x90>
 8005cc2:	d80a      	bhi.n	8005cda <_printf_i+0x3a>
 8005cc4:	2900      	cmp	r1, #0
 8005cc6:	f000 80b9 	beq.w	8005e3c <_printf_i+0x19c>
 8005cca:	2958      	cmp	r1, #88	; 0x58
 8005ccc:	f000 8083 	beq.w	8005dd6 <_printf_i+0x136>
 8005cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cd4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005cd8:	e032      	b.n	8005d40 <_printf_i+0xa0>
 8005cda:	2964      	cmp	r1, #100	; 0x64
 8005cdc:	d001      	beq.n	8005ce2 <_printf_i+0x42>
 8005cde:	2969      	cmp	r1, #105	; 0x69
 8005ce0:	d1f6      	bne.n	8005cd0 <_printf_i+0x30>
 8005ce2:	6820      	ldr	r0, [r4, #0]
 8005ce4:	6813      	ldr	r3, [r2, #0]
 8005ce6:	0605      	lsls	r5, r0, #24
 8005ce8:	f103 0104 	add.w	r1, r3, #4
 8005cec:	d52a      	bpl.n	8005d44 <_printf_i+0xa4>
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6011      	str	r1, [r2, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	da03      	bge.n	8005cfe <_printf_i+0x5e>
 8005cf6:	222d      	movs	r2, #45	; 0x2d
 8005cf8:	425b      	negs	r3, r3
 8005cfa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005cfe:	486f      	ldr	r0, [pc, #444]	; (8005ebc <_printf_i+0x21c>)
 8005d00:	220a      	movs	r2, #10
 8005d02:	e039      	b.n	8005d78 <_printf_i+0xd8>
 8005d04:	2973      	cmp	r1, #115	; 0x73
 8005d06:	f000 809d 	beq.w	8005e44 <_printf_i+0x1a4>
 8005d0a:	d808      	bhi.n	8005d1e <_printf_i+0x7e>
 8005d0c:	296f      	cmp	r1, #111	; 0x6f
 8005d0e:	d020      	beq.n	8005d52 <_printf_i+0xb2>
 8005d10:	2970      	cmp	r1, #112	; 0x70
 8005d12:	d1dd      	bne.n	8005cd0 <_printf_i+0x30>
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	f043 0320 	orr.w	r3, r3, #32
 8005d1a:	6023      	str	r3, [r4, #0]
 8005d1c:	e003      	b.n	8005d26 <_printf_i+0x86>
 8005d1e:	2975      	cmp	r1, #117	; 0x75
 8005d20:	d017      	beq.n	8005d52 <_printf_i+0xb2>
 8005d22:	2978      	cmp	r1, #120	; 0x78
 8005d24:	d1d4      	bne.n	8005cd0 <_printf_i+0x30>
 8005d26:	2378      	movs	r3, #120	; 0x78
 8005d28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d2c:	4864      	ldr	r0, [pc, #400]	; (8005ec0 <_printf_i+0x220>)
 8005d2e:	e055      	b.n	8005ddc <_printf_i+0x13c>
 8005d30:	6813      	ldr	r3, [r2, #0]
 8005d32:	1d19      	adds	r1, r3, #4
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6011      	str	r1, [r2, #0]
 8005d38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d40:	2301      	movs	r3, #1
 8005d42:	e08c      	b.n	8005e5e <_printf_i+0x1be>
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6011      	str	r1, [r2, #0]
 8005d48:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d4c:	bf18      	it	ne
 8005d4e:	b21b      	sxthne	r3, r3
 8005d50:	e7cf      	b.n	8005cf2 <_printf_i+0x52>
 8005d52:	6813      	ldr	r3, [r2, #0]
 8005d54:	6825      	ldr	r5, [r4, #0]
 8005d56:	1d18      	adds	r0, r3, #4
 8005d58:	6010      	str	r0, [r2, #0]
 8005d5a:	0628      	lsls	r0, r5, #24
 8005d5c:	d501      	bpl.n	8005d62 <_printf_i+0xc2>
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	e002      	b.n	8005d68 <_printf_i+0xc8>
 8005d62:	0668      	lsls	r0, r5, #25
 8005d64:	d5fb      	bpl.n	8005d5e <_printf_i+0xbe>
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	4854      	ldr	r0, [pc, #336]	; (8005ebc <_printf_i+0x21c>)
 8005d6a:	296f      	cmp	r1, #111	; 0x6f
 8005d6c:	bf14      	ite	ne
 8005d6e:	220a      	movne	r2, #10
 8005d70:	2208      	moveq	r2, #8
 8005d72:	2100      	movs	r1, #0
 8005d74:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d78:	6865      	ldr	r5, [r4, #4]
 8005d7a:	60a5      	str	r5, [r4, #8]
 8005d7c:	2d00      	cmp	r5, #0
 8005d7e:	f2c0 8095 	blt.w	8005eac <_printf_i+0x20c>
 8005d82:	6821      	ldr	r1, [r4, #0]
 8005d84:	f021 0104 	bic.w	r1, r1, #4
 8005d88:	6021      	str	r1, [r4, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d13d      	bne.n	8005e0a <_printf_i+0x16a>
 8005d8e:	2d00      	cmp	r5, #0
 8005d90:	f040 808e 	bne.w	8005eb0 <_printf_i+0x210>
 8005d94:	4665      	mov	r5, ip
 8005d96:	2a08      	cmp	r2, #8
 8005d98:	d10b      	bne.n	8005db2 <_printf_i+0x112>
 8005d9a:	6823      	ldr	r3, [r4, #0]
 8005d9c:	07db      	lsls	r3, r3, #31
 8005d9e:	d508      	bpl.n	8005db2 <_printf_i+0x112>
 8005da0:	6923      	ldr	r3, [r4, #16]
 8005da2:	6862      	ldr	r2, [r4, #4]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	bfde      	ittt	le
 8005da8:	2330      	movle	r3, #48	; 0x30
 8005daa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dae:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005db2:	ebac 0305 	sub.w	r3, ip, r5
 8005db6:	6123      	str	r3, [r4, #16]
 8005db8:	f8cd 8000 	str.w	r8, [sp]
 8005dbc:	463b      	mov	r3, r7
 8005dbe:	aa03      	add	r2, sp, #12
 8005dc0:	4621      	mov	r1, r4
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	f7ff fef6 	bl	8005bb4 <_printf_common>
 8005dc8:	3001      	adds	r0, #1
 8005dca:	d14d      	bne.n	8005e68 <_printf_i+0x1c8>
 8005dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dd0:	b005      	add	sp, #20
 8005dd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dd6:	4839      	ldr	r0, [pc, #228]	; (8005ebc <_printf_i+0x21c>)
 8005dd8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005ddc:	6813      	ldr	r3, [r2, #0]
 8005dde:	6821      	ldr	r1, [r4, #0]
 8005de0:	1d1d      	adds	r5, r3, #4
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6015      	str	r5, [r2, #0]
 8005de6:	060a      	lsls	r2, r1, #24
 8005de8:	d50b      	bpl.n	8005e02 <_printf_i+0x162>
 8005dea:	07ca      	lsls	r2, r1, #31
 8005dec:	bf44      	itt	mi
 8005dee:	f041 0120 	orrmi.w	r1, r1, #32
 8005df2:	6021      	strmi	r1, [r4, #0]
 8005df4:	b91b      	cbnz	r3, 8005dfe <_printf_i+0x15e>
 8005df6:	6822      	ldr	r2, [r4, #0]
 8005df8:	f022 0220 	bic.w	r2, r2, #32
 8005dfc:	6022      	str	r2, [r4, #0]
 8005dfe:	2210      	movs	r2, #16
 8005e00:	e7b7      	b.n	8005d72 <_printf_i+0xd2>
 8005e02:	064d      	lsls	r5, r1, #25
 8005e04:	bf48      	it	mi
 8005e06:	b29b      	uxthmi	r3, r3
 8005e08:	e7ef      	b.n	8005dea <_printf_i+0x14a>
 8005e0a:	4665      	mov	r5, ip
 8005e0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e10:	fb02 3311 	mls	r3, r2, r1, r3
 8005e14:	5cc3      	ldrb	r3, [r0, r3]
 8005e16:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	2900      	cmp	r1, #0
 8005e1e:	d1f5      	bne.n	8005e0c <_printf_i+0x16c>
 8005e20:	e7b9      	b.n	8005d96 <_printf_i+0xf6>
 8005e22:	6813      	ldr	r3, [r2, #0]
 8005e24:	6825      	ldr	r5, [r4, #0]
 8005e26:	6961      	ldr	r1, [r4, #20]
 8005e28:	1d18      	adds	r0, r3, #4
 8005e2a:	6010      	str	r0, [r2, #0]
 8005e2c:	0628      	lsls	r0, r5, #24
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	d501      	bpl.n	8005e36 <_printf_i+0x196>
 8005e32:	6019      	str	r1, [r3, #0]
 8005e34:	e002      	b.n	8005e3c <_printf_i+0x19c>
 8005e36:	066a      	lsls	r2, r5, #25
 8005e38:	d5fb      	bpl.n	8005e32 <_printf_i+0x192>
 8005e3a:	8019      	strh	r1, [r3, #0]
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	6123      	str	r3, [r4, #16]
 8005e40:	4665      	mov	r5, ip
 8005e42:	e7b9      	b.n	8005db8 <_printf_i+0x118>
 8005e44:	6813      	ldr	r3, [r2, #0]
 8005e46:	1d19      	adds	r1, r3, #4
 8005e48:	6011      	str	r1, [r2, #0]
 8005e4a:	681d      	ldr	r5, [r3, #0]
 8005e4c:	6862      	ldr	r2, [r4, #4]
 8005e4e:	2100      	movs	r1, #0
 8005e50:	4628      	mov	r0, r5
 8005e52:	f7fa f9c5 	bl	80001e0 <memchr>
 8005e56:	b108      	cbz	r0, 8005e5c <_printf_i+0x1bc>
 8005e58:	1b40      	subs	r0, r0, r5
 8005e5a:	6060      	str	r0, [r4, #4]
 8005e5c:	6863      	ldr	r3, [r4, #4]
 8005e5e:	6123      	str	r3, [r4, #16]
 8005e60:	2300      	movs	r3, #0
 8005e62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e66:	e7a7      	b.n	8005db8 <_printf_i+0x118>
 8005e68:	6923      	ldr	r3, [r4, #16]
 8005e6a:	462a      	mov	r2, r5
 8005e6c:	4639      	mov	r1, r7
 8005e6e:	4630      	mov	r0, r6
 8005e70:	47c0      	blx	r8
 8005e72:	3001      	adds	r0, #1
 8005e74:	d0aa      	beq.n	8005dcc <_printf_i+0x12c>
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	079b      	lsls	r3, r3, #30
 8005e7a:	d413      	bmi.n	8005ea4 <_printf_i+0x204>
 8005e7c:	68e0      	ldr	r0, [r4, #12]
 8005e7e:	9b03      	ldr	r3, [sp, #12]
 8005e80:	4298      	cmp	r0, r3
 8005e82:	bfb8      	it	lt
 8005e84:	4618      	movlt	r0, r3
 8005e86:	e7a3      	b.n	8005dd0 <_printf_i+0x130>
 8005e88:	2301      	movs	r3, #1
 8005e8a:	464a      	mov	r2, r9
 8005e8c:	4639      	mov	r1, r7
 8005e8e:	4630      	mov	r0, r6
 8005e90:	47c0      	blx	r8
 8005e92:	3001      	adds	r0, #1
 8005e94:	d09a      	beq.n	8005dcc <_printf_i+0x12c>
 8005e96:	3501      	adds	r5, #1
 8005e98:	68e3      	ldr	r3, [r4, #12]
 8005e9a:	9a03      	ldr	r2, [sp, #12]
 8005e9c:	1a9b      	subs	r3, r3, r2
 8005e9e:	42ab      	cmp	r3, r5
 8005ea0:	dcf2      	bgt.n	8005e88 <_printf_i+0x1e8>
 8005ea2:	e7eb      	b.n	8005e7c <_printf_i+0x1dc>
 8005ea4:	2500      	movs	r5, #0
 8005ea6:	f104 0919 	add.w	r9, r4, #25
 8005eaa:	e7f5      	b.n	8005e98 <_printf_i+0x1f8>
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1ac      	bne.n	8005e0a <_printf_i+0x16a>
 8005eb0:	7803      	ldrb	r3, [r0, #0]
 8005eb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005eb6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005eba:	e76c      	b.n	8005d96 <_printf_i+0xf6>
 8005ebc:	08009b0e 	.word	0x08009b0e
 8005ec0:	08009b1f 	.word	0x08009b1f

08005ec4 <_scanf_float>:
 8005ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec8:	469a      	mov	sl, r3
 8005eca:	688b      	ldr	r3, [r1, #8]
 8005ecc:	4616      	mov	r6, r2
 8005ece:	1e5a      	subs	r2, r3, #1
 8005ed0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005ed4:	b087      	sub	sp, #28
 8005ed6:	bf83      	ittte	hi
 8005ed8:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8005edc:	189b      	addhi	r3, r3, r2
 8005ede:	9301      	strhi	r3, [sp, #4]
 8005ee0:	2300      	movls	r3, #0
 8005ee2:	bf86      	itte	hi
 8005ee4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005ee8:	608b      	strhi	r3, [r1, #8]
 8005eea:	9301      	strls	r3, [sp, #4]
 8005eec:	680b      	ldr	r3, [r1, #0]
 8005eee:	4688      	mov	r8, r1
 8005ef0:	f04f 0b00 	mov.w	fp, #0
 8005ef4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005ef8:	f848 3b1c 	str.w	r3, [r8], #28
 8005efc:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8005f00:	4607      	mov	r7, r0
 8005f02:	460c      	mov	r4, r1
 8005f04:	4645      	mov	r5, r8
 8005f06:	465a      	mov	r2, fp
 8005f08:	46d9      	mov	r9, fp
 8005f0a:	f8cd b008 	str.w	fp, [sp, #8]
 8005f0e:	68a1      	ldr	r1, [r4, #8]
 8005f10:	b181      	cbz	r1, 8005f34 <_scanf_float+0x70>
 8005f12:	6833      	ldr	r3, [r6, #0]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	2b49      	cmp	r3, #73	; 0x49
 8005f18:	d071      	beq.n	8005ffe <_scanf_float+0x13a>
 8005f1a:	d84d      	bhi.n	8005fb8 <_scanf_float+0xf4>
 8005f1c:	2b39      	cmp	r3, #57	; 0x39
 8005f1e:	d840      	bhi.n	8005fa2 <_scanf_float+0xde>
 8005f20:	2b31      	cmp	r3, #49	; 0x31
 8005f22:	f080 8088 	bcs.w	8006036 <_scanf_float+0x172>
 8005f26:	2b2d      	cmp	r3, #45	; 0x2d
 8005f28:	f000 8090 	beq.w	800604c <_scanf_float+0x188>
 8005f2c:	d815      	bhi.n	8005f5a <_scanf_float+0x96>
 8005f2e:	2b2b      	cmp	r3, #43	; 0x2b
 8005f30:	f000 808c 	beq.w	800604c <_scanf_float+0x188>
 8005f34:	f1b9 0f00 	cmp.w	r9, #0
 8005f38:	d003      	beq.n	8005f42 <_scanf_float+0x7e>
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f40:	6023      	str	r3, [r4, #0]
 8005f42:	3a01      	subs	r2, #1
 8005f44:	2a01      	cmp	r2, #1
 8005f46:	f200 80ea 	bhi.w	800611e <_scanf_float+0x25a>
 8005f4a:	4545      	cmp	r5, r8
 8005f4c:	f200 80dc 	bhi.w	8006108 <_scanf_float+0x244>
 8005f50:	2601      	movs	r6, #1
 8005f52:	4630      	mov	r0, r6
 8005f54:	b007      	add	sp, #28
 8005f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f5a:	2b2e      	cmp	r3, #46	; 0x2e
 8005f5c:	f000 809f 	beq.w	800609e <_scanf_float+0x1da>
 8005f60:	2b30      	cmp	r3, #48	; 0x30
 8005f62:	d1e7      	bne.n	8005f34 <_scanf_float+0x70>
 8005f64:	6820      	ldr	r0, [r4, #0]
 8005f66:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005f6a:	d064      	beq.n	8006036 <_scanf_float+0x172>
 8005f6c:	9b01      	ldr	r3, [sp, #4]
 8005f6e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8005f72:	6020      	str	r0, [r4, #0]
 8005f74:	f109 0901 	add.w	r9, r9, #1
 8005f78:	b11b      	cbz	r3, 8005f82 <_scanf_float+0xbe>
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	3101      	adds	r1, #1
 8005f7e:	9301      	str	r3, [sp, #4]
 8005f80:	60a1      	str	r1, [r4, #8]
 8005f82:	68a3      	ldr	r3, [r4, #8]
 8005f84:	3b01      	subs	r3, #1
 8005f86:	60a3      	str	r3, [r4, #8]
 8005f88:	6923      	ldr	r3, [r4, #16]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	6123      	str	r3, [r4, #16]
 8005f8e:	6873      	ldr	r3, [r6, #4]
 8005f90:	3b01      	subs	r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	6073      	str	r3, [r6, #4]
 8005f96:	f340 80ac 	ble.w	80060f2 <_scanf_float+0x22e>
 8005f9a:	6833      	ldr	r3, [r6, #0]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	6033      	str	r3, [r6, #0]
 8005fa0:	e7b5      	b.n	8005f0e <_scanf_float+0x4a>
 8005fa2:	2b45      	cmp	r3, #69	; 0x45
 8005fa4:	f000 8085 	beq.w	80060b2 <_scanf_float+0x1ee>
 8005fa8:	2b46      	cmp	r3, #70	; 0x46
 8005faa:	d06a      	beq.n	8006082 <_scanf_float+0x1be>
 8005fac:	2b41      	cmp	r3, #65	; 0x41
 8005fae:	d1c1      	bne.n	8005f34 <_scanf_float+0x70>
 8005fb0:	2a01      	cmp	r2, #1
 8005fb2:	d1bf      	bne.n	8005f34 <_scanf_float+0x70>
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	e046      	b.n	8006046 <_scanf_float+0x182>
 8005fb8:	2b65      	cmp	r3, #101	; 0x65
 8005fba:	d07a      	beq.n	80060b2 <_scanf_float+0x1ee>
 8005fbc:	d818      	bhi.n	8005ff0 <_scanf_float+0x12c>
 8005fbe:	2b54      	cmp	r3, #84	; 0x54
 8005fc0:	d066      	beq.n	8006090 <_scanf_float+0x1cc>
 8005fc2:	d811      	bhi.n	8005fe8 <_scanf_float+0x124>
 8005fc4:	2b4e      	cmp	r3, #78	; 0x4e
 8005fc6:	d1b5      	bne.n	8005f34 <_scanf_float+0x70>
 8005fc8:	2a00      	cmp	r2, #0
 8005fca:	d146      	bne.n	800605a <_scanf_float+0x196>
 8005fcc:	f1b9 0f00 	cmp.w	r9, #0
 8005fd0:	d145      	bne.n	800605e <_scanf_float+0x19a>
 8005fd2:	6821      	ldr	r1, [r4, #0]
 8005fd4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005fd8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005fdc:	d13f      	bne.n	800605e <_scanf_float+0x19a>
 8005fde:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005fe2:	6021      	str	r1, [r4, #0]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	e02e      	b.n	8006046 <_scanf_float+0x182>
 8005fe8:	2b59      	cmp	r3, #89	; 0x59
 8005fea:	d01e      	beq.n	800602a <_scanf_float+0x166>
 8005fec:	2b61      	cmp	r3, #97	; 0x61
 8005fee:	e7de      	b.n	8005fae <_scanf_float+0xea>
 8005ff0:	2b6e      	cmp	r3, #110	; 0x6e
 8005ff2:	d0e9      	beq.n	8005fc8 <_scanf_float+0x104>
 8005ff4:	d815      	bhi.n	8006022 <_scanf_float+0x15e>
 8005ff6:	2b66      	cmp	r3, #102	; 0x66
 8005ff8:	d043      	beq.n	8006082 <_scanf_float+0x1be>
 8005ffa:	2b69      	cmp	r3, #105	; 0x69
 8005ffc:	d19a      	bne.n	8005f34 <_scanf_float+0x70>
 8005ffe:	f1bb 0f00 	cmp.w	fp, #0
 8006002:	d138      	bne.n	8006076 <_scanf_float+0x1b2>
 8006004:	f1b9 0f00 	cmp.w	r9, #0
 8006008:	d197      	bne.n	8005f3a <_scanf_float+0x76>
 800600a:	6821      	ldr	r1, [r4, #0]
 800600c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006010:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006014:	d195      	bne.n	8005f42 <_scanf_float+0x7e>
 8006016:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800601a:	6021      	str	r1, [r4, #0]
 800601c:	f04f 0b01 	mov.w	fp, #1
 8006020:	e011      	b.n	8006046 <_scanf_float+0x182>
 8006022:	2b74      	cmp	r3, #116	; 0x74
 8006024:	d034      	beq.n	8006090 <_scanf_float+0x1cc>
 8006026:	2b79      	cmp	r3, #121	; 0x79
 8006028:	d184      	bne.n	8005f34 <_scanf_float+0x70>
 800602a:	f1bb 0f07 	cmp.w	fp, #7
 800602e:	d181      	bne.n	8005f34 <_scanf_float+0x70>
 8006030:	f04f 0b08 	mov.w	fp, #8
 8006034:	e007      	b.n	8006046 <_scanf_float+0x182>
 8006036:	eb12 0f0b 	cmn.w	r2, fp
 800603a:	f47f af7b 	bne.w	8005f34 <_scanf_float+0x70>
 800603e:	6821      	ldr	r1, [r4, #0]
 8006040:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006044:	6021      	str	r1, [r4, #0]
 8006046:	702b      	strb	r3, [r5, #0]
 8006048:	3501      	adds	r5, #1
 800604a:	e79a      	b.n	8005f82 <_scanf_float+0xbe>
 800604c:	6821      	ldr	r1, [r4, #0]
 800604e:	0608      	lsls	r0, r1, #24
 8006050:	f57f af70 	bpl.w	8005f34 <_scanf_float+0x70>
 8006054:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006058:	e7f4      	b.n	8006044 <_scanf_float+0x180>
 800605a:	2a02      	cmp	r2, #2
 800605c:	d047      	beq.n	80060ee <_scanf_float+0x22a>
 800605e:	f1bb 0f01 	cmp.w	fp, #1
 8006062:	d003      	beq.n	800606c <_scanf_float+0x1a8>
 8006064:	f1bb 0f04 	cmp.w	fp, #4
 8006068:	f47f af64 	bne.w	8005f34 <_scanf_float+0x70>
 800606c:	f10b 0b01 	add.w	fp, fp, #1
 8006070:	fa5f fb8b 	uxtb.w	fp, fp
 8006074:	e7e7      	b.n	8006046 <_scanf_float+0x182>
 8006076:	f1bb 0f03 	cmp.w	fp, #3
 800607a:	d0f7      	beq.n	800606c <_scanf_float+0x1a8>
 800607c:	f1bb 0f05 	cmp.w	fp, #5
 8006080:	e7f2      	b.n	8006068 <_scanf_float+0x1a4>
 8006082:	f1bb 0f02 	cmp.w	fp, #2
 8006086:	f47f af55 	bne.w	8005f34 <_scanf_float+0x70>
 800608a:	f04f 0b03 	mov.w	fp, #3
 800608e:	e7da      	b.n	8006046 <_scanf_float+0x182>
 8006090:	f1bb 0f06 	cmp.w	fp, #6
 8006094:	f47f af4e 	bne.w	8005f34 <_scanf_float+0x70>
 8006098:	f04f 0b07 	mov.w	fp, #7
 800609c:	e7d3      	b.n	8006046 <_scanf_float+0x182>
 800609e:	6821      	ldr	r1, [r4, #0]
 80060a0:	0588      	lsls	r0, r1, #22
 80060a2:	f57f af47 	bpl.w	8005f34 <_scanf_float+0x70>
 80060a6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80060aa:	6021      	str	r1, [r4, #0]
 80060ac:	f8cd 9008 	str.w	r9, [sp, #8]
 80060b0:	e7c9      	b.n	8006046 <_scanf_float+0x182>
 80060b2:	6821      	ldr	r1, [r4, #0]
 80060b4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80060b8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80060bc:	d006      	beq.n	80060cc <_scanf_float+0x208>
 80060be:	0548      	lsls	r0, r1, #21
 80060c0:	f57f af38 	bpl.w	8005f34 <_scanf_float+0x70>
 80060c4:	f1b9 0f00 	cmp.w	r9, #0
 80060c8:	f43f af3b 	beq.w	8005f42 <_scanf_float+0x7e>
 80060cc:	0588      	lsls	r0, r1, #22
 80060ce:	bf58      	it	pl
 80060d0:	9802      	ldrpl	r0, [sp, #8]
 80060d2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80060d6:	bf58      	it	pl
 80060d8:	eba9 0000 	subpl.w	r0, r9, r0
 80060dc:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80060e0:	bf58      	it	pl
 80060e2:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80060e6:	6021      	str	r1, [r4, #0]
 80060e8:	f04f 0900 	mov.w	r9, #0
 80060ec:	e7ab      	b.n	8006046 <_scanf_float+0x182>
 80060ee:	2203      	movs	r2, #3
 80060f0:	e7a9      	b.n	8006046 <_scanf_float+0x182>
 80060f2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80060f6:	9205      	str	r2, [sp, #20]
 80060f8:	4631      	mov	r1, r6
 80060fa:	4638      	mov	r0, r7
 80060fc:	4798      	blx	r3
 80060fe:	9a05      	ldr	r2, [sp, #20]
 8006100:	2800      	cmp	r0, #0
 8006102:	f43f af04 	beq.w	8005f0e <_scanf_float+0x4a>
 8006106:	e715      	b.n	8005f34 <_scanf_float+0x70>
 8006108:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800610c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006110:	4632      	mov	r2, r6
 8006112:	4638      	mov	r0, r7
 8006114:	4798      	blx	r3
 8006116:	6923      	ldr	r3, [r4, #16]
 8006118:	3b01      	subs	r3, #1
 800611a:	6123      	str	r3, [r4, #16]
 800611c:	e715      	b.n	8005f4a <_scanf_float+0x86>
 800611e:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8006122:	2b06      	cmp	r3, #6
 8006124:	d80a      	bhi.n	800613c <_scanf_float+0x278>
 8006126:	f1bb 0f02 	cmp.w	fp, #2
 800612a:	d968      	bls.n	80061fe <_scanf_float+0x33a>
 800612c:	f1ab 0b03 	sub.w	fp, fp, #3
 8006130:	fa5f fb8b 	uxtb.w	fp, fp
 8006134:	eba5 0b0b 	sub.w	fp, r5, fp
 8006138:	455d      	cmp	r5, fp
 800613a:	d14b      	bne.n	80061d4 <_scanf_float+0x310>
 800613c:	6823      	ldr	r3, [r4, #0]
 800613e:	05da      	lsls	r2, r3, #23
 8006140:	d51f      	bpl.n	8006182 <_scanf_float+0x2be>
 8006142:	055b      	lsls	r3, r3, #21
 8006144:	d468      	bmi.n	8006218 <_scanf_float+0x354>
 8006146:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800614a:	6923      	ldr	r3, [r4, #16]
 800614c:	2965      	cmp	r1, #101	; 0x65
 800614e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006152:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8006156:	6123      	str	r3, [r4, #16]
 8006158:	d00d      	beq.n	8006176 <_scanf_float+0x2b2>
 800615a:	2945      	cmp	r1, #69	; 0x45
 800615c:	d00b      	beq.n	8006176 <_scanf_float+0x2b2>
 800615e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006162:	4632      	mov	r2, r6
 8006164:	4638      	mov	r0, r7
 8006166:	4798      	blx	r3
 8006168:	6923      	ldr	r3, [r4, #16]
 800616a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800616e:	3b01      	subs	r3, #1
 8006170:	f1a5 0b02 	sub.w	fp, r5, #2
 8006174:	6123      	str	r3, [r4, #16]
 8006176:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800617a:	4632      	mov	r2, r6
 800617c:	4638      	mov	r0, r7
 800617e:	4798      	blx	r3
 8006180:	465d      	mov	r5, fp
 8006182:	6826      	ldr	r6, [r4, #0]
 8006184:	f016 0610 	ands.w	r6, r6, #16
 8006188:	d17a      	bne.n	8006280 <_scanf_float+0x3bc>
 800618a:	702e      	strb	r6, [r5, #0]
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006196:	d142      	bne.n	800621e <_scanf_float+0x35a>
 8006198:	9b02      	ldr	r3, [sp, #8]
 800619a:	eba9 0303 	sub.w	r3, r9, r3
 800619e:	425a      	negs	r2, r3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d149      	bne.n	8006238 <_scanf_float+0x374>
 80061a4:	2200      	movs	r2, #0
 80061a6:	4641      	mov	r1, r8
 80061a8:	4638      	mov	r0, r7
 80061aa:	f000 ff21 	bl	8006ff0 <_strtod_r>
 80061ae:	6825      	ldr	r5, [r4, #0]
 80061b0:	f8da 3000 	ldr.w	r3, [sl]
 80061b4:	f015 0f02 	tst.w	r5, #2
 80061b8:	f103 0204 	add.w	r2, r3, #4
 80061bc:	ec59 8b10 	vmov	r8, r9, d0
 80061c0:	f8ca 2000 	str.w	r2, [sl]
 80061c4:	d043      	beq.n	800624e <_scanf_float+0x38a>
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	e9c3 8900 	strd	r8, r9, [r3]
 80061cc:	68e3      	ldr	r3, [r4, #12]
 80061ce:	3301      	adds	r3, #1
 80061d0:	60e3      	str	r3, [r4, #12]
 80061d2:	e6be      	b.n	8005f52 <_scanf_float+0x8e>
 80061d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061d8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80061dc:	4632      	mov	r2, r6
 80061de:	4638      	mov	r0, r7
 80061e0:	4798      	blx	r3
 80061e2:	6923      	ldr	r3, [r4, #16]
 80061e4:	3b01      	subs	r3, #1
 80061e6:	6123      	str	r3, [r4, #16]
 80061e8:	e7a6      	b.n	8006138 <_scanf_float+0x274>
 80061ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061ee:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80061f2:	4632      	mov	r2, r6
 80061f4:	4638      	mov	r0, r7
 80061f6:	4798      	blx	r3
 80061f8:	6923      	ldr	r3, [r4, #16]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	6123      	str	r3, [r4, #16]
 80061fe:	4545      	cmp	r5, r8
 8006200:	d8f3      	bhi.n	80061ea <_scanf_float+0x326>
 8006202:	e6a5      	b.n	8005f50 <_scanf_float+0x8c>
 8006204:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006208:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800620c:	4632      	mov	r2, r6
 800620e:	4638      	mov	r0, r7
 8006210:	4798      	blx	r3
 8006212:	6923      	ldr	r3, [r4, #16]
 8006214:	3b01      	subs	r3, #1
 8006216:	6123      	str	r3, [r4, #16]
 8006218:	4545      	cmp	r5, r8
 800621a:	d8f3      	bhi.n	8006204 <_scanf_float+0x340>
 800621c:	e698      	b.n	8005f50 <_scanf_float+0x8c>
 800621e:	9b03      	ldr	r3, [sp, #12]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d0bf      	beq.n	80061a4 <_scanf_float+0x2e0>
 8006224:	9904      	ldr	r1, [sp, #16]
 8006226:	230a      	movs	r3, #10
 8006228:	4632      	mov	r2, r6
 800622a:	3101      	adds	r1, #1
 800622c:	4638      	mov	r0, r7
 800622e:	f000 ff6b 	bl	8007108 <_strtol_r>
 8006232:	9b03      	ldr	r3, [sp, #12]
 8006234:	9d04      	ldr	r5, [sp, #16]
 8006236:	1ac2      	subs	r2, r0, r3
 8006238:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800623c:	429d      	cmp	r5, r3
 800623e:	bf28      	it	cs
 8006240:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8006244:	490f      	ldr	r1, [pc, #60]	; (8006284 <_scanf_float+0x3c0>)
 8006246:	4628      	mov	r0, r5
 8006248:	f000 f8a0 	bl	800638c <siprintf>
 800624c:	e7aa      	b.n	80061a4 <_scanf_float+0x2e0>
 800624e:	f015 0504 	ands.w	r5, r5, #4
 8006252:	d1b8      	bne.n	80061c6 <_scanf_float+0x302>
 8006254:	681f      	ldr	r7, [r3, #0]
 8006256:	ee10 2a10 	vmov	r2, s0
 800625a:	464b      	mov	r3, r9
 800625c:	ee10 0a10 	vmov	r0, s0
 8006260:	4649      	mov	r1, r9
 8006262:	f7fa fc63 	bl	8000b2c <__aeabi_dcmpun>
 8006266:	b128      	cbz	r0, 8006274 <_scanf_float+0x3b0>
 8006268:	4628      	mov	r0, r5
 800626a:	f000 f889 	bl	8006380 <nanf>
 800626e:	ed87 0a00 	vstr	s0, [r7]
 8006272:	e7ab      	b.n	80061cc <_scanf_float+0x308>
 8006274:	4640      	mov	r0, r8
 8006276:	4649      	mov	r1, r9
 8006278:	f7fa fcb6 	bl	8000be8 <__aeabi_d2f>
 800627c:	6038      	str	r0, [r7, #0]
 800627e:	e7a5      	b.n	80061cc <_scanf_float+0x308>
 8006280:	2600      	movs	r6, #0
 8006282:	e666      	b.n	8005f52 <_scanf_float+0x8e>
 8006284:	08009b30 	.word	0x08009b30

08006288 <iprintf>:
 8006288:	b40f      	push	{r0, r1, r2, r3}
 800628a:	4b0a      	ldr	r3, [pc, #40]	; (80062b4 <iprintf+0x2c>)
 800628c:	b513      	push	{r0, r1, r4, lr}
 800628e:	681c      	ldr	r4, [r3, #0]
 8006290:	b124      	cbz	r4, 800629c <iprintf+0x14>
 8006292:	69a3      	ldr	r3, [r4, #24]
 8006294:	b913      	cbnz	r3, 800629c <iprintf+0x14>
 8006296:	4620      	mov	r0, r4
 8006298:	f001 ff3e 	bl	8008118 <__sinit>
 800629c:	ab05      	add	r3, sp, #20
 800629e:	9a04      	ldr	r2, [sp, #16]
 80062a0:	68a1      	ldr	r1, [r4, #8]
 80062a2:	9301      	str	r3, [sp, #4]
 80062a4:	4620      	mov	r0, r4
 80062a6:	f003 f9ab 	bl	8009600 <_vfiprintf_r>
 80062aa:	b002      	add	sp, #8
 80062ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062b0:	b004      	add	sp, #16
 80062b2:	4770      	bx	lr
 80062b4:	2000000c 	.word	0x2000000c

080062b8 <_puts_r>:
 80062b8:	b570      	push	{r4, r5, r6, lr}
 80062ba:	460e      	mov	r6, r1
 80062bc:	4605      	mov	r5, r0
 80062be:	b118      	cbz	r0, 80062c8 <_puts_r+0x10>
 80062c0:	6983      	ldr	r3, [r0, #24]
 80062c2:	b90b      	cbnz	r3, 80062c8 <_puts_r+0x10>
 80062c4:	f001 ff28 	bl	8008118 <__sinit>
 80062c8:	69ab      	ldr	r3, [r5, #24]
 80062ca:	68ac      	ldr	r4, [r5, #8]
 80062cc:	b913      	cbnz	r3, 80062d4 <_puts_r+0x1c>
 80062ce:	4628      	mov	r0, r5
 80062d0:	f001 ff22 	bl	8008118 <__sinit>
 80062d4:	4b23      	ldr	r3, [pc, #140]	; (8006364 <_puts_r+0xac>)
 80062d6:	429c      	cmp	r4, r3
 80062d8:	d117      	bne.n	800630a <_puts_r+0x52>
 80062da:	686c      	ldr	r4, [r5, #4]
 80062dc:	89a3      	ldrh	r3, [r4, #12]
 80062de:	071b      	lsls	r3, r3, #28
 80062e0:	d51d      	bpl.n	800631e <_puts_r+0x66>
 80062e2:	6923      	ldr	r3, [r4, #16]
 80062e4:	b1db      	cbz	r3, 800631e <_puts_r+0x66>
 80062e6:	3e01      	subs	r6, #1
 80062e8:	68a3      	ldr	r3, [r4, #8]
 80062ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80062ee:	3b01      	subs	r3, #1
 80062f0:	60a3      	str	r3, [r4, #8]
 80062f2:	b9e9      	cbnz	r1, 8006330 <_puts_r+0x78>
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	da2e      	bge.n	8006356 <_puts_r+0x9e>
 80062f8:	4622      	mov	r2, r4
 80062fa:	210a      	movs	r1, #10
 80062fc:	4628      	mov	r0, r5
 80062fe:	f000 ff15 	bl	800712c <__swbuf_r>
 8006302:	3001      	adds	r0, #1
 8006304:	d011      	beq.n	800632a <_puts_r+0x72>
 8006306:	200a      	movs	r0, #10
 8006308:	e011      	b.n	800632e <_puts_r+0x76>
 800630a:	4b17      	ldr	r3, [pc, #92]	; (8006368 <_puts_r+0xb0>)
 800630c:	429c      	cmp	r4, r3
 800630e:	d101      	bne.n	8006314 <_puts_r+0x5c>
 8006310:	68ac      	ldr	r4, [r5, #8]
 8006312:	e7e3      	b.n	80062dc <_puts_r+0x24>
 8006314:	4b15      	ldr	r3, [pc, #84]	; (800636c <_puts_r+0xb4>)
 8006316:	429c      	cmp	r4, r3
 8006318:	bf08      	it	eq
 800631a:	68ec      	ldreq	r4, [r5, #12]
 800631c:	e7de      	b.n	80062dc <_puts_r+0x24>
 800631e:	4621      	mov	r1, r4
 8006320:	4628      	mov	r0, r5
 8006322:	f000 ff55 	bl	80071d0 <__swsetup_r>
 8006326:	2800      	cmp	r0, #0
 8006328:	d0dd      	beq.n	80062e6 <_puts_r+0x2e>
 800632a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800632e:	bd70      	pop	{r4, r5, r6, pc}
 8006330:	2b00      	cmp	r3, #0
 8006332:	da04      	bge.n	800633e <_puts_r+0x86>
 8006334:	69a2      	ldr	r2, [r4, #24]
 8006336:	429a      	cmp	r2, r3
 8006338:	dc06      	bgt.n	8006348 <_puts_r+0x90>
 800633a:	290a      	cmp	r1, #10
 800633c:	d004      	beq.n	8006348 <_puts_r+0x90>
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	1c5a      	adds	r2, r3, #1
 8006342:	6022      	str	r2, [r4, #0]
 8006344:	7019      	strb	r1, [r3, #0]
 8006346:	e7cf      	b.n	80062e8 <_puts_r+0x30>
 8006348:	4622      	mov	r2, r4
 800634a:	4628      	mov	r0, r5
 800634c:	f000 feee 	bl	800712c <__swbuf_r>
 8006350:	3001      	adds	r0, #1
 8006352:	d1c9      	bne.n	80062e8 <_puts_r+0x30>
 8006354:	e7e9      	b.n	800632a <_puts_r+0x72>
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	200a      	movs	r0, #10
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	6022      	str	r2, [r4, #0]
 800635e:	7018      	strb	r0, [r3, #0]
 8006360:	e7e5      	b.n	800632e <_puts_r+0x76>
 8006362:	bf00      	nop
 8006364:	08009bb8 	.word	0x08009bb8
 8006368:	08009bd8 	.word	0x08009bd8
 800636c:	08009b98 	.word	0x08009b98

08006370 <puts>:
 8006370:	4b02      	ldr	r3, [pc, #8]	; (800637c <puts+0xc>)
 8006372:	4601      	mov	r1, r0
 8006374:	6818      	ldr	r0, [r3, #0]
 8006376:	f7ff bf9f 	b.w	80062b8 <_puts_r>
 800637a:	bf00      	nop
 800637c:	2000000c 	.word	0x2000000c

08006380 <nanf>:
 8006380:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006388 <nanf+0x8>
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	7fc00000 	.word	0x7fc00000

0800638c <siprintf>:
 800638c:	b40e      	push	{r1, r2, r3}
 800638e:	b500      	push	{lr}
 8006390:	b09c      	sub	sp, #112	; 0x70
 8006392:	ab1d      	add	r3, sp, #116	; 0x74
 8006394:	9002      	str	r0, [sp, #8]
 8006396:	9006      	str	r0, [sp, #24]
 8006398:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800639c:	4809      	ldr	r0, [pc, #36]	; (80063c4 <siprintf+0x38>)
 800639e:	9107      	str	r1, [sp, #28]
 80063a0:	9104      	str	r1, [sp, #16]
 80063a2:	4909      	ldr	r1, [pc, #36]	; (80063c8 <siprintf+0x3c>)
 80063a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80063a8:	9105      	str	r1, [sp, #20]
 80063aa:	6800      	ldr	r0, [r0, #0]
 80063ac:	9301      	str	r3, [sp, #4]
 80063ae:	a902      	add	r1, sp, #8
 80063b0:	f003 f804 	bl	80093bc <_svfiprintf_r>
 80063b4:	9b02      	ldr	r3, [sp, #8]
 80063b6:	2200      	movs	r2, #0
 80063b8:	701a      	strb	r2, [r3, #0]
 80063ba:	b01c      	add	sp, #112	; 0x70
 80063bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80063c0:	b003      	add	sp, #12
 80063c2:	4770      	bx	lr
 80063c4:	2000000c 	.word	0x2000000c
 80063c8:	ffff0208 	.word	0xffff0208

080063cc <sulp>:
 80063cc:	b570      	push	{r4, r5, r6, lr}
 80063ce:	4604      	mov	r4, r0
 80063d0:	460d      	mov	r5, r1
 80063d2:	ec45 4b10 	vmov	d0, r4, r5
 80063d6:	4616      	mov	r6, r2
 80063d8:	f002 fdac 	bl	8008f34 <__ulp>
 80063dc:	ec51 0b10 	vmov	r0, r1, d0
 80063e0:	b17e      	cbz	r6, 8006402 <sulp+0x36>
 80063e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80063e6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	dd09      	ble.n	8006402 <sulp+0x36>
 80063ee:	051b      	lsls	r3, r3, #20
 80063f0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80063f4:	2400      	movs	r4, #0
 80063f6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80063fa:	4622      	mov	r2, r4
 80063fc:	462b      	mov	r3, r5
 80063fe:	f7fa f8fb 	bl	80005f8 <__aeabi_dmul>
 8006402:	bd70      	pop	{r4, r5, r6, pc}
 8006404:	0000      	movs	r0, r0
	...

08006408 <_strtod_l>:
 8006408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800640c:	461f      	mov	r7, r3
 800640e:	b0a1      	sub	sp, #132	; 0x84
 8006410:	2300      	movs	r3, #0
 8006412:	4681      	mov	r9, r0
 8006414:	4638      	mov	r0, r7
 8006416:	460e      	mov	r6, r1
 8006418:	9217      	str	r2, [sp, #92]	; 0x5c
 800641a:	931c      	str	r3, [sp, #112]	; 0x70
 800641c:	f002 fa2f 	bl	800887e <__localeconv_l>
 8006420:	4680      	mov	r8, r0
 8006422:	6800      	ldr	r0, [r0, #0]
 8006424:	f7f9 fed4 	bl	80001d0 <strlen>
 8006428:	f04f 0a00 	mov.w	sl, #0
 800642c:	4604      	mov	r4, r0
 800642e:	f04f 0b00 	mov.w	fp, #0
 8006432:	961b      	str	r6, [sp, #108]	; 0x6c
 8006434:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006436:	781a      	ldrb	r2, [r3, #0]
 8006438:	2a0d      	cmp	r2, #13
 800643a:	d832      	bhi.n	80064a2 <_strtod_l+0x9a>
 800643c:	2a09      	cmp	r2, #9
 800643e:	d236      	bcs.n	80064ae <_strtod_l+0xa6>
 8006440:	2a00      	cmp	r2, #0
 8006442:	d03e      	beq.n	80064c2 <_strtod_l+0xba>
 8006444:	2300      	movs	r3, #0
 8006446:	930d      	str	r3, [sp, #52]	; 0x34
 8006448:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800644a:	782b      	ldrb	r3, [r5, #0]
 800644c:	2b30      	cmp	r3, #48	; 0x30
 800644e:	f040 80ac 	bne.w	80065aa <_strtod_l+0x1a2>
 8006452:	786b      	ldrb	r3, [r5, #1]
 8006454:	2b58      	cmp	r3, #88	; 0x58
 8006456:	d001      	beq.n	800645c <_strtod_l+0x54>
 8006458:	2b78      	cmp	r3, #120	; 0x78
 800645a:	d167      	bne.n	800652c <_strtod_l+0x124>
 800645c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800645e:	9301      	str	r3, [sp, #4]
 8006460:	ab1c      	add	r3, sp, #112	; 0x70
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	9702      	str	r7, [sp, #8]
 8006466:	ab1d      	add	r3, sp, #116	; 0x74
 8006468:	4a88      	ldr	r2, [pc, #544]	; (800668c <_strtod_l+0x284>)
 800646a:	a91b      	add	r1, sp, #108	; 0x6c
 800646c:	4648      	mov	r0, r9
 800646e:	f001 ff2c 	bl	80082ca <__gethex>
 8006472:	f010 0407 	ands.w	r4, r0, #7
 8006476:	4606      	mov	r6, r0
 8006478:	d005      	beq.n	8006486 <_strtod_l+0x7e>
 800647a:	2c06      	cmp	r4, #6
 800647c:	d12b      	bne.n	80064d6 <_strtod_l+0xce>
 800647e:	3501      	adds	r5, #1
 8006480:	2300      	movs	r3, #0
 8006482:	951b      	str	r5, [sp, #108]	; 0x6c
 8006484:	930d      	str	r3, [sp, #52]	; 0x34
 8006486:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006488:	2b00      	cmp	r3, #0
 800648a:	f040 859a 	bne.w	8006fc2 <_strtod_l+0xbba>
 800648e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006490:	b1e3      	cbz	r3, 80064cc <_strtod_l+0xc4>
 8006492:	4652      	mov	r2, sl
 8006494:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006498:	ec43 2b10 	vmov	d0, r2, r3
 800649c:	b021      	add	sp, #132	; 0x84
 800649e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a2:	2a2b      	cmp	r2, #43	; 0x2b
 80064a4:	d015      	beq.n	80064d2 <_strtod_l+0xca>
 80064a6:	2a2d      	cmp	r2, #45	; 0x2d
 80064a8:	d004      	beq.n	80064b4 <_strtod_l+0xac>
 80064aa:	2a20      	cmp	r2, #32
 80064ac:	d1ca      	bne.n	8006444 <_strtod_l+0x3c>
 80064ae:	3301      	adds	r3, #1
 80064b0:	931b      	str	r3, [sp, #108]	; 0x6c
 80064b2:	e7bf      	b.n	8006434 <_strtod_l+0x2c>
 80064b4:	2201      	movs	r2, #1
 80064b6:	920d      	str	r2, [sp, #52]	; 0x34
 80064b8:	1c5a      	adds	r2, r3, #1
 80064ba:	921b      	str	r2, [sp, #108]	; 0x6c
 80064bc:	785b      	ldrb	r3, [r3, #1]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1c2      	bne.n	8006448 <_strtod_l+0x40>
 80064c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80064c4:	961b      	str	r6, [sp, #108]	; 0x6c
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f040 8579 	bne.w	8006fbe <_strtod_l+0xbb6>
 80064cc:	4652      	mov	r2, sl
 80064ce:	465b      	mov	r3, fp
 80064d0:	e7e2      	b.n	8006498 <_strtod_l+0x90>
 80064d2:	2200      	movs	r2, #0
 80064d4:	e7ef      	b.n	80064b6 <_strtod_l+0xae>
 80064d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80064d8:	b13a      	cbz	r2, 80064ea <_strtod_l+0xe2>
 80064da:	2135      	movs	r1, #53	; 0x35
 80064dc:	a81e      	add	r0, sp, #120	; 0x78
 80064de:	f002 fe21 	bl	8009124 <__copybits>
 80064e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80064e4:	4648      	mov	r0, r9
 80064e6:	f002 fa8d 	bl	8008a04 <_Bfree>
 80064ea:	3c01      	subs	r4, #1
 80064ec:	2c04      	cmp	r4, #4
 80064ee:	d806      	bhi.n	80064fe <_strtod_l+0xf6>
 80064f0:	e8df f004 	tbb	[pc, r4]
 80064f4:	1714030a 	.word	0x1714030a
 80064f8:	0a          	.byte	0x0a
 80064f9:	00          	.byte	0x00
 80064fa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80064fe:	0730      	lsls	r0, r6, #28
 8006500:	d5c1      	bpl.n	8006486 <_strtod_l+0x7e>
 8006502:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006506:	e7be      	b.n	8006486 <_strtod_l+0x7e>
 8006508:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800650c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800650e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006512:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006516:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800651a:	e7f0      	b.n	80064fe <_strtod_l+0xf6>
 800651c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8006690 <_strtod_l+0x288>
 8006520:	e7ed      	b.n	80064fe <_strtod_l+0xf6>
 8006522:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006526:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800652a:	e7e8      	b.n	80064fe <_strtod_l+0xf6>
 800652c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	921b      	str	r2, [sp, #108]	; 0x6c
 8006532:	785b      	ldrb	r3, [r3, #1]
 8006534:	2b30      	cmp	r3, #48	; 0x30
 8006536:	d0f9      	beq.n	800652c <_strtod_l+0x124>
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0a4      	beq.n	8006486 <_strtod_l+0x7e>
 800653c:	2301      	movs	r3, #1
 800653e:	2500      	movs	r5, #0
 8006540:	9306      	str	r3, [sp, #24]
 8006542:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006544:	9308      	str	r3, [sp, #32]
 8006546:	9507      	str	r5, [sp, #28]
 8006548:	9505      	str	r5, [sp, #20]
 800654a:	220a      	movs	r2, #10
 800654c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800654e:	7807      	ldrb	r7, [r0, #0]
 8006550:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006554:	b2d9      	uxtb	r1, r3
 8006556:	2909      	cmp	r1, #9
 8006558:	d929      	bls.n	80065ae <_strtod_l+0x1a6>
 800655a:	4622      	mov	r2, r4
 800655c:	f8d8 1000 	ldr.w	r1, [r8]
 8006560:	f003 f9b7 	bl	80098d2 <strncmp>
 8006564:	2800      	cmp	r0, #0
 8006566:	d031      	beq.n	80065cc <_strtod_l+0x1c4>
 8006568:	2000      	movs	r0, #0
 800656a:	9c05      	ldr	r4, [sp, #20]
 800656c:	9004      	str	r0, [sp, #16]
 800656e:	463b      	mov	r3, r7
 8006570:	4602      	mov	r2, r0
 8006572:	2b65      	cmp	r3, #101	; 0x65
 8006574:	d001      	beq.n	800657a <_strtod_l+0x172>
 8006576:	2b45      	cmp	r3, #69	; 0x45
 8006578:	d114      	bne.n	80065a4 <_strtod_l+0x19c>
 800657a:	b924      	cbnz	r4, 8006586 <_strtod_l+0x17e>
 800657c:	b910      	cbnz	r0, 8006584 <_strtod_l+0x17c>
 800657e:	9b06      	ldr	r3, [sp, #24]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d09e      	beq.n	80064c2 <_strtod_l+0xba>
 8006584:	2400      	movs	r4, #0
 8006586:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006588:	1c73      	adds	r3, r6, #1
 800658a:	931b      	str	r3, [sp, #108]	; 0x6c
 800658c:	7873      	ldrb	r3, [r6, #1]
 800658e:	2b2b      	cmp	r3, #43	; 0x2b
 8006590:	d078      	beq.n	8006684 <_strtod_l+0x27c>
 8006592:	2b2d      	cmp	r3, #45	; 0x2d
 8006594:	d070      	beq.n	8006678 <_strtod_l+0x270>
 8006596:	f04f 0c00 	mov.w	ip, #0
 800659a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800659e:	2f09      	cmp	r7, #9
 80065a0:	d97c      	bls.n	800669c <_strtod_l+0x294>
 80065a2:	961b      	str	r6, [sp, #108]	; 0x6c
 80065a4:	f04f 0e00 	mov.w	lr, #0
 80065a8:	e09a      	b.n	80066e0 <_strtod_l+0x2d8>
 80065aa:	2300      	movs	r3, #0
 80065ac:	e7c7      	b.n	800653e <_strtod_l+0x136>
 80065ae:	9905      	ldr	r1, [sp, #20]
 80065b0:	2908      	cmp	r1, #8
 80065b2:	bfdd      	ittte	le
 80065b4:	9907      	ldrle	r1, [sp, #28]
 80065b6:	fb02 3301 	mlale	r3, r2, r1, r3
 80065ba:	9307      	strle	r3, [sp, #28]
 80065bc:	fb02 3505 	mlagt	r5, r2, r5, r3
 80065c0:	9b05      	ldr	r3, [sp, #20]
 80065c2:	3001      	adds	r0, #1
 80065c4:	3301      	adds	r3, #1
 80065c6:	9305      	str	r3, [sp, #20]
 80065c8:	901b      	str	r0, [sp, #108]	; 0x6c
 80065ca:	e7bf      	b.n	800654c <_strtod_l+0x144>
 80065cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80065ce:	191a      	adds	r2, r3, r4
 80065d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80065d2:	9a05      	ldr	r2, [sp, #20]
 80065d4:	5d1b      	ldrb	r3, [r3, r4]
 80065d6:	2a00      	cmp	r2, #0
 80065d8:	d037      	beq.n	800664a <_strtod_l+0x242>
 80065da:	9c05      	ldr	r4, [sp, #20]
 80065dc:	4602      	mov	r2, r0
 80065de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80065e2:	2909      	cmp	r1, #9
 80065e4:	d913      	bls.n	800660e <_strtod_l+0x206>
 80065e6:	2101      	movs	r1, #1
 80065e8:	9104      	str	r1, [sp, #16]
 80065ea:	e7c2      	b.n	8006572 <_strtod_l+0x16a>
 80065ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80065ee:	1c5a      	adds	r2, r3, #1
 80065f0:	921b      	str	r2, [sp, #108]	; 0x6c
 80065f2:	785b      	ldrb	r3, [r3, #1]
 80065f4:	3001      	adds	r0, #1
 80065f6:	2b30      	cmp	r3, #48	; 0x30
 80065f8:	d0f8      	beq.n	80065ec <_strtod_l+0x1e4>
 80065fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80065fe:	2a08      	cmp	r2, #8
 8006600:	f200 84e4 	bhi.w	8006fcc <_strtod_l+0xbc4>
 8006604:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006606:	9208      	str	r2, [sp, #32]
 8006608:	4602      	mov	r2, r0
 800660a:	2000      	movs	r0, #0
 800660c:	4604      	mov	r4, r0
 800660e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8006612:	f100 0101 	add.w	r1, r0, #1
 8006616:	d012      	beq.n	800663e <_strtod_l+0x236>
 8006618:	440a      	add	r2, r1
 800661a:	eb00 0c04 	add.w	ip, r0, r4
 800661e:	4621      	mov	r1, r4
 8006620:	270a      	movs	r7, #10
 8006622:	458c      	cmp	ip, r1
 8006624:	d113      	bne.n	800664e <_strtod_l+0x246>
 8006626:	1821      	adds	r1, r4, r0
 8006628:	2908      	cmp	r1, #8
 800662a:	f104 0401 	add.w	r4, r4, #1
 800662e:	4404      	add	r4, r0
 8006630:	dc19      	bgt.n	8006666 <_strtod_l+0x25e>
 8006632:	9b07      	ldr	r3, [sp, #28]
 8006634:	210a      	movs	r1, #10
 8006636:	fb01 e303 	mla	r3, r1, r3, lr
 800663a:	9307      	str	r3, [sp, #28]
 800663c:	2100      	movs	r1, #0
 800663e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006640:	1c58      	adds	r0, r3, #1
 8006642:	901b      	str	r0, [sp, #108]	; 0x6c
 8006644:	785b      	ldrb	r3, [r3, #1]
 8006646:	4608      	mov	r0, r1
 8006648:	e7c9      	b.n	80065de <_strtod_l+0x1d6>
 800664a:	9805      	ldr	r0, [sp, #20]
 800664c:	e7d3      	b.n	80065f6 <_strtod_l+0x1ee>
 800664e:	2908      	cmp	r1, #8
 8006650:	f101 0101 	add.w	r1, r1, #1
 8006654:	dc03      	bgt.n	800665e <_strtod_l+0x256>
 8006656:	9b07      	ldr	r3, [sp, #28]
 8006658:	437b      	muls	r3, r7
 800665a:	9307      	str	r3, [sp, #28]
 800665c:	e7e1      	b.n	8006622 <_strtod_l+0x21a>
 800665e:	2910      	cmp	r1, #16
 8006660:	bfd8      	it	le
 8006662:	437d      	mulle	r5, r7
 8006664:	e7dd      	b.n	8006622 <_strtod_l+0x21a>
 8006666:	2c10      	cmp	r4, #16
 8006668:	bfdc      	itt	le
 800666a:	210a      	movle	r1, #10
 800666c:	fb01 e505 	mlale	r5, r1, r5, lr
 8006670:	e7e4      	b.n	800663c <_strtod_l+0x234>
 8006672:	2301      	movs	r3, #1
 8006674:	9304      	str	r3, [sp, #16]
 8006676:	e781      	b.n	800657c <_strtod_l+0x174>
 8006678:	f04f 0c01 	mov.w	ip, #1
 800667c:	1cb3      	adds	r3, r6, #2
 800667e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006680:	78b3      	ldrb	r3, [r6, #2]
 8006682:	e78a      	b.n	800659a <_strtod_l+0x192>
 8006684:	f04f 0c00 	mov.w	ip, #0
 8006688:	e7f8      	b.n	800667c <_strtod_l+0x274>
 800668a:	bf00      	nop
 800668c:	08009b38 	.word	0x08009b38
 8006690:	7ff00000 	.word	0x7ff00000
 8006694:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006696:	1c5f      	adds	r7, r3, #1
 8006698:	971b      	str	r7, [sp, #108]	; 0x6c
 800669a:	785b      	ldrb	r3, [r3, #1]
 800669c:	2b30      	cmp	r3, #48	; 0x30
 800669e:	d0f9      	beq.n	8006694 <_strtod_l+0x28c>
 80066a0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80066a4:	2f08      	cmp	r7, #8
 80066a6:	f63f af7d 	bhi.w	80065a4 <_strtod_l+0x19c>
 80066aa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80066ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80066b0:	930a      	str	r3, [sp, #40]	; 0x28
 80066b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80066b4:	1c5f      	adds	r7, r3, #1
 80066b6:	971b      	str	r7, [sp, #108]	; 0x6c
 80066b8:	785b      	ldrb	r3, [r3, #1]
 80066ba:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80066be:	f1b8 0f09 	cmp.w	r8, #9
 80066c2:	d937      	bls.n	8006734 <_strtod_l+0x32c>
 80066c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80066c6:	1a7f      	subs	r7, r7, r1
 80066c8:	2f08      	cmp	r7, #8
 80066ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80066ce:	dc37      	bgt.n	8006740 <_strtod_l+0x338>
 80066d0:	45be      	cmp	lr, r7
 80066d2:	bfa8      	it	ge
 80066d4:	46be      	movge	lr, r7
 80066d6:	f1bc 0f00 	cmp.w	ip, #0
 80066da:	d001      	beq.n	80066e0 <_strtod_l+0x2d8>
 80066dc:	f1ce 0e00 	rsb	lr, lr, #0
 80066e0:	2c00      	cmp	r4, #0
 80066e2:	d151      	bne.n	8006788 <_strtod_l+0x380>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	f47f aece 	bne.w	8006486 <_strtod_l+0x7e>
 80066ea:	9a06      	ldr	r2, [sp, #24]
 80066ec:	2a00      	cmp	r2, #0
 80066ee:	f47f aeca 	bne.w	8006486 <_strtod_l+0x7e>
 80066f2:	9a04      	ldr	r2, [sp, #16]
 80066f4:	2a00      	cmp	r2, #0
 80066f6:	f47f aee4 	bne.w	80064c2 <_strtod_l+0xba>
 80066fa:	2b4e      	cmp	r3, #78	; 0x4e
 80066fc:	d027      	beq.n	800674e <_strtod_l+0x346>
 80066fe:	dc21      	bgt.n	8006744 <_strtod_l+0x33c>
 8006700:	2b49      	cmp	r3, #73	; 0x49
 8006702:	f47f aede 	bne.w	80064c2 <_strtod_l+0xba>
 8006706:	49a0      	ldr	r1, [pc, #640]	; (8006988 <_strtod_l+0x580>)
 8006708:	a81b      	add	r0, sp, #108	; 0x6c
 800670a:	f002 f811 	bl	8008730 <__match>
 800670e:	2800      	cmp	r0, #0
 8006710:	f43f aed7 	beq.w	80064c2 <_strtod_l+0xba>
 8006714:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006716:	499d      	ldr	r1, [pc, #628]	; (800698c <_strtod_l+0x584>)
 8006718:	3b01      	subs	r3, #1
 800671a:	a81b      	add	r0, sp, #108	; 0x6c
 800671c:	931b      	str	r3, [sp, #108]	; 0x6c
 800671e:	f002 f807 	bl	8008730 <__match>
 8006722:	b910      	cbnz	r0, 800672a <_strtod_l+0x322>
 8006724:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006726:	3301      	adds	r3, #1
 8006728:	931b      	str	r3, [sp, #108]	; 0x6c
 800672a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80069a0 <_strtod_l+0x598>
 800672e:	f04f 0a00 	mov.w	sl, #0
 8006732:	e6a8      	b.n	8006486 <_strtod_l+0x7e>
 8006734:	210a      	movs	r1, #10
 8006736:	fb01 3e0e 	mla	lr, r1, lr, r3
 800673a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800673e:	e7b8      	b.n	80066b2 <_strtod_l+0x2aa>
 8006740:	46be      	mov	lr, r7
 8006742:	e7c8      	b.n	80066d6 <_strtod_l+0x2ce>
 8006744:	2b69      	cmp	r3, #105	; 0x69
 8006746:	d0de      	beq.n	8006706 <_strtod_l+0x2fe>
 8006748:	2b6e      	cmp	r3, #110	; 0x6e
 800674a:	f47f aeba 	bne.w	80064c2 <_strtod_l+0xba>
 800674e:	4990      	ldr	r1, [pc, #576]	; (8006990 <_strtod_l+0x588>)
 8006750:	a81b      	add	r0, sp, #108	; 0x6c
 8006752:	f001 ffed 	bl	8008730 <__match>
 8006756:	2800      	cmp	r0, #0
 8006758:	f43f aeb3 	beq.w	80064c2 <_strtod_l+0xba>
 800675c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	2b28      	cmp	r3, #40	; 0x28
 8006762:	d10e      	bne.n	8006782 <_strtod_l+0x37a>
 8006764:	aa1e      	add	r2, sp, #120	; 0x78
 8006766:	498b      	ldr	r1, [pc, #556]	; (8006994 <_strtod_l+0x58c>)
 8006768:	a81b      	add	r0, sp, #108	; 0x6c
 800676a:	f001 fff5 	bl	8008758 <__hexnan>
 800676e:	2805      	cmp	r0, #5
 8006770:	d107      	bne.n	8006782 <_strtod_l+0x37a>
 8006772:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006774:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8006778:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800677c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006780:	e681      	b.n	8006486 <_strtod_l+0x7e>
 8006782:	f8df b224 	ldr.w	fp, [pc, #548]	; 80069a8 <_strtod_l+0x5a0>
 8006786:	e7d2      	b.n	800672e <_strtod_l+0x326>
 8006788:	ebae 0302 	sub.w	r3, lr, r2
 800678c:	9306      	str	r3, [sp, #24]
 800678e:	9b05      	ldr	r3, [sp, #20]
 8006790:	9807      	ldr	r0, [sp, #28]
 8006792:	2b00      	cmp	r3, #0
 8006794:	bf08      	it	eq
 8006796:	4623      	moveq	r3, r4
 8006798:	2c10      	cmp	r4, #16
 800679a:	9305      	str	r3, [sp, #20]
 800679c:	46a0      	mov	r8, r4
 800679e:	bfa8      	it	ge
 80067a0:	f04f 0810 	movge.w	r8, #16
 80067a4:	f7f9 feae 	bl	8000504 <__aeabi_ui2d>
 80067a8:	2c09      	cmp	r4, #9
 80067aa:	4682      	mov	sl, r0
 80067ac:	468b      	mov	fp, r1
 80067ae:	dc13      	bgt.n	80067d8 <_strtod_l+0x3d0>
 80067b0:	9b06      	ldr	r3, [sp, #24]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f43f ae67 	beq.w	8006486 <_strtod_l+0x7e>
 80067b8:	9b06      	ldr	r3, [sp, #24]
 80067ba:	dd7a      	ble.n	80068b2 <_strtod_l+0x4aa>
 80067bc:	2b16      	cmp	r3, #22
 80067be:	dc61      	bgt.n	8006884 <_strtod_l+0x47c>
 80067c0:	4a75      	ldr	r2, [pc, #468]	; (8006998 <_strtod_l+0x590>)
 80067c2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80067c6:	e9de 0100 	ldrd	r0, r1, [lr]
 80067ca:	4652      	mov	r2, sl
 80067cc:	465b      	mov	r3, fp
 80067ce:	f7f9 ff13 	bl	80005f8 <__aeabi_dmul>
 80067d2:	4682      	mov	sl, r0
 80067d4:	468b      	mov	fp, r1
 80067d6:	e656      	b.n	8006486 <_strtod_l+0x7e>
 80067d8:	4b6f      	ldr	r3, [pc, #444]	; (8006998 <_strtod_l+0x590>)
 80067da:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80067de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80067e2:	f7f9 ff09 	bl	80005f8 <__aeabi_dmul>
 80067e6:	4606      	mov	r6, r0
 80067e8:	4628      	mov	r0, r5
 80067ea:	460f      	mov	r7, r1
 80067ec:	f7f9 fe8a 	bl	8000504 <__aeabi_ui2d>
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	4630      	mov	r0, r6
 80067f6:	4639      	mov	r1, r7
 80067f8:	f7f9 fd48 	bl	800028c <__adddf3>
 80067fc:	2c0f      	cmp	r4, #15
 80067fe:	4682      	mov	sl, r0
 8006800:	468b      	mov	fp, r1
 8006802:	ddd5      	ble.n	80067b0 <_strtod_l+0x3a8>
 8006804:	9b06      	ldr	r3, [sp, #24]
 8006806:	eba4 0808 	sub.w	r8, r4, r8
 800680a:	4498      	add	r8, r3
 800680c:	f1b8 0f00 	cmp.w	r8, #0
 8006810:	f340 8096 	ble.w	8006940 <_strtod_l+0x538>
 8006814:	f018 030f 	ands.w	r3, r8, #15
 8006818:	d00a      	beq.n	8006830 <_strtod_l+0x428>
 800681a:	495f      	ldr	r1, [pc, #380]	; (8006998 <_strtod_l+0x590>)
 800681c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006820:	4652      	mov	r2, sl
 8006822:	465b      	mov	r3, fp
 8006824:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006828:	f7f9 fee6 	bl	80005f8 <__aeabi_dmul>
 800682c:	4682      	mov	sl, r0
 800682e:	468b      	mov	fp, r1
 8006830:	f038 080f 	bics.w	r8, r8, #15
 8006834:	d073      	beq.n	800691e <_strtod_l+0x516>
 8006836:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800683a:	dd47      	ble.n	80068cc <_strtod_l+0x4c4>
 800683c:	2400      	movs	r4, #0
 800683e:	46a0      	mov	r8, r4
 8006840:	9407      	str	r4, [sp, #28]
 8006842:	9405      	str	r4, [sp, #20]
 8006844:	2322      	movs	r3, #34	; 0x22
 8006846:	f8df b158 	ldr.w	fp, [pc, #344]	; 80069a0 <_strtod_l+0x598>
 800684a:	f8c9 3000 	str.w	r3, [r9]
 800684e:	f04f 0a00 	mov.w	sl, #0
 8006852:	9b07      	ldr	r3, [sp, #28]
 8006854:	2b00      	cmp	r3, #0
 8006856:	f43f ae16 	beq.w	8006486 <_strtod_l+0x7e>
 800685a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800685c:	4648      	mov	r0, r9
 800685e:	f002 f8d1 	bl	8008a04 <_Bfree>
 8006862:	9905      	ldr	r1, [sp, #20]
 8006864:	4648      	mov	r0, r9
 8006866:	f002 f8cd 	bl	8008a04 <_Bfree>
 800686a:	4641      	mov	r1, r8
 800686c:	4648      	mov	r0, r9
 800686e:	f002 f8c9 	bl	8008a04 <_Bfree>
 8006872:	9907      	ldr	r1, [sp, #28]
 8006874:	4648      	mov	r0, r9
 8006876:	f002 f8c5 	bl	8008a04 <_Bfree>
 800687a:	4621      	mov	r1, r4
 800687c:	4648      	mov	r0, r9
 800687e:	f002 f8c1 	bl	8008a04 <_Bfree>
 8006882:	e600      	b.n	8006486 <_strtod_l+0x7e>
 8006884:	9a06      	ldr	r2, [sp, #24]
 8006886:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800688a:	4293      	cmp	r3, r2
 800688c:	dbba      	blt.n	8006804 <_strtod_l+0x3fc>
 800688e:	4d42      	ldr	r5, [pc, #264]	; (8006998 <_strtod_l+0x590>)
 8006890:	f1c4 040f 	rsb	r4, r4, #15
 8006894:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006898:	4652      	mov	r2, sl
 800689a:	465b      	mov	r3, fp
 800689c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068a0:	f7f9 feaa 	bl	80005f8 <__aeabi_dmul>
 80068a4:	9b06      	ldr	r3, [sp, #24]
 80068a6:	1b1c      	subs	r4, r3, r4
 80068a8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80068ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068b0:	e78d      	b.n	80067ce <_strtod_l+0x3c6>
 80068b2:	f113 0f16 	cmn.w	r3, #22
 80068b6:	dba5      	blt.n	8006804 <_strtod_l+0x3fc>
 80068b8:	4a37      	ldr	r2, [pc, #220]	; (8006998 <_strtod_l+0x590>)
 80068ba:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80068be:	e9d2 2300 	ldrd	r2, r3, [r2]
 80068c2:	4650      	mov	r0, sl
 80068c4:	4659      	mov	r1, fp
 80068c6:	f7f9 ffc1 	bl	800084c <__aeabi_ddiv>
 80068ca:	e782      	b.n	80067d2 <_strtod_l+0x3ca>
 80068cc:	2300      	movs	r3, #0
 80068ce:	4e33      	ldr	r6, [pc, #204]	; (800699c <_strtod_l+0x594>)
 80068d0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80068d4:	4650      	mov	r0, sl
 80068d6:	4659      	mov	r1, fp
 80068d8:	461d      	mov	r5, r3
 80068da:	f1b8 0f01 	cmp.w	r8, #1
 80068de:	dc21      	bgt.n	8006924 <_strtod_l+0x51c>
 80068e0:	b10b      	cbz	r3, 80068e6 <_strtod_l+0x4de>
 80068e2:	4682      	mov	sl, r0
 80068e4:	468b      	mov	fp, r1
 80068e6:	4b2d      	ldr	r3, [pc, #180]	; (800699c <_strtod_l+0x594>)
 80068e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80068ec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80068f0:	4652      	mov	r2, sl
 80068f2:	465b      	mov	r3, fp
 80068f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80068f8:	f7f9 fe7e 	bl	80005f8 <__aeabi_dmul>
 80068fc:	4b28      	ldr	r3, [pc, #160]	; (80069a0 <_strtod_l+0x598>)
 80068fe:	460a      	mov	r2, r1
 8006900:	400b      	ands	r3, r1
 8006902:	4928      	ldr	r1, [pc, #160]	; (80069a4 <_strtod_l+0x59c>)
 8006904:	428b      	cmp	r3, r1
 8006906:	4682      	mov	sl, r0
 8006908:	d898      	bhi.n	800683c <_strtod_l+0x434>
 800690a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800690e:	428b      	cmp	r3, r1
 8006910:	bf86      	itte	hi
 8006912:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80069ac <_strtod_l+0x5a4>
 8006916:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800691a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800691e:	2300      	movs	r3, #0
 8006920:	9304      	str	r3, [sp, #16]
 8006922:	e077      	b.n	8006a14 <_strtod_l+0x60c>
 8006924:	f018 0f01 	tst.w	r8, #1
 8006928:	d006      	beq.n	8006938 <_strtod_l+0x530>
 800692a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800692e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006932:	f7f9 fe61 	bl	80005f8 <__aeabi_dmul>
 8006936:	2301      	movs	r3, #1
 8006938:	3501      	adds	r5, #1
 800693a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800693e:	e7cc      	b.n	80068da <_strtod_l+0x4d2>
 8006940:	d0ed      	beq.n	800691e <_strtod_l+0x516>
 8006942:	f1c8 0800 	rsb	r8, r8, #0
 8006946:	f018 020f 	ands.w	r2, r8, #15
 800694a:	d00a      	beq.n	8006962 <_strtod_l+0x55a>
 800694c:	4b12      	ldr	r3, [pc, #72]	; (8006998 <_strtod_l+0x590>)
 800694e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006952:	4650      	mov	r0, sl
 8006954:	4659      	mov	r1, fp
 8006956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695a:	f7f9 ff77 	bl	800084c <__aeabi_ddiv>
 800695e:	4682      	mov	sl, r0
 8006960:	468b      	mov	fp, r1
 8006962:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006966:	d0da      	beq.n	800691e <_strtod_l+0x516>
 8006968:	f1b8 0f1f 	cmp.w	r8, #31
 800696c:	dd20      	ble.n	80069b0 <_strtod_l+0x5a8>
 800696e:	2400      	movs	r4, #0
 8006970:	46a0      	mov	r8, r4
 8006972:	9407      	str	r4, [sp, #28]
 8006974:	9405      	str	r4, [sp, #20]
 8006976:	2322      	movs	r3, #34	; 0x22
 8006978:	f04f 0a00 	mov.w	sl, #0
 800697c:	f04f 0b00 	mov.w	fp, #0
 8006980:	f8c9 3000 	str.w	r3, [r9]
 8006984:	e765      	b.n	8006852 <_strtod_l+0x44a>
 8006986:	bf00      	nop
 8006988:	08009b01 	.word	0x08009b01
 800698c:	08009b8b 	.word	0x08009b8b
 8006990:	08009b09 	.word	0x08009b09
 8006994:	08009b4c 	.word	0x08009b4c
 8006998:	08009c30 	.word	0x08009c30
 800699c:	08009c08 	.word	0x08009c08
 80069a0:	7ff00000 	.word	0x7ff00000
 80069a4:	7ca00000 	.word	0x7ca00000
 80069a8:	fff80000 	.word	0xfff80000
 80069ac:	7fefffff 	.word	0x7fefffff
 80069b0:	f018 0310 	ands.w	r3, r8, #16
 80069b4:	bf18      	it	ne
 80069b6:	236a      	movne	r3, #106	; 0x6a
 80069b8:	4da0      	ldr	r5, [pc, #640]	; (8006c3c <_strtod_l+0x834>)
 80069ba:	9304      	str	r3, [sp, #16]
 80069bc:	4650      	mov	r0, sl
 80069be:	4659      	mov	r1, fp
 80069c0:	2300      	movs	r3, #0
 80069c2:	f1b8 0f00 	cmp.w	r8, #0
 80069c6:	f300 810a 	bgt.w	8006bde <_strtod_l+0x7d6>
 80069ca:	b10b      	cbz	r3, 80069d0 <_strtod_l+0x5c8>
 80069cc:	4682      	mov	sl, r0
 80069ce:	468b      	mov	fp, r1
 80069d0:	9b04      	ldr	r3, [sp, #16]
 80069d2:	b1bb      	cbz	r3, 8006a04 <_strtod_l+0x5fc>
 80069d4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80069d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80069dc:	2b00      	cmp	r3, #0
 80069de:	4659      	mov	r1, fp
 80069e0:	dd10      	ble.n	8006a04 <_strtod_l+0x5fc>
 80069e2:	2b1f      	cmp	r3, #31
 80069e4:	f340 8107 	ble.w	8006bf6 <_strtod_l+0x7ee>
 80069e8:	2b34      	cmp	r3, #52	; 0x34
 80069ea:	bfde      	ittt	le
 80069ec:	3b20      	suble	r3, #32
 80069ee:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80069f2:	fa02 f303 	lslle.w	r3, r2, r3
 80069f6:	f04f 0a00 	mov.w	sl, #0
 80069fa:	bfcc      	ite	gt
 80069fc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006a00:	ea03 0b01 	andle.w	fp, r3, r1
 8006a04:	2200      	movs	r2, #0
 8006a06:	2300      	movs	r3, #0
 8006a08:	4650      	mov	r0, sl
 8006a0a:	4659      	mov	r1, fp
 8006a0c:	f7fa f85c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a10:	2800      	cmp	r0, #0
 8006a12:	d1ac      	bne.n	800696e <_strtod_l+0x566>
 8006a14:	9b07      	ldr	r3, [sp, #28]
 8006a16:	9300      	str	r3, [sp, #0]
 8006a18:	9a05      	ldr	r2, [sp, #20]
 8006a1a:	9908      	ldr	r1, [sp, #32]
 8006a1c:	4623      	mov	r3, r4
 8006a1e:	4648      	mov	r0, r9
 8006a20:	f002 f842 	bl	8008aa8 <__s2b>
 8006a24:	9007      	str	r0, [sp, #28]
 8006a26:	2800      	cmp	r0, #0
 8006a28:	f43f af08 	beq.w	800683c <_strtod_l+0x434>
 8006a2c:	9a06      	ldr	r2, [sp, #24]
 8006a2e:	9b06      	ldr	r3, [sp, #24]
 8006a30:	2a00      	cmp	r2, #0
 8006a32:	f1c3 0300 	rsb	r3, r3, #0
 8006a36:	bfa8      	it	ge
 8006a38:	2300      	movge	r3, #0
 8006a3a:	930e      	str	r3, [sp, #56]	; 0x38
 8006a3c:	2400      	movs	r4, #0
 8006a3e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006a42:	9316      	str	r3, [sp, #88]	; 0x58
 8006a44:	46a0      	mov	r8, r4
 8006a46:	9b07      	ldr	r3, [sp, #28]
 8006a48:	4648      	mov	r0, r9
 8006a4a:	6859      	ldr	r1, [r3, #4]
 8006a4c:	f001 ffa6 	bl	800899c <_Balloc>
 8006a50:	9005      	str	r0, [sp, #20]
 8006a52:	2800      	cmp	r0, #0
 8006a54:	f43f aef6 	beq.w	8006844 <_strtod_l+0x43c>
 8006a58:	9b07      	ldr	r3, [sp, #28]
 8006a5a:	691a      	ldr	r2, [r3, #16]
 8006a5c:	3202      	adds	r2, #2
 8006a5e:	f103 010c 	add.w	r1, r3, #12
 8006a62:	0092      	lsls	r2, r2, #2
 8006a64:	300c      	adds	r0, #12
 8006a66:	f7fe fdbd 	bl	80055e4 <memcpy>
 8006a6a:	aa1e      	add	r2, sp, #120	; 0x78
 8006a6c:	a91d      	add	r1, sp, #116	; 0x74
 8006a6e:	ec4b ab10 	vmov	d0, sl, fp
 8006a72:	4648      	mov	r0, r9
 8006a74:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006a78:	f002 fad2 	bl	8009020 <__d2b>
 8006a7c:	901c      	str	r0, [sp, #112]	; 0x70
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	f43f aee0 	beq.w	8006844 <_strtod_l+0x43c>
 8006a84:	2101      	movs	r1, #1
 8006a86:	4648      	mov	r0, r9
 8006a88:	f002 f89a 	bl	8008bc0 <__i2b>
 8006a8c:	4680      	mov	r8, r0
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	f43f aed8 	beq.w	8006844 <_strtod_l+0x43c>
 8006a94:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006a96:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006a98:	2e00      	cmp	r6, #0
 8006a9a:	bfab      	itete	ge
 8006a9c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006a9e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006aa0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006aa2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8006aa4:	bfac      	ite	ge
 8006aa6:	18f7      	addge	r7, r6, r3
 8006aa8:	1b9d      	sublt	r5, r3, r6
 8006aaa:	9b04      	ldr	r3, [sp, #16]
 8006aac:	1af6      	subs	r6, r6, r3
 8006aae:	4416      	add	r6, r2
 8006ab0:	4b63      	ldr	r3, [pc, #396]	; (8006c40 <_strtod_l+0x838>)
 8006ab2:	3e01      	subs	r6, #1
 8006ab4:	429e      	cmp	r6, r3
 8006ab6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006aba:	f280 80af 	bge.w	8006c1c <_strtod_l+0x814>
 8006abe:	1b9b      	subs	r3, r3, r6
 8006ac0:	2b1f      	cmp	r3, #31
 8006ac2:	eba2 0203 	sub.w	r2, r2, r3
 8006ac6:	f04f 0101 	mov.w	r1, #1
 8006aca:	f300 809b 	bgt.w	8006c04 <_strtod_l+0x7fc>
 8006ace:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad2:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	930a      	str	r3, [sp, #40]	; 0x28
 8006ad8:	18be      	adds	r6, r7, r2
 8006ada:	9b04      	ldr	r3, [sp, #16]
 8006adc:	42b7      	cmp	r7, r6
 8006ade:	4415      	add	r5, r2
 8006ae0:	441d      	add	r5, r3
 8006ae2:	463b      	mov	r3, r7
 8006ae4:	bfa8      	it	ge
 8006ae6:	4633      	movge	r3, r6
 8006ae8:	42ab      	cmp	r3, r5
 8006aea:	bfa8      	it	ge
 8006aec:	462b      	movge	r3, r5
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	bfc2      	ittt	gt
 8006af2:	1af6      	subgt	r6, r6, r3
 8006af4:	1aed      	subgt	r5, r5, r3
 8006af6:	1aff      	subgt	r7, r7, r3
 8006af8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006afa:	b1bb      	cbz	r3, 8006b2c <_strtod_l+0x724>
 8006afc:	4641      	mov	r1, r8
 8006afe:	461a      	mov	r2, r3
 8006b00:	4648      	mov	r0, r9
 8006b02:	f002 f8fd 	bl	8008d00 <__pow5mult>
 8006b06:	4680      	mov	r8, r0
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	f43f ae9b 	beq.w	8006844 <_strtod_l+0x43c>
 8006b0e:	4601      	mov	r1, r0
 8006b10:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006b12:	4648      	mov	r0, r9
 8006b14:	f002 f85d 	bl	8008bd2 <__multiply>
 8006b18:	900c      	str	r0, [sp, #48]	; 0x30
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	f43f ae92 	beq.w	8006844 <_strtod_l+0x43c>
 8006b20:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006b22:	4648      	mov	r0, r9
 8006b24:	f001 ff6e 	bl	8008a04 <_Bfree>
 8006b28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b2a:	931c      	str	r3, [sp, #112]	; 0x70
 8006b2c:	2e00      	cmp	r6, #0
 8006b2e:	dc7a      	bgt.n	8006c26 <_strtod_l+0x81e>
 8006b30:	9b06      	ldr	r3, [sp, #24]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	dd08      	ble.n	8006b48 <_strtod_l+0x740>
 8006b36:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006b38:	9905      	ldr	r1, [sp, #20]
 8006b3a:	4648      	mov	r0, r9
 8006b3c:	f002 f8e0 	bl	8008d00 <__pow5mult>
 8006b40:	9005      	str	r0, [sp, #20]
 8006b42:	2800      	cmp	r0, #0
 8006b44:	f43f ae7e 	beq.w	8006844 <_strtod_l+0x43c>
 8006b48:	2d00      	cmp	r5, #0
 8006b4a:	dd08      	ble.n	8006b5e <_strtod_l+0x756>
 8006b4c:	462a      	mov	r2, r5
 8006b4e:	9905      	ldr	r1, [sp, #20]
 8006b50:	4648      	mov	r0, r9
 8006b52:	f002 f923 	bl	8008d9c <__lshift>
 8006b56:	9005      	str	r0, [sp, #20]
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	f43f ae73 	beq.w	8006844 <_strtod_l+0x43c>
 8006b5e:	2f00      	cmp	r7, #0
 8006b60:	dd08      	ble.n	8006b74 <_strtod_l+0x76c>
 8006b62:	4641      	mov	r1, r8
 8006b64:	463a      	mov	r2, r7
 8006b66:	4648      	mov	r0, r9
 8006b68:	f002 f918 	bl	8008d9c <__lshift>
 8006b6c:	4680      	mov	r8, r0
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	f43f ae68 	beq.w	8006844 <_strtod_l+0x43c>
 8006b74:	9a05      	ldr	r2, [sp, #20]
 8006b76:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006b78:	4648      	mov	r0, r9
 8006b7a:	f002 f97d 	bl	8008e78 <__mdiff>
 8006b7e:	4604      	mov	r4, r0
 8006b80:	2800      	cmp	r0, #0
 8006b82:	f43f ae5f 	beq.w	8006844 <_strtod_l+0x43c>
 8006b86:	68c3      	ldr	r3, [r0, #12]
 8006b88:	930c      	str	r3, [sp, #48]	; 0x30
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	60c3      	str	r3, [r0, #12]
 8006b8e:	4641      	mov	r1, r8
 8006b90:	f002 f958 	bl	8008e44 <__mcmp>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	da55      	bge.n	8006c44 <_strtod_l+0x83c>
 8006b98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b9a:	b9e3      	cbnz	r3, 8006bd6 <_strtod_l+0x7ce>
 8006b9c:	f1ba 0f00 	cmp.w	sl, #0
 8006ba0:	d119      	bne.n	8006bd6 <_strtod_l+0x7ce>
 8006ba2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ba6:	b9b3      	cbnz	r3, 8006bd6 <_strtod_l+0x7ce>
 8006ba8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006bac:	0d1b      	lsrs	r3, r3, #20
 8006bae:	051b      	lsls	r3, r3, #20
 8006bb0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006bb4:	d90f      	bls.n	8006bd6 <_strtod_l+0x7ce>
 8006bb6:	6963      	ldr	r3, [r4, #20]
 8006bb8:	b913      	cbnz	r3, 8006bc0 <_strtod_l+0x7b8>
 8006bba:	6923      	ldr	r3, [r4, #16]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	dd0a      	ble.n	8006bd6 <_strtod_l+0x7ce>
 8006bc0:	4621      	mov	r1, r4
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	4648      	mov	r0, r9
 8006bc6:	f002 f8e9 	bl	8008d9c <__lshift>
 8006bca:	4641      	mov	r1, r8
 8006bcc:	4604      	mov	r4, r0
 8006bce:	f002 f939 	bl	8008e44 <__mcmp>
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	dc67      	bgt.n	8006ca6 <_strtod_l+0x89e>
 8006bd6:	9b04      	ldr	r3, [sp, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d171      	bne.n	8006cc0 <_strtod_l+0x8b8>
 8006bdc:	e63d      	b.n	800685a <_strtod_l+0x452>
 8006bde:	f018 0f01 	tst.w	r8, #1
 8006be2:	d004      	beq.n	8006bee <_strtod_l+0x7e6>
 8006be4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006be8:	f7f9 fd06 	bl	80005f8 <__aeabi_dmul>
 8006bec:	2301      	movs	r3, #1
 8006bee:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006bf2:	3508      	adds	r5, #8
 8006bf4:	e6e5      	b.n	80069c2 <_strtod_l+0x5ba>
 8006bf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfe:	ea03 0a0a 	and.w	sl, r3, sl
 8006c02:	e6ff      	b.n	8006a04 <_strtod_l+0x5fc>
 8006c04:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006c08:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006c0c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006c10:	36e2      	adds	r6, #226	; 0xe2
 8006c12:	fa01 f306 	lsl.w	r3, r1, r6
 8006c16:	930a      	str	r3, [sp, #40]	; 0x28
 8006c18:	910f      	str	r1, [sp, #60]	; 0x3c
 8006c1a:	e75d      	b.n	8006ad8 <_strtod_l+0x6d0>
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	930a      	str	r3, [sp, #40]	; 0x28
 8006c20:	2301      	movs	r3, #1
 8006c22:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c24:	e758      	b.n	8006ad8 <_strtod_l+0x6d0>
 8006c26:	4632      	mov	r2, r6
 8006c28:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006c2a:	4648      	mov	r0, r9
 8006c2c:	f002 f8b6 	bl	8008d9c <__lshift>
 8006c30:	901c      	str	r0, [sp, #112]	; 0x70
 8006c32:	2800      	cmp	r0, #0
 8006c34:	f47f af7c 	bne.w	8006b30 <_strtod_l+0x728>
 8006c38:	e604      	b.n	8006844 <_strtod_l+0x43c>
 8006c3a:	bf00      	nop
 8006c3c:	08009b60 	.word	0x08009b60
 8006c40:	fffffc02 	.word	0xfffffc02
 8006c44:	465d      	mov	r5, fp
 8006c46:	f040 8086 	bne.w	8006d56 <_strtod_l+0x94e>
 8006c4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c50:	b32a      	cbz	r2, 8006c9e <_strtod_l+0x896>
 8006c52:	4aaf      	ldr	r2, [pc, #700]	; (8006f10 <_strtod_l+0xb08>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d153      	bne.n	8006d00 <_strtod_l+0x8f8>
 8006c58:	9b04      	ldr	r3, [sp, #16]
 8006c5a:	4650      	mov	r0, sl
 8006c5c:	b1d3      	cbz	r3, 8006c94 <_strtod_l+0x88c>
 8006c5e:	4aad      	ldr	r2, [pc, #692]	; (8006f14 <_strtod_l+0xb0c>)
 8006c60:	402a      	ands	r2, r5
 8006c62:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006c66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006c6a:	d816      	bhi.n	8006c9a <_strtod_l+0x892>
 8006c6c:	0d12      	lsrs	r2, r2, #20
 8006c6e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006c72:	fa01 f303 	lsl.w	r3, r1, r3
 8006c76:	4298      	cmp	r0, r3
 8006c78:	d142      	bne.n	8006d00 <_strtod_l+0x8f8>
 8006c7a:	4ba7      	ldr	r3, [pc, #668]	; (8006f18 <_strtod_l+0xb10>)
 8006c7c:	429d      	cmp	r5, r3
 8006c7e:	d102      	bne.n	8006c86 <_strtod_l+0x87e>
 8006c80:	3001      	adds	r0, #1
 8006c82:	f43f addf 	beq.w	8006844 <_strtod_l+0x43c>
 8006c86:	4ba3      	ldr	r3, [pc, #652]	; (8006f14 <_strtod_l+0xb0c>)
 8006c88:	402b      	ands	r3, r5
 8006c8a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006c8e:	f04f 0a00 	mov.w	sl, #0
 8006c92:	e7a0      	b.n	8006bd6 <_strtod_l+0x7ce>
 8006c94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c98:	e7ed      	b.n	8006c76 <_strtod_l+0x86e>
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	e7eb      	b.n	8006c76 <_strtod_l+0x86e>
 8006c9e:	bb7b      	cbnz	r3, 8006d00 <_strtod_l+0x8f8>
 8006ca0:	f1ba 0f00 	cmp.w	sl, #0
 8006ca4:	d12c      	bne.n	8006d00 <_strtod_l+0x8f8>
 8006ca6:	9904      	ldr	r1, [sp, #16]
 8006ca8:	4a9a      	ldr	r2, [pc, #616]	; (8006f14 <_strtod_l+0xb0c>)
 8006caa:	465b      	mov	r3, fp
 8006cac:	b1f1      	cbz	r1, 8006cec <_strtod_l+0x8e4>
 8006cae:	ea02 010b 	and.w	r1, r2, fp
 8006cb2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006cb6:	dc19      	bgt.n	8006cec <_strtod_l+0x8e4>
 8006cb8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006cbc:	f77f ae5b 	ble.w	8006976 <_strtod_l+0x56e>
 8006cc0:	4a96      	ldr	r2, [pc, #600]	; (8006f1c <_strtod_l+0xb14>)
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006cc8:	4650      	mov	r0, sl
 8006cca:	4659      	mov	r1, fp
 8006ccc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006cd0:	f7f9 fc92 	bl	80005f8 <__aeabi_dmul>
 8006cd4:	4682      	mov	sl, r0
 8006cd6:	468b      	mov	fp, r1
 8006cd8:	2900      	cmp	r1, #0
 8006cda:	f47f adbe 	bne.w	800685a <_strtod_l+0x452>
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	f47f adbb 	bne.w	800685a <_strtod_l+0x452>
 8006ce4:	2322      	movs	r3, #34	; 0x22
 8006ce6:	f8c9 3000 	str.w	r3, [r9]
 8006cea:	e5b6      	b.n	800685a <_strtod_l+0x452>
 8006cec:	4013      	ands	r3, r2
 8006cee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006cf2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006cf6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006cfa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006cfe:	e76a      	b.n	8006bd6 <_strtod_l+0x7ce>
 8006d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d02:	b193      	cbz	r3, 8006d2a <_strtod_l+0x922>
 8006d04:	422b      	tst	r3, r5
 8006d06:	f43f af66 	beq.w	8006bd6 <_strtod_l+0x7ce>
 8006d0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d0c:	9a04      	ldr	r2, [sp, #16]
 8006d0e:	4650      	mov	r0, sl
 8006d10:	4659      	mov	r1, fp
 8006d12:	b173      	cbz	r3, 8006d32 <_strtod_l+0x92a>
 8006d14:	f7ff fb5a 	bl	80063cc <sulp>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006d20:	f7f9 fab4 	bl	800028c <__adddf3>
 8006d24:	4682      	mov	sl, r0
 8006d26:	468b      	mov	fp, r1
 8006d28:	e755      	b.n	8006bd6 <_strtod_l+0x7ce>
 8006d2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d2c:	ea13 0f0a 	tst.w	r3, sl
 8006d30:	e7e9      	b.n	8006d06 <_strtod_l+0x8fe>
 8006d32:	f7ff fb4b 	bl	80063cc <sulp>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006d3e:	f7f9 faa3 	bl	8000288 <__aeabi_dsub>
 8006d42:	2200      	movs	r2, #0
 8006d44:	2300      	movs	r3, #0
 8006d46:	4682      	mov	sl, r0
 8006d48:	468b      	mov	fp, r1
 8006d4a:	f7f9 febd 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	f47f ae11 	bne.w	8006976 <_strtod_l+0x56e>
 8006d54:	e73f      	b.n	8006bd6 <_strtod_l+0x7ce>
 8006d56:	4641      	mov	r1, r8
 8006d58:	4620      	mov	r0, r4
 8006d5a:	f002 f9b0 	bl	80090be <__ratio>
 8006d5e:	ec57 6b10 	vmov	r6, r7, d0
 8006d62:	2200      	movs	r2, #0
 8006d64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d68:	ee10 0a10 	vmov	r0, s0
 8006d6c:	4639      	mov	r1, r7
 8006d6e:	f7f9 febf 	bl	8000af0 <__aeabi_dcmple>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	d077      	beq.n	8006e66 <_strtod_l+0xa5e>
 8006d76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d04a      	beq.n	8006e12 <_strtod_l+0xa0a>
 8006d7c:	4b68      	ldr	r3, [pc, #416]	; (8006f20 <_strtod_l+0xb18>)
 8006d7e:	2200      	movs	r2, #0
 8006d80:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006d84:	4f66      	ldr	r7, [pc, #408]	; (8006f20 <_strtod_l+0xb18>)
 8006d86:	2600      	movs	r6, #0
 8006d88:	4b62      	ldr	r3, [pc, #392]	; (8006f14 <_strtod_l+0xb0c>)
 8006d8a:	402b      	ands	r3, r5
 8006d8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d90:	4b64      	ldr	r3, [pc, #400]	; (8006f24 <_strtod_l+0xb1c>)
 8006d92:	429a      	cmp	r2, r3
 8006d94:	f040 80ce 	bne.w	8006f34 <_strtod_l+0xb2c>
 8006d98:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006da0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8006da4:	ec4b ab10 	vmov	d0, sl, fp
 8006da8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006dac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006db0:	f002 f8c0 	bl	8008f34 <__ulp>
 8006db4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006db8:	ec53 2b10 	vmov	r2, r3, d0
 8006dbc:	f7f9 fc1c 	bl	80005f8 <__aeabi_dmul>
 8006dc0:	4652      	mov	r2, sl
 8006dc2:	465b      	mov	r3, fp
 8006dc4:	f7f9 fa62 	bl	800028c <__adddf3>
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4952      	ldr	r1, [pc, #328]	; (8006f14 <_strtod_l+0xb0c>)
 8006dcc:	4a56      	ldr	r2, [pc, #344]	; (8006f28 <_strtod_l+0xb20>)
 8006dce:	4019      	ands	r1, r3
 8006dd0:	4291      	cmp	r1, r2
 8006dd2:	4682      	mov	sl, r0
 8006dd4:	d95b      	bls.n	8006e8e <_strtod_l+0xa86>
 8006dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d103      	bne.n	8006de8 <_strtod_l+0x9e0>
 8006de0:	9b08      	ldr	r3, [sp, #32]
 8006de2:	3301      	adds	r3, #1
 8006de4:	f43f ad2e 	beq.w	8006844 <_strtod_l+0x43c>
 8006de8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8006f18 <_strtod_l+0xb10>
 8006dec:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006df0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006df2:	4648      	mov	r0, r9
 8006df4:	f001 fe06 	bl	8008a04 <_Bfree>
 8006df8:	9905      	ldr	r1, [sp, #20]
 8006dfa:	4648      	mov	r0, r9
 8006dfc:	f001 fe02 	bl	8008a04 <_Bfree>
 8006e00:	4641      	mov	r1, r8
 8006e02:	4648      	mov	r0, r9
 8006e04:	f001 fdfe 	bl	8008a04 <_Bfree>
 8006e08:	4621      	mov	r1, r4
 8006e0a:	4648      	mov	r0, r9
 8006e0c:	f001 fdfa 	bl	8008a04 <_Bfree>
 8006e10:	e619      	b.n	8006a46 <_strtod_l+0x63e>
 8006e12:	f1ba 0f00 	cmp.w	sl, #0
 8006e16:	d11a      	bne.n	8006e4e <_strtod_l+0xa46>
 8006e18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e1c:	b9eb      	cbnz	r3, 8006e5a <_strtod_l+0xa52>
 8006e1e:	2200      	movs	r2, #0
 8006e20:	4b3f      	ldr	r3, [pc, #252]	; (8006f20 <_strtod_l+0xb18>)
 8006e22:	4630      	mov	r0, r6
 8006e24:	4639      	mov	r1, r7
 8006e26:	f7f9 fe59 	bl	8000adc <__aeabi_dcmplt>
 8006e2a:	b9c8      	cbnz	r0, 8006e60 <_strtod_l+0xa58>
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	4639      	mov	r1, r7
 8006e30:	2200      	movs	r2, #0
 8006e32:	4b3e      	ldr	r3, [pc, #248]	; (8006f2c <_strtod_l+0xb24>)
 8006e34:	f7f9 fbe0 	bl	80005f8 <__aeabi_dmul>
 8006e38:	4606      	mov	r6, r0
 8006e3a:	460f      	mov	r7, r1
 8006e3c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006e40:	9618      	str	r6, [sp, #96]	; 0x60
 8006e42:	9319      	str	r3, [sp, #100]	; 0x64
 8006e44:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8006e48:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006e4c:	e79c      	b.n	8006d88 <_strtod_l+0x980>
 8006e4e:	f1ba 0f01 	cmp.w	sl, #1
 8006e52:	d102      	bne.n	8006e5a <_strtod_l+0xa52>
 8006e54:	2d00      	cmp	r5, #0
 8006e56:	f43f ad8e 	beq.w	8006976 <_strtod_l+0x56e>
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	4b34      	ldr	r3, [pc, #208]	; (8006f30 <_strtod_l+0xb28>)
 8006e5e:	e78f      	b.n	8006d80 <_strtod_l+0x978>
 8006e60:	2600      	movs	r6, #0
 8006e62:	4f32      	ldr	r7, [pc, #200]	; (8006f2c <_strtod_l+0xb24>)
 8006e64:	e7ea      	b.n	8006e3c <_strtod_l+0xa34>
 8006e66:	4b31      	ldr	r3, [pc, #196]	; (8006f2c <_strtod_l+0xb24>)
 8006e68:	4630      	mov	r0, r6
 8006e6a:	4639      	mov	r1, r7
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f7f9 fbc3 	bl	80005f8 <__aeabi_dmul>
 8006e72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e74:	4606      	mov	r6, r0
 8006e76:	460f      	mov	r7, r1
 8006e78:	b933      	cbnz	r3, 8006e88 <_strtod_l+0xa80>
 8006e7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e7e:	9010      	str	r0, [sp, #64]	; 0x40
 8006e80:	9311      	str	r3, [sp, #68]	; 0x44
 8006e82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e86:	e7df      	b.n	8006e48 <_strtod_l+0xa40>
 8006e88:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8006e8c:	e7f9      	b.n	8006e82 <_strtod_l+0xa7a>
 8006e8e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006e92:	9b04      	ldr	r3, [sp, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1ab      	bne.n	8006df0 <_strtod_l+0x9e8>
 8006e98:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006e9c:	0d1b      	lsrs	r3, r3, #20
 8006e9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ea0:	051b      	lsls	r3, r3, #20
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	465d      	mov	r5, fp
 8006ea6:	d1a3      	bne.n	8006df0 <_strtod_l+0x9e8>
 8006ea8:	4639      	mov	r1, r7
 8006eaa:	4630      	mov	r0, r6
 8006eac:	f7f9 fe54 	bl	8000b58 <__aeabi_d2iz>
 8006eb0:	f7f9 fb38 	bl	8000524 <__aeabi_i2d>
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	4639      	mov	r1, r7
 8006eba:	4630      	mov	r0, r6
 8006ebc:	f7f9 f9e4 	bl	8000288 <__aeabi_dsub>
 8006ec0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ec2:	4606      	mov	r6, r0
 8006ec4:	460f      	mov	r7, r1
 8006ec6:	b933      	cbnz	r3, 8006ed6 <_strtod_l+0xace>
 8006ec8:	f1ba 0f00 	cmp.w	sl, #0
 8006ecc:	d103      	bne.n	8006ed6 <_strtod_l+0xace>
 8006ece:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8006ed2:	2d00      	cmp	r5, #0
 8006ed4:	d06d      	beq.n	8006fb2 <_strtod_l+0xbaa>
 8006ed6:	a30a      	add	r3, pc, #40	; (adr r3, 8006f00 <_strtod_l+0xaf8>)
 8006ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006edc:	4630      	mov	r0, r6
 8006ede:	4639      	mov	r1, r7
 8006ee0:	f7f9 fdfc 	bl	8000adc <__aeabi_dcmplt>
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	f47f acb8 	bne.w	800685a <_strtod_l+0x452>
 8006eea:	a307      	add	r3, pc, #28	; (adr r3, 8006f08 <_strtod_l+0xb00>)
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	4639      	mov	r1, r7
 8006ef4:	f7f9 fe10 	bl	8000b18 <__aeabi_dcmpgt>
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	f43f af79 	beq.w	8006df0 <_strtod_l+0x9e8>
 8006efe:	e4ac      	b.n	800685a <_strtod_l+0x452>
 8006f00:	94a03595 	.word	0x94a03595
 8006f04:	3fdfffff 	.word	0x3fdfffff
 8006f08:	35afe535 	.word	0x35afe535
 8006f0c:	3fe00000 	.word	0x3fe00000
 8006f10:	000fffff 	.word	0x000fffff
 8006f14:	7ff00000 	.word	0x7ff00000
 8006f18:	7fefffff 	.word	0x7fefffff
 8006f1c:	39500000 	.word	0x39500000
 8006f20:	3ff00000 	.word	0x3ff00000
 8006f24:	7fe00000 	.word	0x7fe00000
 8006f28:	7c9fffff 	.word	0x7c9fffff
 8006f2c:	3fe00000 	.word	0x3fe00000
 8006f30:	bff00000 	.word	0xbff00000
 8006f34:	9b04      	ldr	r3, [sp, #16]
 8006f36:	b333      	cbz	r3, 8006f86 <_strtod_l+0xb7e>
 8006f38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f3a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006f3e:	d822      	bhi.n	8006f86 <_strtod_l+0xb7e>
 8006f40:	a327      	add	r3, pc, #156	; (adr r3, 8006fe0 <_strtod_l+0xbd8>)
 8006f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f46:	4630      	mov	r0, r6
 8006f48:	4639      	mov	r1, r7
 8006f4a:	f7f9 fdd1 	bl	8000af0 <__aeabi_dcmple>
 8006f4e:	b1a0      	cbz	r0, 8006f7a <_strtod_l+0xb72>
 8006f50:	4639      	mov	r1, r7
 8006f52:	4630      	mov	r0, r6
 8006f54:	f7f9 fe28 	bl	8000ba8 <__aeabi_d2uiz>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	bf08      	it	eq
 8006f5c:	2001      	moveq	r0, #1
 8006f5e:	f7f9 fad1 	bl	8000504 <__aeabi_ui2d>
 8006f62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f64:	4606      	mov	r6, r0
 8006f66:	460f      	mov	r7, r1
 8006f68:	bb03      	cbnz	r3, 8006fac <_strtod_l+0xba4>
 8006f6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f6e:	9012      	str	r0, [sp, #72]	; 0x48
 8006f70:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f72:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006f76:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006f7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f7e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006f82:	1a9b      	subs	r3, r3, r2
 8006f84:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f86:	ed9d 0b08 	vldr	d0, [sp, #32]
 8006f8a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8006f8e:	f001 ffd1 	bl	8008f34 <__ulp>
 8006f92:	4650      	mov	r0, sl
 8006f94:	ec53 2b10 	vmov	r2, r3, d0
 8006f98:	4659      	mov	r1, fp
 8006f9a:	f7f9 fb2d 	bl	80005f8 <__aeabi_dmul>
 8006f9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006fa2:	f7f9 f973 	bl	800028c <__adddf3>
 8006fa6:	4682      	mov	sl, r0
 8006fa8:	468b      	mov	fp, r1
 8006faa:	e772      	b.n	8006e92 <_strtod_l+0xa8a>
 8006fac:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8006fb0:	e7df      	b.n	8006f72 <_strtod_l+0xb6a>
 8006fb2:	a30d      	add	r3, pc, #52	; (adr r3, 8006fe8 <_strtod_l+0xbe0>)
 8006fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb8:	f7f9 fd90 	bl	8000adc <__aeabi_dcmplt>
 8006fbc:	e79c      	b.n	8006ef8 <_strtod_l+0xaf0>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	930d      	str	r3, [sp, #52]	; 0x34
 8006fc2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006fc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006fc6:	6013      	str	r3, [r2, #0]
 8006fc8:	f7ff ba61 	b.w	800648e <_strtod_l+0x86>
 8006fcc:	2b65      	cmp	r3, #101	; 0x65
 8006fce:	f04f 0200 	mov.w	r2, #0
 8006fd2:	f43f ab4e 	beq.w	8006672 <_strtod_l+0x26a>
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	4614      	mov	r4, r2
 8006fda:	9104      	str	r1, [sp, #16]
 8006fdc:	f7ff bacb 	b.w	8006576 <_strtod_l+0x16e>
 8006fe0:	ffc00000 	.word	0xffc00000
 8006fe4:	41dfffff 	.word	0x41dfffff
 8006fe8:	94a03595 	.word	0x94a03595
 8006fec:	3fcfffff 	.word	0x3fcfffff

08006ff0 <_strtod_r>:
 8006ff0:	4b05      	ldr	r3, [pc, #20]	; (8007008 <_strtod_r+0x18>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	b410      	push	{r4}
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	4c04      	ldr	r4, [pc, #16]	; (800700c <_strtod_r+0x1c>)
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	bf08      	it	eq
 8006ffe:	4623      	moveq	r3, r4
 8007000:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007004:	f7ff ba00 	b.w	8006408 <_strtod_l>
 8007008:	2000000c 	.word	0x2000000c
 800700c:	20000070 	.word	0x20000070

08007010 <_strtol_l.isra.0>:
 8007010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007014:	4680      	mov	r8, r0
 8007016:	4689      	mov	r9, r1
 8007018:	4692      	mov	sl, r2
 800701a:	461e      	mov	r6, r3
 800701c:	460f      	mov	r7, r1
 800701e:	463d      	mov	r5, r7
 8007020:	9808      	ldr	r0, [sp, #32]
 8007022:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007026:	f001 fc27 	bl	8008878 <__locale_ctype_ptr_l>
 800702a:	4420      	add	r0, r4
 800702c:	7843      	ldrb	r3, [r0, #1]
 800702e:	f013 0308 	ands.w	r3, r3, #8
 8007032:	d132      	bne.n	800709a <_strtol_l.isra.0+0x8a>
 8007034:	2c2d      	cmp	r4, #45	; 0x2d
 8007036:	d132      	bne.n	800709e <_strtol_l.isra.0+0x8e>
 8007038:	787c      	ldrb	r4, [r7, #1]
 800703a:	1cbd      	adds	r5, r7, #2
 800703c:	2201      	movs	r2, #1
 800703e:	2e00      	cmp	r6, #0
 8007040:	d05d      	beq.n	80070fe <_strtol_l.isra.0+0xee>
 8007042:	2e10      	cmp	r6, #16
 8007044:	d109      	bne.n	800705a <_strtol_l.isra.0+0x4a>
 8007046:	2c30      	cmp	r4, #48	; 0x30
 8007048:	d107      	bne.n	800705a <_strtol_l.isra.0+0x4a>
 800704a:	782b      	ldrb	r3, [r5, #0]
 800704c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007050:	2b58      	cmp	r3, #88	; 0x58
 8007052:	d14f      	bne.n	80070f4 <_strtol_l.isra.0+0xe4>
 8007054:	786c      	ldrb	r4, [r5, #1]
 8007056:	2610      	movs	r6, #16
 8007058:	3502      	adds	r5, #2
 800705a:	2a00      	cmp	r2, #0
 800705c:	bf14      	ite	ne
 800705e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007062:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007066:	2700      	movs	r7, #0
 8007068:	fbb1 fcf6 	udiv	ip, r1, r6
 800706c:	4638      	mov	r0, r7
 800706e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007072:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007076:	2b09      	cmp	r3, #9
 8007078:	d817      	bhi.n	80070aa <_strtol_l.isra.0+0x9a>
 800707a:	461c      	mov	r4, r3
 800707c:	42a6      	cmp	r6, r4
 800707e:	dd23      	ble.n	80070c8 <_strtol_l.isra.0+0xb8>
 8007080:	1c7b      	adds	r3, r7, #1
 8007082:	d007      	beq.n	8007094 <_strtol_l.isra.0+0x84>
 8007084:	4584      	cmp	ip, r0
 8007086:	d31c      	bcc.n	80070c2 <_strtol_l.isra.0+0xb2>
 8007088:	d101      	bne.n	800708e <_strtol_l.isra.0+0x7e>
 800708a:	45a6      	cmp	lr, r4
 800708c:	db19      	blt.n	80070c2 <_strtol_l.isra.0+0xb2>
 800708e:	fb00 4006 	mla	r0, r0, r6, r4
 8007092:	2701      	movs	r7, #1
 8007094:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007098:	e7eb      	b.n	8007072 <_strtol_l.isra.0+0x62>
 800709a:	462f      	mov	r7, r5
 800709c:	e7bf      	b.n	800701e <_strtol_l.isra.0+0xe>
 800709e:	2c2b      	cmp	r4, #43	; 0x2b
 80070a0:	bf04      	itt	eq
 80070a2:	1cbd      	addeq	r5, r7, #2
 80070a4:	787c      	ldrbeq	r4, [r7, #1]
 80070a6:	461a      	mov	r2, r3
 80070a8:	e7c9      	b.n	800703e <_strtol_l.isra.0+0x2e>
 80070aa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80070ae:	2b19      	cmp	r3, #25
 80070b0:	d801      	bhi.n	80070b6 <_strtol_l.isra.0+0xa6>
 80070b2:	3c37      	subs	r4, #55	; 0x37
 80070b4:	e7e2      	b.n	800707c <_strtol_l.isra.0+0x6c>
 80070b6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80070ba:	2b19      	cmp	r3, #25
 80070bc:	d804      	bhi.n	80070c8 <_strtol_l.isra.0+0xb8>
 80070be:	3c57      	subs	r4, #87	; 0x57
 80070c0:	e7dc      	b.n	800707c <_strtol_l.isra.0+0x6c>
 80070c2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80070c6:	e7e5      	b.n	8007094 <_strtol_l.isra.0+0x84>
 80070c8:	1c7b      	adds	r3, r7, #1
 80070ca:	d108      	bne.n	80070de <_strtol_l.isra.0+0xce>
 80070cc:	2322      	movs	r3, #34	; 0x22
 80070ce:	f8c8 3000 	str.w	r3, [r8]
 80070d2:	4608      	mov	r0, r1
 80070d4:	f1ba 0f00 	cmp.w	sl, #0
 80070d8:	d107      	bne.n	80070ea <_strtol_l.isra.0+0xda>
 80070da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070de:	b102      	cbz	r2, 80070e2 <_strtol_l.isra.0+0xd2>
 80070e0:	4240      	negs	r0, r0
 80070e2:	f1ba 0f00 	cmp.w	sl, #0
 80070e6:	d0f8      	beq.n	80070da <_strtol_l.isra.0+0xca>
 80070e8:	b10f      	cbz	r7, 80070ee <_strtol_l.isra.0+0xde>
 80070ea:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80070ee:	f8ca 9000 	str.w	r9, [sl]
 80070f2:	e7f2      	b.n	80070da <_strtol_l.isra.0+0xca>
 80070f4:	2430      	movs	r4, #48	; 0x30
 80070f6:	2e00      	cmp	r6, #0
 80070f8:	d1af      	bne.n	800705a <_strtol_l.isra.0+0x4a>
 80070fa:	2608      	movs	r6, #8
 80070fc:	e7ad      	b.n	800705a <_strtol_l.isra.0+0x4a>
 80070fe:	2c30      	cmp	r4, #48	; 0x30
 8007100:	d0a3      	beq.n	800704a <_strtol_l.isra.0+0x3a>
 8007102:	260a      	movs	r6, #10
 8007104:	e7a9      	b.n	800705a <_strtol_l.isra.0+0x4a>
	...

08007108 <_strtol_r>:
 8007108:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800710a:	4c06      	ldr	r4, [pc, #24]	; (8007124 <_strtol_r+0x1c>)
 800710c:	4d06      	ldr	r5, [pc, #24]	; (8007128 <_strtol_r+0x20>)
 800710e:	6824      	ldr	r4, [r4, #0]
 8007110:	6a24      	ldr	r4, [r4, #32]
 8007112:	2c00      	cmp	r4, #0
 8007114:	bf08      	it	eq
 8007116:	462c      	moveq	r4, r5
 8007118:	9400      	str	r4, [sp, #0]
 800711a:	f7ff ff79 	bl	8007010 <_strtol_l.isra.0>
 800711e:	b003      	add	sp, #12
 8007120:	bd30      	pop	{r4, r5, pc}
 8007122:	bf00      	nop
 8007124:	2000000c 	.word	0x2000000c
 8007128:	20000070 	.word	0x20000070

0800712c <__swbuf_r>:
 800712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712e:	460e      	mov	r6, r1
 8007130:	4614      	mov	r4, r2
 8007132:	4605      	mov	r5, r0
 8007134:	b118      	cbz	r0, 800713e <__swbuf_r+0x12>
 8007136:	6983      	ldr	r3, [r0, #24]
 8007138:	b90b      	cbnz	r3, 800713e <__swbuf_r+0x12>
 800713a:	f000 ffed 	bl	8008118 <__sinit>
 800713e:	4b21      	ldr	r3, [pc, #132]	; (80071c4 <__swbuf_r+0x98>)
 8007140:	429c      	cmp	r4, r3
 8007142:	d12a      	bne.n	800719a <__swbuf_r+0x6e>
 8007144:	686c      	ldr	r4, [r5, #4]
 8007146:	69a3      	ldr	r3, [r4, #24]
 8007148:	60a3      	str	r3, [r4, #8]
 800714a:	89a3      	ldrh	r3, [r4, #12]
 800714c:	071a      	lsls	r2, r3, #28
 800714e:	d52e      	bpl.n	80071ae <__swbuf_r+0x82>
 8007150:	6923      	ldr	r3, [r4, #16]
 8007152:	b363      	cbz	r3, 80071ae <__swbuf_r+0x82>
 8007154:	6923      	ldr	r3, [r4, #16]
 8007156:	6820      	ldr	r0, [r4, #0]
 8007158:	1ac0      	subs	r0, r0, r3
 800715a:	6963      	ldr	r3, [r4, #20]
 800715c:	b2f6      	uxtb	r6, r6
 800715e:	4283      	cmp	r3, r0
 8007160:	4637      	mov	r7, r6
 8007162:	dc04      	bgt.n	800716e <__swbuf_r+0x42>
 8007164:	4621      	mov	r1, r4
 8007166:	4628      	mov	r0, r5
 8007168:	f000 ff6c 	bl	8008044 <_fflush_r>
 800716c:	bb28      	cbnz	r0, 80071ba <__swbuf_r+0x8e>
 800716e:	68a3      	ldr	r3, [r4, #8]
 8007170:	3b01      	subs	r3, #1
 8007172:	60a3      	str	r3, [r4, #8]
 8007174:	6823      	ldr	r3, [r4, #0]
 8007176:	1c5a      	adds	r2, r3, #1
 8007178:	6022      	str	r2, [r4, #0]
 800717a:	701e      	strb	r6, [r3, #0]
 800717c:	6963      	ldr	r3, [r4, #20]
 800717e:	3001      	adds	r0, #1
 8007180:	4283      	cmp	r3, r0
 8007182:	d004      	beq.n	800718e <__swbuf_r+0x62>
 8007184:	89a3      	ldrh	r3, [r4, #12]
 8007186:	07db      	lsls	r3, r3, #31
 8007188:	d519      	bpl.n	80071be <__swbuf_r+0x92>
 800718a:	2e0a      	cmp	r6, #10
 800718c:	d117      	bne.n	80071be <__swbuf_r+0x92>
 800718e:	4621      	mov	r1, r4
 8007190:	4628      	mov	r0, r5
 8007192:	f000 ff57 	bl	8008044 <_fflush_r>
 8007196:	b190      	cbz	r0, 80071be <__swbuf_r+0x92>
 8007198:	e00f      	b.n	80071ba <__swbuf_r+0x8e>
 800719a:	4b0b      	ldr	r3, [pc, #44]	; (80071c8 <__swbuf_r+0x9c>)
 800719c:	429c      	cmp	r4, r3
 800719e:	d101      	bne.n	80071a4 <__swbuf_r+0x78>
 80071a0:	68ac      	ldr	r4, [r5, #8]
 80071a2:	e7d0      	b.n	8007146 <__swbuf_r+0x1a>
 80071a4:	4b09      	ldr	r3, [pc, #36]	; (80071cc <__swbuf_r+0xa0>)
 80071a6:	429c      	cmp	r4, r3
 80071a8:	bf08      	it	eq
 80071aa:	68ec      	ldreq	r4, [r5, #12]
 80071ac:	e7cb      	b.n	8007146 <__swbuf_r+0x1a>
 80071ae:	4621      	mov	r1, r4
 80071b0:	4628      	mov	r0, r5
 80071b2:	f000 f80d 	bl	80071d0 <__swsetup_r>
 80071b6:	2800      	cmp	r0, #0
 80071b8:	d0cc      	beq.n	8007154 <__swbuf_r+0x28>
 80071ba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80071be:	4638      	mov	r0, r7
 80071c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071c2:	bf00      	nop
 80071c4:	08009bb8 	.word	0x08009bb8
 80071c8:	08009bd8 	.word	0x08009bd8
 80071cc:	08009b98 	.word	0x08009b98

080071d0 <__swsetup_r>:
 80071d0:	4b32      	ldr	r3, [pc, #200]	; (800729c <__swsetup_r+0xcc>)
 80071d2:	b570      	push	{r4, r5, r6, lr}
 80071d4:	681d      	ldr	r5, [r3, #0]
 80071d6:	4606      	mov	r6, r0
 80071d8:	460c      	mov	r4, r1
 80071da:	b125      	cbz	r5, 80071e6 <__swsetup_r+0x16>
 80071dc:	69ab      	ldr	r3, [r5, #24]
 80071de:	b913      	cbnz	r3, 80071e6 <__swsetup_r+0x16>
 80071e0:	4628      	mov	r0, r5
 80071e2:	f000 ff99 	bl	8008118 <__sinit>
 80071e6:	4b2e      	ldr	r3, [pc, #184]	; (80072a0 <__swsetup_r+0xd0>)
 80071e8:	429c      	cmp	r4, r3
 80071ea:	d10f      	bne.n	800720c <__swsetup_r+0x3c>
 80071ec:	686c      	ldr	r4, [r5, #4]
 80071ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	0715      	lsls	r5, r2, #28
 80071f6:	d42c      	bmi.n	8007252 <__swsetup_r+0x82>
 80071f8:	06d0      	lsls	r0, r2, #27
 80071fa:	d411      	bmi.n	8007220 <__swsetup_r+0x50>
 80071fc:	2209      	movs	r2, #9
 80071fe:	6032      	str	r2, [r6, #0]
 8007200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007204:	81a3      	strh	r3, [r4, #12]
 8007206:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800720a:	e03e      	b.n	800728a <__swsetup_r+0xba>
 800720c:	4b25      	ldr	r3, [pc, #148]	; (80072a4 <__swsetup_r+0xd4>)
 800720e:	429c      	cmp	r4, r3
 8007210:	d101      	bne.n	8007216 <__swsetup_r+0x46>
 8007212:	68ac      	ldr	r4, [r5, #8]
 8007214:	e7eb      	b.n	80071ee <__swsetup_r+0x1e>
 8007216:	4b24      	ldr	r3, [pc, #144]	; (80072a8 <__swsetup_r+0xd8>)
 8007218:	429c      	cmp	r4, r3
 800721a:	bf08      	it	eq
 800721c:	68ec      	ldreq	r4, [r5, #12]
 800721e:	e7e6      	b.n	80071ee <__swsetup_r+0x1e>
 8007220:	0751      	lsls	r1, r2, #29
 8007222:	d512      	bpl.n	800724a <__swsetup_r+0x7a>
 8007224:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007226:	b141      	cbz	r1, 800723a <__swsetup_r+0x6a>
 8007228:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800722c:	4299      	cmp	r1, r3
 800722e:	d002      	beq.n	8007236 <__swsetup_r+0x66>
 8007230:	4630      	mov	r0, r6
 8007232:	f001 ffc1 	bl	80091b8 <_free_r>
 8007236:	2300      	movs	r3, #0
 8007238:	6363      	str	r3, [r4, #52]	; 0x34
 800723a:	89a3      	ldrh	r3, [r4, #12]
 800723c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007240:	81a3      	strh	r3, [r4, #12]
 8007242:	2300      	movs	r3, #0
 8007244:	6063      	str	r3, [r4, #4]
 8007246:	6923      	ldr	r3, [r4, #16]
 8007248:	6023      	str	r3, [r4, #0]
 800724a:	89a3      	ldrh	r3, [r4, #12]
 800724c:	f043 0308 	orr.w	r3, r3, #8
 8007250:	81a3      	strh	r3, [r4, #12]
 8007252:	6923      	ldr	r3, [r4, #16]
 8007254:	b94b      	cbnz	r3, 800726a <__swsetup_r+0x9a>
 8007256:	89a3      	ldrh	r3, [r4, #12]
 8007258:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800725c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007260:	d003      	beq.n	800726a <__swsetup_r+0x9a>
 8007262:	4621      	mov	r1, r4
 8007264:	4630      	mov	r0, r6
 8007266:	f001 fb3f 	bl	80088e8 <__smakebuf_r>
 800726a:	89a2      	ldrh	r2, [r4, #12]
 800726c:	f012 0301 	ands.w	r3, r2, #1
 8007270:	d00c      	beq.n	800728c <__swsetup_r+0xbc>
 8007272:	2300      	movs	r3, #0
 8007274:	60a3      	str	r3, [r4, #8]
 8007276:	6963      	ldr	r3, [r4, #20]
 8007278:	425b      	negs	r3, r3
 800727a:	61a3      	str	r3, [r4, #24]
 800727c:	6923      	ldr	r3, [r4, #16]
 800727e:	b953      	cbnz	r3, 8007296 <__swsetup_r+0xc6>
 8007280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007284:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007288:	d1ba      	bne.n	8007200 <__swsetup_r+0x30>
 800728a:	bd70      	pop	{r4, r5, r6, pc}
 800728c:	0792      	lsls	r2, r2, #30
 800728e:	bf58      	it	pl
 8007290:	6963      	ldrpl	r3, [r4, #20]
 8007292:	60a3      	str	r3, [r4, #8]
 8007294:	e7f2      	b.n	800727c <__swsetup_r+0xac>
 8007296:	2000      	movs	r0, #0
 8007298:	e7f7      	b.n	800728a <__swsetup_r+0xba>
 800729a:	bf00      	nop
 800729c:	2000000c 	.word	0x2000000c
 80072a0:	08009bb8 	.word	0x08009bb8
 80072a4:	08009bd8 	.word	0x08009bd8
 80072a8:	08009b98 	.word	0x08009b98

080072ac <quorem>:
 80072ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b0:	6903      	ldr	r3, [r0, #16]
 80072b2:	690c      	ldr	r4, [r1, #16]
 80072b4:	42a3      	cmp	r3, r4
 80072b6:	4680      	mov	r8, r0
 80072b8:	f2c0 8082 	blt.w	80073c0 <quorem+0x114>
 80072bc:	3c01      	subs	r4, #1
 80072be:	f101 0714 	add.w	r7, r1, #20
 80072c2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80072c6:	f100 0614 	add.w	r6, r0, #20
 80072ca:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80072ce:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80072d2:	eb06 030c 	add.w	r3, r6, ip
 80072d6:	3501      	adds	r5, #1
 80072d8:	eb07 090c 	add.w	r9, r7, ip
 80072dc:	9301      	str	r3, [sp, #4]
 80072de:	fbb0 f5f5 	udiv	r5, r0, r5
 80072e2:	b395      	cbz	r5, 800734a <quorem+0x9e>
 80072e4:	f04f 0a00 	mov.w	sl, #0
 80072e8:	4638      	mov	r0, r7
 80072ea:	46b6      	mov	lr, r6
 80072ec:	46d3      	mov	fp, sl
 80072ee:	f850 2b04 	ldr.w	r2, [r0], #4
 80072f2:	b293      	uxth	r3, r2
 80072f4:	fb05 a303 	mla	r3, r5, r3, sl
 80072f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	ebab 0303 	sub.w	r3, fp, r3
 8007302:	0c12      	lsrs	r2, r2, #16
 8007304:	f8de b000 	ldr.w	fp, [lr]
 8007308:	fb05 a202 	mla	r2, r5, r2, sl
 800730c:	fa13 f38b 	uxtah	r3, r3, fp
 8007310:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007314:	fa1f fb82 	uxth.w	fp, r2
 8007318:	f8de 2000 	ldr.w	r2, [lr]
 800731c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007320:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007324:	b29b      	uxth	r3, r3
 8007326:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800732a:	4581      	cmp	r9, r0
 800732c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007330:	f84e 3b04 	str.w	r3, [lr], #4
 8007334:	d2db      	bcs.n	80072ee <quorem+0x42>
 8007336:	f856 300c 	ldr.w	r3, [r6, ip]
 800733a:	b933      	cbnz	r3, 800734a <quorem+0x9e>
 800733c:	9b01      	ldr	r3, [sp, #4]
 800733e:	3b04      	subs	r3, #4
 8007340:	429e      	cmp	r6, r3
 8007342:	461a      	mov	r2, r3
 8007344:	d330      	bcc.n	80073a8 <quorem+0xfc>
 8007346:	f8c8 4010 	str.w	r4, [r8, #16]
 800734a:	4640      	mov	r0, r8
 800734c:	f001 fd7a 	bl	8008e44 <__mcmp>
 8007350:	2800      	cmp	r0, #0
 8007352:	db25      	blt.n	80073a0 <quorem+0xf4>
 8007354:	3501      	adds	r5, #1
 8007356:	4630      	mov	r0, r6
 8007358:	f04f 0c00 	mov.w	ip, #0
 800735c:	f857 2b04 	ldr.w	r2, [r7], #4
 8007360:	f8d0 e000 	ldr.w	lr, [r0]
 8007364:	b293      	uxth	r3, r2
 8007366:	ebac 0303 	sub.w	r3, ip, r3
 800736a:	0c12      	lsrs	r2, r2, #16
 800736c:	fa13 f38e 	uxtah	r3, r3, lr
 8007370:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007374:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007378:	b29b      	uxth	r3, r3
 800737a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800737e:	45b9      	cmp	r9, r7
 8007380:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007384:	f840 3b04 	str.w	r3, [r0], #4
 8007388:	d2e8      	bcs.n	800735c <quorem+0xb0>
 800738a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800738e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007392:	b92a      	cbnz	r2, 80073a0 <quorem+0xf4>
 8007394:	3b04      	subs	r3, #4
 8007396:	429e      	cmp	r6, r3
 8007398:	461a      	mov	r2, r3
 800739a:	d30b      	bcc.n	80073b4 <quorem+0x108>
 800739c:	f8c8 4010 	str.w	r4, [r8, #16]
 80073a0:	4628      	mov	r0, r5
 80073a2:	b003      	add	sp, #12
 80073a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a8:	6812      	ldr	r2, [r2, #0]
 80073aa:	3b04      	subs	r3, #4
 80073ac:	2a00      	cmp	r2, #0
 80073ae:	d1ca      	bne.n	8007346 <quorem+0x9a>
 80073b0:	3c01      	subs	r4, #1
 80073b2:	e7c5      	b.n	8007340 <quorem+0x94>
 80073b4:	6812      	ldr	r2, [r2, #0]
 80073b6:	3b04      	subs	r3, #4
 80073b8:	2a00      	cmp	r2, #0
 80073ba:	d1ef      	bne.n	800739c <quorem+0xf0>
 80073bc:	3c01      	subs	r4, #1
 80073be:	e7ea      	b.n	8007396 <quorem+0xea>
 80073c0:	2000      	movs	r0, #0
 80073c2:	e7ee      	b.n	80073a2 <quorem+0xf6>
 80073c4:	0000      	movs	r0, r0
	...

080073c8 <_dtoa_r>:
 80073c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073cc:	ec57 6b10 	vmov	r6, r7, d0
 80073d0:	b097      	sub	sp, #92	; 0x5c
 80073d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80073d4:	9106      	str	r1, [sp, #24]
 80073d6:	4604      	mov	r4, r0
 80073d8:	920b      	str	r2, [sp, #44]	; 0x2c
 80073da:	9312      	str	r3, [sp, #72]	; 0x48
 80073dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80073e0:	e9cd 6700 	strd	r6, r7, [sp]
 80073e4:	b93d      	cbnz	r5, 80073f6 <_dtoa_r+0x2e>
 80073e6:	2010      	movs	r0, #16
 80073e8:	f001 fabe 	bl	8008968 <malloc>
 80073ec:	6260      	str	r0, [r4, #36]	; 0x24
 80073ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80073f2:	6005      	str	r5, [r0, #0]
 80073f4:	60c5      	str	r5, [r0, #12]
 80073f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073f8:	6819      	ldr	r1, [r3, #0]
 80073fa:	b151      	cbz	r1, 8007412 <_dtoa_r+0x4a>
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	604a      	str	r2, [r1, #4]
 8007400:	2301      	movs	r3, #1
 8007402:	4093      	lsls	r3, r2
 8007404:	608b      	str	r3, [r1, #8]
 8007406:	4620      	mov	r0, r4
 8007408:	f001 fafc 	bl	8008a04 <_Bfree>
 800740c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800740e:	2200      	movs	r2, #0
 8007410:	601a      	str	r2, [r3, #0]
 8007412:	1e3b      	subs	r3, r7, #0
 8007414:	bfbb      	ittet	lt
 8007416:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800741a:	9301      	strlt	r3, [sp, #4]
 800741c:	2300      	movge	r3, #0
 800741e:	2201      	movlt	r2, #1
 8007420:	bfac      	ite	ge
 8007422:	f8c8 3000 	strge.w	r3, [r8]
 8007426:	f8c8 2000 	strlt.w	r2, [r8]
 800742a:	4baf      	ldr	r3, [pc, #700]	; (80076e8 <_dtoa_r+0x320>)
 800742c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007430:	ea33 0308 	bics.w	r3, r3, r8
 8007434:	d114      	bne.n	8007460 <_dtoa_r+0x98>
 8007436:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007438:	f242 730f 	movw	r3, #9999	; 0x270f
 800743c:	6013      	str	r3, [r2, #0]
 800743e:	9b00      	ldr	r3, [sp, #0]
 8007440:	b923      	cbnz	r3, 800744c <_dtoa_r+0x84>
 8007442:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007446:	2800      	cmp	r0, #0
 8007448:	f000 8542 	beq.w	8007ed0 <_dtoa_r+0xb08>
 800744c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800744e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80076fc <_dtoa_r+0x334>
 8007452:	2b00      	cmp	r3, #0
 8007454:	f000 8544 	beq.w	8007ee0 <_dtoa_r+0xb18>
 8007458:	f10b 0303 	add.w	r3, fp, #3
 800745c:	f000 bd3e 	b.w	8007edc <_dtoa_r+0xb14>
 8007460:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007464:	2200      	movs	r2, #0
 8007466:	2300      	movs	r3, #0
 8007468:	4630      	mov	r0, r6
 800746a:	4639      	mov	r1, r7
 800746c:	f7f9 fb2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007470:	4681      	mov	r9, r0
 8007472:	b168      	cbz	r0, 8007490 <_dtoa_r+0xc8>
 8007474:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007476:	2301      	movs	r3, #1
 8007478:	6013      	str	r3, [r2, #0]
 800747a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 8524 	beq.w	8007eca <_dtoa_r+0xb02>
 8007482:	4b9a      	ldr	r3, [pc, #616]	; (80076ec <_dtoa_r+0x324>)
 8007484:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007486:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800748a:	6013      	str	r3, [r2, #0]
 800748c:	f000 bd28 	b.w	8007ee0 <_dtoa_r+0xb18>
 8007490:	aa14      	add	r2, sp, #80	; 0x50
 8007492:	a915      	add	r1, sp, #84	; 0x54
 8007494:	ec47 6b10 	vmov	d0, r6, r7
 8007498:	4620      	mov	r0, r4
 800749a:	f001 fdc1 	bl	8009020 <__d2b>
 800749e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80074a2:	9004      	str	r0, [sp, #16]
 80074a4:	2d00      	cmp	r5, #0
 80074a6:	d07c      	beq.n	80075a2 <_dtoa_r+0x1da>
 80074a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80074ac:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80074b0:	46b2      	mov	sl, r6
 80074b2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80074b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80074ba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80074be:	2200      	movs	r2, #0
 80074c0:	4b8b      	ldr	r3, [pc, #556]	; (80076f0 <_dtoa_r+0x328>)
 80074c2:	4650      	mov	r0, sl
 80074c4:	4659      	mov	r1, fp
 80074c6:	f7f8 fedf 	bl	8000288 <__aeabi_dsub>
 80074ca:	a381      	add	r3, pc, #516	; (adr r3, 80076d0 <_dtoa_r+0x308>)
 80074cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d0:	f7f9 f892 	bl	80005f8 <__aeabi_dmul>
 80074d4:	a380      	add	r3, pc, #512	; (adr r3, 80076d8 <_dtoa_r+0x310>)
 80074d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074da:	f7f8 fed7 	bl	800028c <__adddf3>
 80074de:	4606      	mov	r6, r0
 80074e0:	4628      	mov	r0, r5
 80074e2:	460f      	mov	r7, r1
 80074e4:	f7f9 f81e 	bl	8000524 <__aeabi_i2d>
 80074e8:	a37d      	add	r3, pc, #500	; (adr r3, 80076e0 <_dtoa_r+0x318>)
 80074ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ee:	f7f9 f883 	bl	80005f8 <__aeabi_dmul>
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	4630      	mov	r0, r6
 80074f8:	4639      	mov	r1, r7
 80074fa:	f7f8 fec7 	bl	800028c <__adddf3>
 80074fe:	4606      	mov	r6, r0
 8007500:	460f      	mov	r7, r1
 8007502:	f7f9 fb29 	bl	8000b58 <__aeabi_d2iz>
 8007506:	2200      	movs	r2, #0
 8007508:	4682      	mov	sl, r0
 800750a:	2300      	movs	r3, #0
 800750c:	4630      	mov	r0, r6
 800750e:	4639      	mov	r1, r7
 8007510:	f7f9 fae4 	bl	8000adc <__aeabi_dcmplt>
 8007514:	b148      	cbz	r0, 800752a <_dtoa_r+0x162>
 8007516:	4650      	mov	r0, sl
 8007518:	f7f9 f804 	bl	8000524 <__aeabi_i2d>
 800751c:	4632      	mov	r2, r6
 800751e:	463b      	mov	r3, r7
 8007520:	f7f9 fad2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007524:	b908      	cbnz	r0, 800752a <_dtoa_r+0x162>
 8007526:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800752a:	f1ba 0f16 	cmp.w	sl, #22
 800752e:	d859      	bhi.n	80075e4 <_dtoa_r+0x21c>
 8007530:	4970      	ldr	r1, [pc, #448]	; (80076f4 <_dtoa_r+0x32c>)
 8007532:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007536:	e9dd 2300 	ldrd	r2, r3, [sp]
 800753a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800753e:	f7f9 faeb 	bl	8000b18 <__aeabi_dcmpgt>
 8007542:	2800      	cmp	r0, #0
 8007544:	d050      	beq.n	80075e8 <_dtoa_r+0x220>
 8007546:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800754a:	2300      	movs	r3, #0
 800754c:	930f      	str	r3, [sp, #60]	; 0x3c
 800754e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007550:	1b5d      	subs	r5, r3, r5
 8007552:	f1b5 0801 	subs.w	r8, r5, #1
 8007556:	bf49      	itett	mi
 8007558:	f1c5 0301 	rsbmi	r3, r5, #1
 800755c:	2300      	movpl	r3, #0
 800755e:	9305      	strmi	r3, [sp, #20]
 8007560:	f04f 0800 	movmi.w	r8, #0
 8007564:	bf58      	it	pl
 8007566:	9305      	strpl	r3, [sp, #20]
 8007568:	f1ba 0f00 	cmp.w	sl, #0
 800756c:	db3e      	blt.n	80075ec <_dtoa_r+0x224>
 800756e:	2300      	movs	r3, #0
 8007570:	44d0      	add	r8, sl
 8007572:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007576:	9307      	str	r3, [sp, #28]
 8007578:	9b06      	ldr	r3, [sp, #24]
 800757a:	2b09      	cmp	r3, #9
 800757c:	f200 8090 	bhi.w	80076a0 <_dtoa_r+0x2d8>
 8007580:	2b05      	cmp	r3, #5
 8007582:	bfc4      	itt	gt
 8007584:	3b04      	subgt	r3, #4
 8007586:	9306      	strgt	r3, [sp, #24]
 8007588:	9b06      	ldr	r3, [sp, #24]
 800758a:	f1a3 0302 	sub.w	r3, r3, #2
 800758e:	bfcc      	ite	gt
 8007590:	2500      	movgt	r5, #0
 8007592:	2501      	movle	r5, #1
 8007594:	2b03      	cmp	r3, #3
 8007596:	f200 808f 	bhi.w	80076b8 <_dtoa_r+0x2f0>
 800759a:	e8df f003 	tbb	[pc, r3]
 800759e:	7f7d      	.short	0x7f7d
 80075a0:	7131      	.short	0x7131
 80075a2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80075a6:	441d      	add	r5, r3
 80075a8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80075ac:	2820      	cmp	r0, #32
 80075ae:	dd13      	ble.n	80075d8 <_dtoa_r+0x210>
 80075b0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80075b4:	9b00      	ldr	r3, [sp, #0]
 80075b6:	fa08 f800 	lsl.w	r8, r8, r0
 80075ba:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80075be:	fa23 f000 	lsr.w	r0, r3, r0
 80075c2:	ea48 0000 	orr.w	r0, r8, r0
 80075c6:	f7f8 ff9d 	bl	8000504 <__aeabi_ui2d>
 80075ca:	2301      	movs	r3, #1
 80075cc:	4682      	mov	sl, r0
 80075ce:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80075d2:	3d01      	subs	r5, #1
 80075d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80075d6:	e772      	b.n	80074be <_dtoa_r+0xf6>
 80075d8:	9b00      	ldr	r3, [sp, #0]
 80075da:	f1c0 0020 	rsb	r0, r0, #32
 80075de:	fa03 f000 	lsl.w	r0, r3, r0
 80075e2:	e7f0      	b.n	80075c6 <_dtoa_r+0x1fe>
 80075e4:	2301      	movs	r3, #1
 80075e6:	e7b1      	b.n	800754c <_dtoa_r+0x184>
 80075e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80075ea:	e7b0      	b.n	800754e <_dtoa_r+0x186>
 80075ec:	9b05      	ldr	r3, [sp, #20]
 80075ee:	eba3 030a 	sub.w	r3, r3, sl
 80075f2:	9305      	str	r3, [sp, #20]
 80075f4:	f1ca 0300 	rsb	r3, sl, #0
 80075f8:	9307      	str	r3, [sp, #28]
 80075fa:	2300      	movs	r3, #0
 80075fc:	930e      	str	r3, [sp, #56]	; 0x38
 80075fe:	e7bb      	b.n	8007578 <_dtoa_r+0x1b0>
 8007600:	2301      	movs	r3, #1
 8007602:	930a      	str	r3, [sp, #40]	; 0x28
 8007604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007606:	2b00      	cmp	r3, #0
 8007608:	dd59      	ble.n	80076be <_dtoa_r+0x2f6>
 800760a:	9302      	str	r3, [sp, #8]
 800760c:	4699      	mov	r9, r3
 800760e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007610:	2200      	movs	r2, #0
 8007612:	6072      	str	r2, [r6, #4]
 8007614:	2204      	movs	r2, #4
 8007616:	f102 0014 	add.w	r0, r2, #20
 800761a:	4298      	cmp	r0, r3
 800761c:	6871      	ldr	r1, [r6, #4]
 800761e:	d953      	bls.n	80076c8 <_dtoa_r+0x300>
 8007620:	4620      	mov	r0, r4
 8007622:	f001 f9bb 	bl	800899c <_Balloc>
 8007626:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007628:	6030      	str	r0, [r6, #0]
 800762a:	f1b9 0f0e 	cmp.w	r9, #14
 800762e:	f8d3 b000 	ldr.w	fp, [r3]
 8007632:	f200 80e6 	bhi.w	8007802 <_dtoa_r+0x43a>
 8007636:	2d00      	cmp	r5, #0
 8007638:	f000 80e3 	beq.w	8007802 <_dtoa_r+0x43a>
 800763c:	ed9d 7b00 	vldr	d7, [sp]
 8007640:	f1ba 0f00 	cmp.w	sl, #0
 8007644:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007648:	dd74      	ble.n	8007734 <_dtoa_r+0x36c>
 800764a:	4a2a      	ldr	r2, [pc, #168]	; (80076f4 <_dtoa_r+0x32c>)
 800764c:	f00a 030f 	and.w	r3, sl, #15
 8007650:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007654:	ed93 7b00 	vldr	d7, [r3]
 8007658:	ea4f 162a 	mov.w	r6, sl, asr #4
 800765c:	06f0      	lsls	r0, r6, #27
 800765e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007662:	d565      	bpl.n	8007730 <_dtoa_r+0x368>
 8007664:	4b24      	ldr	r3, [pc, #144]	; (80076f8 <_dtoa_r+0x330>)
 8007666:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800766a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800766e:	f7f9 f8ed 	bl	800084c <__aeabi_ddiv>
 8007672:	e9cd 0100 	strd	r0, r1, [sp]
 8007676:	f006 060f 	and.w	r6, r6, #15
 800767a:	2503      	movs	r5, #3
 800767c:	4f1e      	ldr	r7, [pc, #120]	; (80076f8 <_dtoa_r+0x330>)
 800767e:	e04c      	b.n	800771a <_dtoa_r+0x352>
 8007680:	2301      	movs	r3, #1
 8007682:	930a      	str	r3, [sp, #40]	; 0x28
 8007684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007686:	4453      	add	r3, sl
 8007688:	f103 0901 	add.w	r9, r3, #1
 800768c:	9302      	str	r3, [sp, #8]
 800768e:	464b      	mov	r3, r9
 8007690:	2b01      	cmp	r3, #1
 8007692:	bfb8      	it	lt
 8007694:	2301      	movlt	r3, #1
 8007696:	e7ba      	b.n	800760e <_dtoa_r+0x246>
 8007698:	2300      	movs	r3, #0
 800769a:	e7b2      	b.n	8007602 <_dtoa_r+0x23a>
 800769c:	2300      	movs	r3, #0
 800769e:	e7f0      	b.n	8007682 <_dtoa_r+0x2ba>
 80076a0:	2501      	movs	r5, #1
 80076a2:	2300      	movs	r3, #0
 80076a4:	9306      	str	r3, [sp, #24]
 80076a6:	950a      	str	r5, [sp, #40]	; 0x28
 80076a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076ac:	9302      	str	r3, [sp, #8]
 80076ae:	4699      	mov	r9, r3
 80076b0:	2200      	movs	r2, #0
 80076b2:	2312      	movs	r3, #18
 80076b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80076b6:	e7aa      	b.n	800760e <_dtoa_r+0x246>
 80076b8:	2301      	movs	r3, #1
 80076ba:	930a      	str	r3, [sp, #40]	; 0x28
 80076bc:	e7f4      	b.n	80076a8 <_dtoa_r+0x2e0>
 80076be:	2301      	movs	r3, #1
 80076c0:	9302      	str	r3, [sp, #8]
 80076c2:	4699      	mov	r9, r3
 80076c4:	461a      	mov	r2, r3
 80076c6:	e7f5      	b.n	80076b4 <_dtoa_r+0x2ec>
 80076c8:	3101      	adds	r1, #1
 80076ca:	6071      	str	r1, [r6, #4]
 80076cc:	0052      	lsls	r2, r2, #1
 80076ce:	e7a2      	b.n	8007616 <_dtoa_r+0x24e>
 80076d0:	636f4361 	.word	0x636f4361
 80076d4:	3fd287a7 	.word	0x3fd287a7
 80076d8:	8b60c8b3 	.word	0x8b60c8b3
 80076dc:	3fc68a28 	.word	0x3fc68a28
 80076e0:	509f79fb 	.word	0x509f79fb
 80076e4:	3fd34413 	.word	0x3fd34413
 80076e8:	7ff00000 	.word	0x7ff00000
 80076ec:	08009b0d 	.word	0x08009b0d
 80076f0:	3ff80000 	.word	0x3ff80000
 80076f4:	08009c30 	.word	0x08009c30
 80076f8:	08009c08 	.word	0x08009c08
 80076fc:	08009b91 	.word	0x08009b91
 8007700:	07f1      	lsls	r1, r6, #31
 8007702:	d508      	bpl.n	8007716 <_dtoa_r+0x34e>
 8007704:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007708:	e9d7 2300 	ldrd	r2, r3, [r7]
 800770c:	f7f8 ff74 	bl	80005f8 <__aeabi_dmul>
 8007710:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007714:	3501      	adds	r5, #1
 8007716:	1076      	asrs	r6, r6, #1
 8007718:	3708      	adds	r7, #8
 800771a:	2e00      	cmp	r6, #0
 800771c:	d1f0      	bne.n	8007700 <_dtoa_r+0x338>
 800771e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007722:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007726:	f7f9 f891 	bl	800084c <__aeabi_ddiv>
 800772a:	e9cd 0100 	strd	r0, r1, [sp]
 800772e:	e01a      	b.n	8007766 <_dtoa_r+0x39e>
 8007730:	2502      	movs	r5, #2
 8007732:	e7a3      	b.n	800767c <_dtoa_r+0x2b4>
 8007734:	f000 80a0 	beq.w	8007878 <_dtoa_r+0x4b0>
 8007738:	f1ca 0600 	rsb	r6, sl, #0
 800773c:	4b9f      	ldr	r3, [pc, #636]	; (80079bc <_dtoa_r+0x5f4>)
 800773e:	4fa0      	ldr	r7, [pc, #640]	; (80079c0 <_dtoa_r+0x5f8>)
 8007740:	f006 020f 	and.w	r2, r6, #15
 8007744:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007750:	f7f8 ff52 	bl	80005f8 <__aeabi_dmul>
 8007754:	e9cd 0100 	strd	r0, r1, [sp]
 8007758:	1136      	asrs	r6, r6, #4
 800775a:	2300      	movs	r3, #0
 800775c:	2502      	movs	r5, #2
 800775e:	2e00      	cmp	r6, #0
 8007760:	d17f      	bne.n	8007862 <_dtoa_r+0x49a>
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1e1      	bne.n	800772a <_dtoa_r+0x362>
 8007766:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 8087 	beq.w	800787c <_dtoa_r+0x4b4>
 800776e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007772:	2200      	movs	r2, #0
 8007774:	4b93      	ldr	r3, [pc, #588]	; (80079c4 <_dtoa_r+0x5fc>)
 8007776:	4630      	mov	r0, r6
 8007778:	4639      	mov	r1, r7
 800777a:	f7f9 f9af 	bl	8000adc <__aeabi_dcmplt>
 800777e:	2800      	cmp	r0, #0
 8007780:	d07c      	beq.n	800787c <_dtoa_r+0x4b4>
 8007782:	f1b9 0f00 	cmp.w	r9, #0
 8007786:	d079      	beq.n	800787c <_dtoa_r+0x4b4>
 8007788:	9b02      	ldr	r3, [sp, #8]
 800778a:	2b00      	cmp	r3, #0
 800778c:	dd35      	ble.n	80077fa <_dtoa_r+0x432>
 800778e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007792:	9308      	str	r3, [sp, #32]
 8007794:	4639      	mov	r1, r7
 8007796:	2200      	movs	r2, #0
 8007798:	4b8b      	ldr	r3, [pc, #556]	; (80079c8 <_dtoa_r+0x600>)
 800779a:	4630      	mov	r0, r6
 800779c:	f7f8 ff2c 	bl	80005f8 <__aeabi_dmul>
 80077a0:	e9cd 0100 	strd	r0, r1, [sp]
 80077a4:	9f02      	ldr	r7, [sp, #8]
 80077a6:	3501      	adds	r5, #1
 80077a8:	4628      	mov	r0, r5
 80077aa:	f7f8 febb 	bl	8000524 <__aeabi_i2d>
 80077ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077b2:	f7f8 ff21 	bl	80005f8 <__aeabi_dmul>
 80077b6:	2200      	movs	r2, #0
 80077b8:	4b84      	ldr	r3, [pc, #528]	; (80079cc <_dtoa_r+0x604>)
 80077ba:	f7f8 fd67 	bl	800028c <__adddf3>
 80077be:	4605      	mov	r5, r0
 80077c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80077c4:	2f00      	cmp	r7, #0
 80077c6:	d15d      	bne.n	8007884 <_dtoa_r+0x4bc>
 80077c8:	2200      	movs	r2, #0
 80077ca:	4b81      	ldr	r3, [pc, #516]	; (80079d0 <_dtoa_r+0x608>)
 80077cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077d0:	f7f8 fd5a 	bl	8000288 <__aeabi_dsub>
 80077d4:	462a      	mov	r2, r5
 80077d6:	4633      	mov	r3, r6
 80077d8:	e9cd 0100 	strd	r0, r1, [sp]
 80077dc:	f7f9 f99c 	bl	8000b18 <__aeabi_dcmpgt>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	f040 8288 	bne.w	8007cf6 <_dtoa_r+0x92e>
 80077e6:	462a      	mov	r2, r5
 80077e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80077ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077f0:	f7f9 f974 	bl	8000adc <__aeabi_dcmplt>
 80077f4:	2800      	cmp	r0, #0
 80077f6:	f040 827c 	bne.w	8007cf2 <_dtoa_r+0x92a>
 80077fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80077fe:	e9cd 2300 	strd	r2, r3, [sp]
 8007802:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007804:	2b00      	cmp	r3, #0
 8007806:	f2c0 8150 	blt.w	8007aaa <_dtoa_r+0x6e2>
 800780a:	f1ba 0f0e 	cmp.w	sl, #14
 800780e:	f300 814c 	bgt.w	8007aaa <_dtoa_r+0x6e2>
 8007812:	4b6a      	ldr	r3, [pc, #424]	; (80079bc <_dtoa_r+0x5f4>)
 8007814:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007818:	ed93 7b00 	vldr	d7, [r3]
 800781c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800781e:	2b00      	cmp	r3, #0
 8007820:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007824:	f280 80d8 	bge.w	80079d8 <_dtoa_r+0x610>
 8007828:	f1b9 0f00 	cmp.w	r9, #0
 800782c:	f300 80d4 	bgt.w	80079d8 <_dtoa_r+0x610>
 8007830:	f040 825e 	bne.w	8007cf0 <_dtoa_r+0x928>
 8007834:	2200      	movs	r2, #0
 8007836:	4b66      	ldr	r3, [pc, #408]	; (80079d0 <_dtoa_r+0x608>)
 8007838:	ec51 0b17 	vmov	r0, r1, d7
 800783c:	f7f8 fedc 	bl	80005f8 <__aeabi_dmul>
 8007840:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007844:	f7f9 f95e 	bl	8000b04 <__aeabi_dcmpge>
 8007848:	464f      	mov	r7, r9
 800784a:	464e      	mov	r6, r9
 800784c:	2800      	cmp	r0, #0
 800784e:	f040 8234 	bne.w	8007cba <_dtoa_r+0x8f2>
 8007852:	2331      	movs	r3, #49	; 0x31
 8007854:	f10b 0501 	add.w	r5, fp, #1
 8007858:	f88b 3000 	strb.w	r3, [fp]
 800785c:	f10a 0a01 	add.w	sl, sl, #1
 8007860:	e22f      	b.n	8007cc2 <_dtoa_r+0x8fa>
 8007862:	07f2      	lsls	r2, r6, #31
 8007864:	d505      	bpl.n	8007872 <_dtoa_r+0x4aa>
 8007866:	e9d7 2300 	ldrd	r2, r3, [r7]
 800786a:	f7f8 fec5 	bl	80005f8 <__aeabi_dmul>
 800786e:	3501      	adds	r5, #1
 8007870:	2301      	movs	r3, #1
 8007872:	1076      	asrs	r6, r6, #1
 8007874:	3708      	adds	r7, #8
 8007876:	e772      	b.n	800775e <_dtoa_r+0x396>
 8007878:	2502      	movs	r5, #2
 800787a:	e774      	b.n	8007766 <_dtoa_r+0x39e>
 800787c:	f8cd a020 	str.w	sl, [sp, #32]
 8007880:	464f      	mov	r7, r9
 8007882:	e791      	b.n	80077a8 <_dtoa_r+0x3e0>
 8007884:	4b4d      	ldr	r3, [pc, #308]	; (80079bc <_dtoa_r+0x5f4>)
 8007886:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800788a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800788e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007890:	2b00      	cmp	r3, #0
 8007892:	d047      	beq.n	8007924 <_dtoa_r+0x55c>
 8007894:	4602      	mov	r2, r0
 8007896:	460b      	mov	r3, r1
 8007898:	2000      	movs	r0, #0
 800789a:	494e      	ldr	r1, [pc, #312]	; (80079d4 <_dtoa_r+0x60c>)
 800789c:	f7f8 ffd6 	bl	800084c <__aeabi_ddiv>
 80078a0:	462a      	mov	r2, r5
 80078a2:	4633      	mov	r3, r6
 80078a4:	f7f8 fcf0 	bl	8000288 <__aeabi_dsub>
 80078a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80078ac:	465d      	mov	r5, fp
 80078ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078b2:	f7f9 f951 	bl	8000b58 <__aeabi_d2iz>
 80078b6:	4606      	mov	r6, r0
 80078b8:	f7f8 fe34 	bl	8000524 <__aeabi_i2d>
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078c4:	f7f8 fce0 	bl	8000288 <__aeabi_dsub>
 80078c8:	3630      	adds	r6, #48	; 0x30
 80078ca:	f805 6b01 	strb.w	r6, [r5], #1
 80078ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80078d2:	e9cd 0100 	strd	r0, r1, [sp]
 80078d6:	f7f9 f901 	bl	8000adc <__aeabi_dcmplt>
 80078da:	2800      	cmp	r0, #0
 80078dc:	d163      	bne.n	80079a6 <_dtoa_r+0x5de>
 80078de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078e2:	2000      	movs	r0, #0
 80078e4:	4937      	ldr	r1, [pc, #220]	; (80079c4 <_dtoa_r+0x5fc>)
 80078e6:	f7f8 fccf 	bl	8000288 <__aeabi_dsub>
 80078ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80078ee:	f7f9 f8f5 	bl	8000adc <__aeabi_dcmplt>
 80078f2:	2800      	cmp	r0, #0
 80078f4:	f040 80b7 	bne.w	8007a66 <_dtoa_r+0x69e>
 80078f8:	eba5 030b 	sub.w	r3, r5, fp
 80078fc:	429f      	cmp	r7, r3
 80078fe:	f77f af7c 	ble.w	80077fa <_dtoa_r+0x432>
 8007902:	2200      	movs	r2, #0
 8007904:	4b30      	ldr	r3, [pc, #192]	; (80079c8 <_dtoa_r+0x600>)
 8007906:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800790a:	f7f8 fe75 	bl	80005f8 <__aeabi_dmul>
 800790e:	2200      	movs	r2, #0
 8007910:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007914:	4b2c      	ldr	r3, [pc, #176]	; (80079c8 <_dtoa_r+0x600>)
 8007916:	e9dd 0100 	ldrd	r0, r1, [sp]
 800791a:	f7f8 fe6d 	bl	80005f8 <__aeabi_dmul>
 800791e:	e9cd 0100 	strd	r0, r1, [sp]
 8007922:	e7c4      	b.n	80078ae <_dtoa_r+0x4e6>
 8007924:	462a      	mov	r2, r5
 8007926:	4633      	mov	r3, r6
 8007928:	f7f8 fe66 	bl	80005f8 <__aeabi_dmul>
 800792c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007930:	eb0b 0507 	add.w	r5, fp, r7
 8007934:	465e      	mov	r6, fp
 8007936:	e9dd 0100 	ldrd	r0, r1, [sp]
 800793a:	f7f9 f90d 	bl	8000b58 <__aeabi_d2iz>
 800793e:	4607      	mov	r7, r0
 8007940:	f7f8 fdf0 	bl	8000524 <__aeabi_i2d>
 8007944:	3730      	adds	r7, #48	; 0x30
 8007946:	4602      	mov	r2, r0
 8007948:	460b      	mov	r3, r1
 800794a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800794e:	f7f8 fc9b 	bl	8000288 <__aeabi_dsub>
 8007952:	f806 7b01 	strb.w	r7, [r6], #1
 8007956:	42ae      	cmp	r6, r5
 8007958:	e9cd 0100 	strd	r0, r1, [sp]
 800795c:	f04f 0200 	mov.w	r2, #0
 8007960:	d126      	bne.n	80079b0 <_dtoa_r+0x5e8>
 8007962:	4b1c      	ldr	r3, [pc, #112]	; (80079d4 <_dtoa_r+0x60c>)
 8007964:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007968:	f7f8 fc90 	bl	800028c <__adddf3>
 800796c:	4602      	mov	r2, r0
 800796e:	460b      	mov	r3, r1
 8007970:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007974:	f7f9 f8d0 	bl	8000b18 <__aeabi_dcmpgt>
 8007978:	2800      	cmp	r0, #0
 800797a:	d174      	bne.n	8007a66 <_dtoa_r+0x69e>
 800797c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007980:	2000      	movs	r0, #0
 8007982:	4914      	ldr	r1, [pc, #80]	; (80079d4 <_dtoa_r+0x60c>)
 8007984:	f7f8 fc80 	bl	8000288 <__aeabi_dsub>
 8007988:	4602      	mov	r2, r0
 800798a:	460b      	mov	r3, r1
 800798c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007990:	f7f9 f8a4 	bl	8000adc <__aeabi_dcmplt>
 8007994:	2800      	cmp	r0, #0
 8007996:	f43f af30 	beq.w	80077fa <_dtoa_r+0x432>
 800799a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800799e:	2b30      	cmp	r3, #48	; 0x30
 80079a0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80079a4:	d002      	beq.n	80079ac <_dtoa_r+0x5e4>
 80079a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80079aa:	e04a      	b.n	8007a42 <_dtoa_r+0x67a>
 80079ac:	4615      	mov	r5, r2
 80079ae:	e7f4      	b.n	800799a <_dtoa_r+0x5d2>
 80079b0:	4b05      	ldr	r3, [pc, #20]	; (80079c8 <_dtoa_r+0x600>)
 80079b2:	f7f8 fe21 	bl	80005f8 <__aeabi_dmul>
 80079b6:	e9cd 0100 	strd	r0, r1, [sp]
 80079ba:	e7bc      	b.n	8007936 <_dtoa_r+0x56e>
 80079bc:	08009c30 	.word	0x08009c30
 80079c0:	08009c08 	.word	0x08009c08
 80079c4:	3ff00000 	.word	0x3ff00000
 80079c8:	40240000 	.word	0x40240000
 80079cc:	401c0000 	.word	0x401c0000
 80079d0:	40140000 	.word	0x40140000
 80079d4:	3fe00000 	.word	0x3fe00000
 80079d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80079dc:	465d      	mov	r5, fp
 80079de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079e2:	4630      	mov	r0, r6
 80079e4:	4639      	mov	r1, r7
 80079e6:	f7f8 ff31 	bl	800084c <__aeabi_ddiv>
 80079ea:	f7f9 f8b5 	bl	8000b58 <__aeabi_d2iz>
 80079ee:	4680      	mov	r8, r0
 80079f0:	f7f8 fd98 	bl	8000524 <__aeabi_i2d>
 80079f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079f8:	f7f8 fdfe 	bl	80005f8 <__aeabi_dmul>
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	4630      	mov	r0, r6
 8007a02:	4639      	mov	r1, r7
 8007a04:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007a08:	f7f8 fc3e 	bl	8000288 <__aeabi_dsub>
 8007a0c:	f805 6b01 	strb.w	r6, [r5], #1
 8007a10:	eba5 060b 	sub.w	r6, r5, fp
 8007a14:	45b1      	cmp	r9, r6
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	d139      	bne.n	8007a90 <_dtoa_r+0x6c8>
 8007a1c:	f7f8 fc36 	bl	800028c <__adddf3>
 8007a20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a24:	4606      	mov	r6, r0
 8007a26:	460f      	mov	r7, r1
 8007a28:	f7f9 f876 	bl	8000b18 <__aeabi_dcmpgt>
 8007a2c:	b9c8      	cbnz	r0, 8007a62 <_dtoa_r+0x69a>
 8007a2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a32:	4630      	mov	r0, r6
 8007a34:	4639      	mov	r1, r7
 8007a36:	f7f9 f847 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a3a:	b110      	cbz	r0, 8007a42 <_dtoa_r+0x67a>
 8007a3c:	f018 0f01 	tst.w	r8, #1
 8007a40:	d10f      	bne.n	8007a62 <_dtoa_r+0x69a>
 8007a42:	9904      	ldr	r1, [sp, #16]
 8007a44:	4620      	mov	r0, r4
 8007a46:	f000 ffdd 	bl	8008a04 <_Bfree>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007a4e:	702b      	strb	r3, [r5, #0]
 8007a50:	f10a 0301 	add.w	r3, sl, #1
 8007a54:	6013      	str	r3, [r2, #0]
 8007a56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f000 8241 	beq.w	8007ee0 <_dtoa_r+0xb18>
 8007a5e:	601d      	str	r5, [r3, #0]
 8007a60:	e23e      	b.n	8007ee0 <_dtoa_r+0xb18>
 8007a62:	f8cd a020 	str.w	sl, [sp, #32]
 8007a66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a6a:	2a39      	cmp	r2, #57	; 0x39
 8007a6c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8007a70:	d108      	bne.n	8007a84 <_dtoa_r+0x6bc>
 8007a72:	459b      	cmp	fp, r3
 8007a74:	d10a      	bne.n	8007a8c <_dtoa_r+0x6c4>
 8007a76:	9b08      	ldr	r3, [sp, #32]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	9308      	str	r3, [sp, #32]
 8007a7c:	2330      	movs	r3, #48	; 0x30
 8007a7e:	f88b 3000 	strb.w	r3, [fp]
 8007a82:	465b      	mov	r3, fp
 8007a84:	781a      	ldrb	r2, [r3, #0]
 8007a86:	3201      	adds	r2, #1
 8007a88:	701a      	strb	r2, [r3, #0]
 8007a8a:	e78c      	b.n	80079a6 <_dtoa_r+0x5de>
 8007a8c:	461d      	mov	r5, r3
 8007a8e:	e7ea      	b.n	8007a66 <_dtoa_r+0x69e>
 8007a90:	2200      	movs	r2, #0
 8007a92:	4b9b      	ldr	r3, [pc, #620]	; (8007d00 <_dtoa_r+0x938>)
 8007a94:	f7f8 fdb0 	bl	80005f8 <__aeabi_dmul>
 8007a98:	2200      	movs	r2, #0
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	4606      	mov	r6, r0
 8007a9e:	460f      	mov	r7, r1
 8007aa0:	f7f9 f812 	bl	8000ac8 <__aeabi_dcmpeq>
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	d09a      	beq.n	80079de <_dtoa_r+0x616>
 8007aa8:	e7cb      	b.n	8007a42 <_dtoa_r+0x67a>
 8007aaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007aac:	2a00      	cmp	r2, #0
 8007aae:	f000 808b 	beq.w	8007bc8 <_dtoa_r+0x800>
 8007ab2:	9a06      	ldr	r2, [sp, #24]
 8007ab4:	2a01      	cmp	r2, #1
 8007ab6:	dc6e      	bgt.n	8007b96 <_dtoa_r+0x7ce>
 8007ab8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007aba:	2a00      	cmp	r2, #0
 8007abc:	d067      	beq.n	8007b8e <_dtoa_r+0x7c6>
 8007abe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ac2:	9f07      	ldr	r7, [sp, #28]
 8007ac4:	9d05      	ldr	r5, [sp, #20]
 8007ac6:	9a05      	ldr	r2, [sp, #20]
 8007ac8:	2101      	movs	r1, #1
 8007aca:	441a      	add	r2, r3
 8007acc:	4620      	mov	r0, r4
 8007ace:	9205      	str	r2, [sp, #20]
 8007ad0:	4498      	add	r8, r3
 8007ad2:	f001 f875 	bl	8008bc0 <__i2b>
 8007ad6:	4606      	mov	r6, r0
 8007ad8:	2d00      	cmp	r5, #0
 8007ada:	dd0c      	ble.n	8007af6 <_dtoa_r+0x72e>
 8007adc:	f1b8 0f00 	cmp.w	r8, #0
 8007ae0:	dd09      	ble.n	8007af6 <_dtoa_r+0x72e>
 8007ae2:	4545      	cmp	r5, r8
 8007ae4:	9a05      	ldr	r2, [sp, #20]
 8007ae6:	462b      	mov	r3, r5
 8007ae8:	bfa8      	it	ge
 8007aea:	4643      	movge	r3, r8
 8007aec:	1ad2      	subs	r2, r2, r3
 8007aee:	9205      	str	r2, [sp, #20]
 8007af0:	1aed      	subs	r5, r5, r3
 8007af2:	eba8 0803 	sub.w	r8, r8, r3
 8007af6:	9b07      	ldr	r3, [sp, #28]
 8007af8:	b1eb      	cbz	r3, 8007b36 <_dtoa_r+0x76e>
 8007afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d067      	beq.n	8007bd0 <_dtoa_r+0x808>
 8007b00:	b18f      	cbz	r7, 8007b26 <_dtoa_r+0x75e>
 8007b02:	4631      	mov	r1, r6
 8007b04:	463a      	mov	r2, r7
 8007b06:	4620      	mov	r0, r4
 8007b08:	f001 f8fa 	bl	8008d00 <__pow5mult>
 8007b0c:	9a04      	ldr	r2, [sp, #16]
 8007b0e:	4601      	mov	r1, r0
 8007b10:	4606      	mov	r6, r0
 8007b12:	4620      	mov	r0, r4
 8007b14:	f001 f85d 	bl	8008bd2 <__multiply>
 8007b18:	9904      	ldr	r1, [sp, #16]
 8007b1a:	9008      	str	r0, [sp, #32]
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	f000 ff71 	bl	8008a04 <_Bfree>
 8007b22:	9b08      	ldr	r3, [sp, #32]
 8007b24:	9304      	str	r3, [sp, #16]
 8007b26:	9b07      	ldr	r3, [sp, #28]
 8007b28:	1bda      	subs	r2, r3, r7
 8007b2a:	d004      	beq.n	8007b36 <_dtoa_r+0x76e>
 8007b2c:	9904      	ldr	r1, [sp, #16]
 8007b2e:	4620      	mov	r0, r4
 8007b30:	f001 f8e6 	bl	8008d00 <__pow5mult>
 8007b34:	9004      	str	r0, [sp, #16]
 8007b36:	2101      	movs	r1, #1
 8007b38:	4620      	mov	r0, r4
 8007b3a:	f001 f841 	bl	8008bc0 <__i2b>
 8007b3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b40:	4607      	mov	r7, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f000 81d0 	beq.w	8007ee8 <_dtoa_r+0xb20>
 8007b48:	461a      	mov	r2, r3
 8007b4a:	4601      	mov	r1, r0
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f001 f8d7 	bl	8008d00 <__pow5mult>
 8007b52:	9b06      	ldr	r3, [sp, #24]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	4607      	mov	r7, r0
 8007b58:	dc40      	bgt.n	8007bdc <_dtoa_r+0x814>
 8007b5a:	9b00      	ldr	r3, [sp, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d139      	bne.n	8007bd4 <_dtoa_r+0x80c>
 8007b60:	9b01      	ldr	r3, [sp, #4]
 8007b62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d136      	bne.n	8007bd8 <_dtoa_r+0x810>
 8007b6a:	9b01      	ldr	r3, [sp, #4]
 8007b6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b70:	0d1b      	lsrs	r3, r3, #20
 8007b72:	051b      	lsls	r3, r3, #20
 8007b74:	b12b      	cbz	r3, 8007b82 <_dtoa_r+0x7ba>
 8007b76:	9b05      	ldr	r3, [sp, #20]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	9305      	str	r3, [sp, #20]
 8007b7c:	f108 0801 	add.w	r8, r8, #1
 8007b80:	2301      	movs	r3, #1
 8007b82:	9307      	str	r3, [sp, #28]
 8007b84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d12a      	bne.n	8007be0 <_dtoa_r+0x818>
 8007b8a:	2001      	movs	r0, #1
 8007b8c:	e030      	b.n	8007bf0 <_dtoa_r+0x828>
 8007b8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b90:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007b94:	e795      	b.n	8007ac2 <_dtoa_r+0x6fa>
 8007b96:	9b07      	ldr	r3, [sp, #28]
 8007b98:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8007b9c:	42bb      	cmp	r3, r7
 8007b9e:	bfbf      	itttt	lt
 8007ba0:	9b07      	ldrlt	r3, [sp, #28]
 8007ba2:	9707      	strlt	r7, [sp, #28]
 8007ba4:	1afa      	sublt	r2, r7, r3
 8007ba6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007ba8:	bfbb      	ittet	lt
 8007baa:	189b      	addlt	r3, r3, r2
 8007bac:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007bae:	1bdf      	subge	r7, r3, r7
 8007bb0:	2700      	movlt	r7, #0
 8007bb2:	f1b9 0f00 	cmp.w	r9, #0
 8007bb6:	bfb5      	itete	lt
 8007bb8:	9b05      	ldrlt	r3, [sp, #20]
 8007bba:	9d05      	ldrge	r5, [sp, #20]
 8007bbc:	eba3 0509 	sublt.w	r5, r3, r9
 8007bc0:	464b      	movge	r3, r9
 8007bc2:	bfb8      	it	lt
 8007bc4:	2300      	movlt	r3, #0
 8007bc6:	e77e      	b.n	8007ac6 <_dtoa_r+0x6fe>
 8007bc8:	9f07      	ldr	r7, [sp, #28]
 8007bca:	9d05      	ldr	r5, [sp, #20]
 8007bcc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007bce:	e783      	b.n	8007ad8 <_dtoa_r+0x710>
 8007bd0:	9a07      	ldr	r2, [sp, #28]
 8007bd2:	e7ab      	b.n	8007b2c <_dtoa_r+0x764>
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	e7d4      	b.n	8007b82 <_dtoa_r+0x7ba>
 8007bd8:	9b00      	ldr	r3, [sp, #0]
 8007bda:	e7d2      	b.n	8007b82 <_dtoa_r+0x7ba>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	9307      	str	r3, [sp, #28]
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007be6:	6918      	ldr	r0, [r3, #16]
 8007be8:	f000 ff9c 	bl	8008b24 <__hi0bits>
 8007bec:	f1c0 0020 	rsb	r0, r0, #32
 8007bf0:	4440      	add	r0, r8
 8007bf2:	f010 001f 	ands.w	r0, r0, #31
 8007bf6:	d047      	beq.n	8007c88 <_dtoa_r+0x8c0>
 8007bf8:	f1c0 0320 	rsb	r3, r0, #32
 8007bfc:	2b04      	cmp	r3, #4
 8007bfe:	dd3b      	ble.n	8007c78 <_dtoa_r+0x8b0>
 8007c00:	9b05      	ldr	r3, [sp, #20]
 8007c02:	f1c0 001c 	rsb	r0, r0, #28
 8007c06:	4403      	add	r3, r0
 8007c08:	9305      	str	r3, [sp, #20]
 8007c0a:	4405      	add	r5, r0
 8007c0c:	4480      	add	r8, r0
 8007c0e:	9b05      	ldr	r3, [sp, #20]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	dd05      	ble.n	8007c20 <_dtoa_r+0x858>
 8007c14:	461a      	mov	r2, r3
 8007c16:	9904      	ldr	r1, [sp, #16]
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f001 f8bf 	bl	8008d9c <__lshift>
 8007c1e:	9004      	str	r0, [sp, #16]
 8007c20:	f1b8 0f00 	cmp.w	r8, #0
 8007c24:	dd05      	ble.n	8007c32 <_dtoa_r+0x86a>
 8007c26:	4639      	mov	r1, r7
 8007c28:	4642      	mov	r2, r8
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f001 f8b6 	bl	8008d9c <__lshift>
 8007c30:	4607      	mov	r7, r0
 8007c32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c34:	b353      	cbz	r3, 8007c8c <_dtoa_r+0x8c4>
 8007c36:	4639      	mov	r1, r7
 8007c38:	9804      	ldr	r0, [sp, #16]
 8007c3a:	f001 f903 	bl	8008e44 <__mcmp>
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	da24      	bge.n	8007c8c <_dtoa_r+0x8c4>
 8007c42:	2300      	movs	r3, #0
 8007c44:	220a      	movs	r2, #10
 8007c46:	9904      	ldr	r1, [sp, #16]
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f000 fef2 	bl	8008a32 <__multadd>
 8007c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c50:	9004      	str	r0, [sp, #16]
 8007c52:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f000 814d 	beq.w	8007ef6 <_dtoa_r+0xb2e>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	4631      	mov	r1, r6
 8007c60:	220a      	movs	r2, #10
 8007c62:	4620      	mov	r0, r4
 8007c64:	f000 fee5 	bl	8008a32 <__multadd>
 8007c68:	9b02      	ldr	r3, [sp, #8]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	4606      	mov	r6, r0
 8007c6e:	dc4f      	bgt.n	8007d10 <_dtoa_r+0x948>
 8007c70:	9b06      	ldr	r3, [sp, #24]
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	dd4c      	ble.n	8007d10 <_dtoa_r+0x948>
 8007c76:	e011      	b.n	8007c9c <_dtoa_r+0x8d4>
 8007c78:	d0c9      	beq.n	8007c0e <_dtoa_r+0x846>
 8007c7a:	9a05      	ldr	r2, [sp, #20]
 8007c7c:	331c      	adds	r3, #28
 8007c7e:	441a      	add	r2, r3
 8007c80:	9205      	str	r2, [sp, #20]
 8007c82:	441d      	add	r5, r3
 8007c84:	4498      	add	r8, r3
 8007c86:	e7c2      	b.n	8007c0e <_dtoa_r+0x846>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	e7f6      	b.n	8007c7a <_dtoa_r+0x8b2>
 8007c8c:	f1b9 0f00 	cmp.w	r9, #0
 8007c90:	dc38      	bgt.n	8007d04 <_dtoa_r+0x93c>
 8007c92:	9b06      	ldr	r3, [sp, #24]
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	dd35      	ble.n	8007d04 <_dtoa_r+0x93c>
 8007c98:	f8cd 9008 	str.w	r9, [sp, #8]
 8007c9c:	9b02      	ldr	r3, [sp, #8]
 8007c9e:	b963      	cbnz	r3, 8007cba <_dtoa_r+0x8f2>
 8007ca0:	4639      	mov	r1, r7
 8007ca2:	2205      	movs	r2, #5
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	f000 fec4 	bl	8008a32 <__multadd>
 8007caa:	4601      	mov	r1, r0
 8007cac:	4607      	mov	r7, r0
 8007cae:	9804      	ldr	r0, [sp, #16]
 8007cb0:	f001 f8c8 	bl	8008e44 <__mcmp>
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	f73f adcc 	bgt.w	8007852 <_dtoa_r+0x48a>
 8007cba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cbc:	465d      	mov	r5, fp
 8007cbe:	ea6f 0a03 	mvn.w	sl, r3
 8007cc2:	f04f 0900 	mov.w	r9, #0
 8007cc6:	4639      	mov	r1, r7
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f000 fe9b 	bl	8008a04 <_Bfree>
 8007cce:	2e00      	cmp	r6, #0
 8007cd0:	f43f aeb7 	beq.w	8007a42 <_dtoa_r+0x67a>
 8007cd4:	f1b9 0f00 	cmp.w	r9, #0
 8007cd8:	d005      	beq.n	8007ce6 <_dtoa_r+0x91e>
 8007cda:	45b1      	cmp	r9, r6
 8007cdc:	d003      	beq.n	8007ce6 <_dtoa_r+0x91e>
 8007cde:	4649      	mov	r1, r9
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	f000 fe8f 	bl	8008a04 <_Bfree>
 8007ce6:	4631      	mov	r1, r6
 8007ce8:	4620      	mov	r0, r4
 8007cea:	f000 fe8b 	bl	8008a04 <_Bfree>
 8007cee:	e6a8      	b.n	8007a42 <_dtoa_r+0x67a>
 8007cf0:	2700      	movs	r7, #0
 8007cf2:	463e      	mov	r6, r7
 8007cf4:	e7e1      	b.n	8007cba <_dtoa_r+0x8f2>
 8007cf6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007cfa:	463e      	mov	r6, r7
 8007cfc:	e5a9      	b.n	8007852 <_dtoa_r+0x48a>
 8007cfe:	bf00      	nop
 8007d00:	40240000 	.word	0x40240000
 8007d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d06:	f8cd 9008 	str.w	r9, [sp, #8]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f000 80fa 	beq.w	8007f04 <_dtoa_r+0xb3c>
 8007d10:	2d00      	cmp	r5, #0
 8007d12:	dd05      	ble.n	8007d20 <_dtoa_r+0x958>
 8007d14:	4631      	mov	r1, r6
 8007d16:	462a      	mov	r2, r5
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f001 f83f 	bl	8008d9c <__lshift>
 8007d1e:	4606      	mov	r6, r0
 8007d20:	9b07      	ldr	r3, [sp, #28]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d04c      	beq.n	8007dc0 <_dtoa_r+0x9f8>
 8007d26:	6871      	ldr	r1, [r6, #4]
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f000 fe37 	bl	800899c <_Balloc>
 8007d2e:	6932      	ldr	r2, [r6, #16]
 8007d30:	3202      	adds	r2, #2
 8007d32:	4605      	mov	r5, r0
 8007d34:	0092      	lsls	r2, r2, #2
 8007d36:	f106 010c 	add.w	r1, r6, #12
 8007d3a:	300c      	adds	r0, #12
 8007d3c:	f7fd fc52 	bl	80055e4 <memcpy>
 8007d40:	2201      	movs	r2, #1
 8007d42:	4629      	mov	r1, r5
 8007d44:	4620      	mov	r0, r4
 8007d46:	f001 f829 	bl	8008d9c <__lshift>
 8007d4a:	9b00      	ldr	r3, [sp, #0]
 8007d4c:	f8cd b014 	str.w	fp, [sp, #20]
 8007d50:	f003 0301 	and.w	r3, r3, #1
 8007d54:	46b1      	mov	r9, r6
 8007d56:	9307      	str	r3, [sp, #28]
 8007d58:	4606      	mov	r6, r0
 8007d5a:	4639      	mov	r1, r7
 8007d5c:	9804      	ldr	r0, [sp, #16]
 8007d5e:	f7ff faa5 	bl	80072ac <quorem>
 8007d62:	4649      	mov	r1, r9
 8007d64:	4605      	mov	r5, r0
 8007d66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007d6a:	9804      	ldr	r0, [sp, #16]
 8007d6c:	f001 f86a 	bl	8008e44 <__mcmp>
 8007d70:	4632      	mov	r2, r6
 8007d72:	9000      	str	r0, [sp, #0]
 8007d74:	4639      	mov	r1, r7
 8007d76:	4620      	mov	r0, r4
 8007d78:	f001 f87e 	bl	8008e78 <__mdiff>
 8007d7c:	68c3      	ldr	r3, [r0, #12]
 8007d7e:	4602      	mov	r2, r0
 8007d80:	bb03      	cbnz	r3, 8007dc4 <_dtoa_r+0x9fc>
 8007d82:	4601      	mov	r1, r0
 8007d84:	9008      	str	r0, [sp, #32]
 8007d86:	9804      	ldr	r0, [sp, #16]
 8007d88:	f001 f85c 	bl	8008e44 <__mcmp>
 8007d8c:	9a08      	ldr	r2, [sp, #32]
 8007d8e:	4603      	mov	r3, r0
 8007d90:	4611      	mov	r1, r2
 8007d92:	4620      	mov	r0, r4
 8007d94:	9308      	str	r3, [sp, #32]
 8007d96:	f000 fe35 	bl	8008a04 <_Bfree>
 8007d9a:	9b08      	ldr	r3, [sp, #32]
 8007d9c:	b9a3      	cbnz	r3, 8007dc8 <_dtoa_r+0xa00>
 8007d9e:	9a06      	ldr	r2, [sp, #24]
 8007da0:	b992      	cbnz	r2, 8007dc8 <_dtoa_r+0xa00>
 8007da2:	9a07      	ldr	r2, [sp, #28]
 8007da4:	b982      	cbnz	r2, 8007dc8 <_dtoa_r+0xa00>
 8007da6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007daa:	d029      	beq.n	8007e00 <_dtoa_r+0xa38>
 8007dac:	9b00      	ldr	r3, [sp, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	dd01      	ble.n	8007db6 <_dtoa_r+0x9ee>
 8007db2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007db6:	9b05      	ldr	r3, [sp, #20]
 8007db8:	1c5d      	adds	r5, r3, #1
 8007dba:	f883 8000 	strb.w	r8, [r3]
 8007dbe:	e782      	b.n	8007cc6 <_dtoa_r+0x8fe>
 8007dc0:	4630      	mov	r0, r6
 8007dc2:	e7c2      	b.n	8007d4a <_dtoa_r+0x982>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e7e3      	b.n	8007d90 <_dtoa_r+0x9c8>
 8007dc8:	9a00      	ldr	r2, [sp, #0]
 8007dca:	2a00      	cmp	r2, #0
 8007dcc:	db04      	blt.n	8007dd8 <_dtoa_r+0xa10>
 8007dce:	d125      	bne.n	8007e1c <_dtoa_r+0xa54>
 8007dd0:	9a06      	ldr	r2, [sp, #24]
 8007dd2:	bb1a      	cbnz	r2, 8007e1c <_dtoa_r+0xa54>
 8007dd4:	9a07      	ldr	r2, [sp, #28]
 8007dd6:	bb0a      	cbnz	r2, 8007e1c <_dtoa_r+0xa54>
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	ddec      	ble.n	8007db6 <_dtoa_r+0x9ee>
 8007ddc:	2201      	movs	r2, #1
 8007dde:	9904      	ldr	r1, [sp, #16]
 8007de0:	4620      	mov	r0, r4
 8007de2:	f000 ffdb 	bl	8008d9c <__lshift>
 8007de6:	4639      	mov	r1, r7
 8007de8:	9004      	str	r0, [sp, #16]
 8007dea:	f001 f82b 	bl	8008e44 <__mcmp>
 8007dee:	2800      	cmp	r0, #0
 8007df0:	dc03      	bgt.n	8007dfa <_dtoa_r+0xa32>
 8007df2:	d1e0      	bne.n	8007db6 <_dtoa_r+0x9ee>
 8007df4:	f018 0f01 	tst.w	r8, #1
 8007df8:	d0dd      	beq.n	8007db6 <_dtoa_r+0x9ee>
 8007dfa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007dfe:	d1d8      	bne.n	8007db2 <_dtoa_r+0x9ea>
 8007e00:	9b05      	ldr	r3, [sp, #20]
 8007e02:	9a05      	ldr	r2, [sp, #20]
 8007e04:	1c5d      	adds	r5, r3, #1
 8007e06:	2339      	movs	r3, #57	; 0x39
 8007e08:	7013      	strb	r3, [r2, #0]
 8007e0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e0e:	2b39      	cmp	r3, #57	; 0x39
 8007e10:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007e14:	d04f      	beq.n	8007eb6 <_dtoa_r+0xaee>
 8007e16:	3301      	adds	r3, #1
 8007e18:	7013      	strb	r3, [r2, #0]
 8007e1a:	e754      	b.n	8007cc6 <_dtoa_r+0x8fe>
 8007e1c:	9a05      	ldr	r2, [sp, #20]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f102 0501 	add.w	r5, r2, #1
 8007e24:	dd06      	ble.n	8007e34 <_dtoa_r+0xa6c>
 8007e26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007e2a:	d0e9      	beq.n	8007e00 <_dtoa_r+0xa38>
 8007e2c:	f108 0801 	add.w	r8, r8, #1
 8007e30:	9b05      	ldr	r3, [sp, #20]
 8007e32:	e7c2      	b.n	8007dba <_dtoa_r+0x9f2>
 8007e34:	9a02      	ldr	r2, [sp, #8]
 8007e36:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007e3a:	eba5 030b 	sub.w	r3, r5, fp
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d021      	beq.n	8007e86 <_dtoa_r+0xabe>
 8007e42:	2300      	movs	r3, #0
 8007e44:	220a      	movs	r2, #10
 8007e46:	9904      	ldr	r1, [sp, #16]
 8007e48:	4620      	mov	r0, r4
 8007e4a:	f000 fdf2 	bl	8008a32 <__multadd>
 8007e4e:	45b1      	cmp	r9, r6
 8007e50:	9004      	str	r0, [sp, #16]
 8007e52:	f04f 0300 	mov.w	r3, #0
 8007e56:	f04f 020a 	mov.w	r2, #10
 8007e5a:	4649      	mov	r1, r9
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	d105      	bne.n	8007e6c <_dtoa_r+0xaa4>
 8007e60:	f000 fde7 	bl	8008a32 <__multadd>
 8007e64:	4681      	mov	r9, r0
 8007e66:	4606      	mov	r6, r0
 8007e68:	9505      	str	r5, [sp, #20]
 8007e6a:	e776      	b.n	8007d5a <_dtoa_r+0x992>
 8007e6c:	f000 fde1 	bl	8008a32 <__multadd>
 8007e70:	4631      	mov	r1, r6
 8007e72:	4681      	mov	r9, r0
 8007e74:	2300      	movs	r3, #0
 8007e76:	220a      	movs	r2, #10
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f000 fdda 	bl	8008a32 <__multadd>
 8007e7e:	4606      	mov	r6, r0
 8007e80:	e7f2      	b.n	8007e68 <_dtoa_r+0xaa0>
 8007e82:	f04f 0900 	mov.w	r9, #0
 8007e86:	2201      	movs	r2, #1
 8007e88:	9904      	ldr	r1, [sp, #16]
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f000 ff86 	bl	8008d9c <__lshift>
 8007e90:	4639      	mov	r1, r7
 8007e92:	9004      	str	r0, [sp, #16]
 8007e94:	f000 ffd6 	bl	8008e44 <__mcmp>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	dcb6      	bgt.n	8007e0a <_dtoa_r+0xa42>
 8007e9c:	d102      	bne.n	8007ea4 <_dtoa_r+0xadc>
 8007e9e:	f018 0f01 	tst.w	r8, #1
 8007ea2:	d1b2      	bne.n	8007e0a <_dtoa_r+0xa42>
 8007ea4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ea8:	2b30      	cmp	r3, #48	; 0x30
 8007eaa:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007eae:	f47f af0a 	bne.w	8007cc6 <_dtoa_r+0x8fe>
 8007eb2:	4615      	mov	r5, r2
 8007eb4:	e7f6      	b.n	8007ea4 <_dtoa_r+0xadc>
 8007eb6:	4593      	cmp	fp, r2
 8007eb8:	d105      	bne.n	8007ec6 <_dtoa_r+0xafe>
 8007eba:	2331      	movs	r3, #49	; 0x31
 8007ebc:	f10a 0a01 	add.w	sl, sl, #1
 8007ec0:	f88b 3000 	strb.w	r3, [fp]
 8007ec4:	e6ff      	b.n	8007cc6 <_dtoa_r+0x8fe>
 8007ec6:	4615      	mov	r5, r2
 8007ec8:	e79f      	b.n	8007e0a <_dtoa_r+0xa42>
 8007eca:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007f30 <_dtoa_r+0xb68>
 8007ece:	e007      	b.n	8007ee0 <_dtoa_r+0xb18>
 8007ed0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ed2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007f34 <_dtoa_r+0xb6c>
 8007ed6:	b11b      	cbz	r3, 8007ee0 <_dtoa_r+0xb18>
 8007ed8:	f10b 0308 	add.w	r3, fp, #8
 8007edc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ede:	6013      	str	r3, [r2, #0]
 8007ee0:	4658      	mov	r0, fp
 8007ee2:	b017      	add	sp, #92	; 0x5c
 8007ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee8:	9b06      	ldr	r3, [sp, #24]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	f77f ae35 	ble.w	8007b5a <_dtoa_r+0x792>
 8007ef0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ef2:	9307      	str	r3, [sp, #28]
 8007ef4:	e649      	b.n	8007b8a <_dtoa_r+0x7c2>
 8007ef6:	9b02      	ldr	r3, [sp, #8]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	dc03      	bgt.n	8007f04 <_dtoa_r+0xb3c>
 8007efc:	9b06      	ldr	r3, [sp, #24]
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	f73f aecc 	bgt.w	8007c9c <_dtoa_r+0x8d4>
 8007f04:	465d      	mov	r5, fp
 8007f06:	4639      	mov	r1, r7
 8007f08:	9804      	ldr	r0, [sp, #16]
 8007f0a:	f7ff f9cf 	bl	80072ac <quorem>
 8007f0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007f12:	f805 8b01 	strb.w	r8, [r5], #1
 8007f16:	9a02      	ldr	r2, [sp, #8]
 8007f18:	eba5 030b 	sub.w	r3, r5, fp
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	ddb0      	ble.n	8007e82 <_dtoa_r+0xaba>
 8007f20:	2300      	movs	r3, #0
 8007f22:	220a      	movs	r2, #10
 8007f24:	9904      	ldr	r1, [sp, #16]
 8007f26:	4620      	mov	r0, r4
 8007f28:	f000 fd83 	bl	8008a32 <__multadd>
 8007f2c:	9004      	str	r0, [sp, #16]
 8007f2e:	e7ea      	b.n	8007f06 <_dtoa_r+0xb3e>
 8007f30:	08009b0c 	.word	0x08009b0c
 8007f34:	08009b88 	.word	0x08009b88

08007f38 <__sflush_r>:
 8007f38:	898a      	ldrh	r2, [r1, #12]
 8007f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f3e:	4605      	mov	r5, r0
 8007f40:	0710      	lsls	r0, r2, #28
 8007f42:	460c      	mov	r4, r1
 8007f44:	d458      	bmi.n	8007ff8 <__sflush_r+0xc0>
 8007f46:	684b      	ldr	r3, [r1, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	dc05      	bgt.n	8007f58 <__sflush_r+0x20>
 8007f4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	dc02      	bgt.n	8007f58 <__sflush_r+0x20>
 8007f52:	2000      	movs	r0, #0
 8007f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f5a:	2e00      	cmp	r6, #0
 8007f5c:	d0f9      	beq.n	8007f52 <__sflush_r+0x1a>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f64:	682f      	ldr	r7, [r5, #0]
 8007f66:	6a21      	ldr	r1, [r4, #32]
 8007f68:	602b      	str	r3, [r5, #0]
 8007f6a:	d032      	beq.n	8007fd2 <__sflush_r+0x9a>
 8007f6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f6e:	89a3      	ldrh	r3, [r4, #12]
 8007f70:	075a      	lsls	r2, r3, #29
 8007f72:	d505      	bpl.n	8007f80 <__sflush_r+0x48>
 8007f74:	6863      	ldr	r3, [r4, #4]
 8007f76:	1ac0      	subs	r0, r0, r3
 8007f78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f7a:	b10b      	cbz	r3, 8007f80 <__sflush_r+0x48>
 8007f7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f7e:	1ac0      	subs	r0, r0, r3
 8007f80:	2300      	movs	r3, #0
 8007f82:	4602      	mov	r2, r0
 8007f84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f86:	6a21      	ldr	r1, [r4, #32]
 8007f88:	4628      	mov	r0, r5
 8007f8a:	47b0      	blx	r6
 8007f8c:	1c43      	adds	r3, r0, #1
 8007f8e:	89a3      	ldrh	r3, [r4, #12]
 8007f90:	d106      	bne.n	8007fa0 <__sflush_r+0x68>
 8007f92:	6829      	ldr	r1, [r5, #0]
 8007f94:	291d      	cmp	r1, #29
 8007f96:	d848      	bhi.n	800802a <__sflush_r+0xf2>
 8007f98:	4a29      	ldr	r2, [pc, #164]	; (8008040 <__sflush_r+0x108>)
 8007f9a:	40ca      	lsrs	r2, r1
 8007f9c:	07d6      	lsls	r6, r2, #31
 8007f9e:	d544      	bpl.n	800802a <__sflush_r+0xf2>
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	6062      	str	r2, [r4, #4]
 8007fa4:	04d9      	lsls	r1, r3, #19
 8007fa6:	6922      	ldr	r2, [r4, #16]
 8007fa8:	6022      	str	r2, [r4, #0]
 8007faa:	d504      	bpl.n	8007fb6 <__sflush_r+0x7e>
 8007fac:	1c42      	adds	r2, r0, #1
 8007fae:	d101      	bne.n	8007fb4 <__sflush_r+0x7c>
 8007fb0:	682b      	ldr	r3, [r5, #0]
 8007fb2:	b903      	cbnz	r3, 8007fb6 <__sflush_r+0x7e>
 8007fb4:	6560      	str	r0, [r4, #84]	; 0x54
 8007fb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fb8:	602f      	str	r7, [r5, #0]
 8007fba:	2900      	cmp	r1, #0
 8007fbc:	d0c9      	beq.n	8007f52 <__sflush_r+0x1a>
 8007fbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fc2:	4299      	cmp	r1, r3
 8007fc4:	d002      	beq.n	8007fcc <__sflush_r+0x94>
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	f001 f8f6 	bl	80091b8 <_free_r>
 8007fcc:	2000      	movs	r0, #0
 8007fce:	6360      	str	r0, [r4, #52]	; 0x34
 8007fd0:	e7c0      	b.n	8007f54 <__sflush_r+0x1c>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	47b0      	blx	r6
 8007fd8:	1c41      	adds	r1, r0, #1
 8007fda:	d1c8      	bne.n	8007f6e <__sflush_r+0x36>
 8007fdc:	682b      	ldr	r3, [r5, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d0c5      	beq.n	8007f6e <__sflush_r+0x36>
 8007fe2:	2b1d      	cmp	r3, #29
 8007fe4:	d001      	beq.n	8007fea <__sflush_r+0xb2>
 8007fe6:	2b16      	cmp	r3, #22
 8007fe8:	d101      	bne.n	8007fee <__sflush_r+0xb6>
 8007fea:	602f      	str	r7, [r5, #0]
 8007fec:	e7b1      	b.n	8007f52 <__sflush_r+0x1a>
 8007fee:	89a3      	ldrh	r3, [r4, #12]
 8007ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ff4:	81a3      	strh	r3, [r4, #12]
 8007ff6:	e7ad      	b.n	8007f54 <__sflush_r+0x1c>
 8007ff8:	690f      	ldr	r7, [r1, #16]
 8007ffa:	2f00      	cmp	r7, #0
 8007ffc:	d0a9      	beq.n	8007f52 <__sflush_r+0x1a>
 8007ffe:	0793      	lsls	r3, r2, #30
 8008000:	680e      	ldr	r6, [r1, #0]
 8008002:	bf08      	it	eq
 8008004:	694b      	ldreq	r3, [r1, #20]
 8008006:	600f      	str	r7, [r1, #0]
 8008008:	bf18      	it	ne
 800800a:	2300      	movne	r3, #0
 800800c:	eba6 0807 	sub.w	r8, r6, r7
 8008010:	608b      	str	r3, [r1, #8]
 8008012:	f1b8 0f00 	cmp.w	r8, #0
 8008016:	dd9c      	ble.n	8007f52 <__sflush_r+0x1a>
 8008018:	4643      	mov	r3, r8
 800801a:	463a      	mov	r2, r7
 800801c:	6a21      	ldr	r1, [r4, #32]
 800801e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008020:	4628      	mov	r0, r5
 8008022:	47b0      	blx	r6
 8008024:	2800      	cmp	r0, #0
 8008026:	dc06      	bgt.n	8008036 <__sflush_r+0xfe>
 8008028:	89a3      	ldrh	r3, [r4, #12]
 800802a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800802e:	81a3      	strh	r3, [r4, #12]
 8008030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008034:	e78e      	b.n	8007f54 <__sflush_r+0x1c>
 8008036:	4407      	add	r7, r0
 8008038:	eba8 0800 	sub.w	r8, r8, r0
 800803c:	e7e9      	b.n	8008012 <__sflush_r+0xda>
 800803e:	bf00      	nop
 8008040:	20400001 	.word	0x20400001

08008044 <_fflush_r>:
 8008044:	b538      	push	{r3, r4, r5, lr}
 8008046:	690b      	ldr	r3, [r1, #16]
 8008048:	4605      	mov	r5, r0
 800804a:	460c      	mov	r4, r1
 800804c:	b1db      	cbz	r3, 8008086 <_fflush_r+0x42>
 800804e:	b118      	cbz	r0, 8008058 <_fflush_r+0x14>
 8008050:	6983      	ldr	r3, [r0, #24]
 8008052:	b90b      	cbnz	r3, 8008058 <_fflush_r+0x14>
 8008054:	f000 f860 	bl	8008118 <__sinit>
 8008058:	4b0c      	ldr	r3, [pc, #48]	; (800808c <_fflush_r+0x48>)
 800805a:	429c      	cmp	r4, r3
 800805c:	d109      	bne.n	8008072 <_fflush_r+0x2e>
 800805e:	686c      	ldr	r4, [r5, #4]
 8008060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008064:	b17b      	cbz	r3, 8008086 <_fflush_r+0x42>
 8008066:	4621      	mov	r1, r4
 8008068:	4628      	mov	r0, r5
 800806a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800806e:	f7ff bf63 	b.w	8007f38 <__sflush_r>
 8008072:	4b07      	ldr	r3, [pc, #28]	; (8008090 <_fflush_r+0x4c>)
 8008074:	429c      	cmp	r4, r3
 8008076:	d101      	bne.n	800807c <_fflush_r+0x38>
 8008078:	68ac      	ldr	r4, [r5, #8]
 800807a:	e7f1      	b.n	8008060 <_fflush_r+0x1c>
 800807c:	4b05      	ldr	r3, [pc, #20]	; (8008094 <_fflush_r+0x50>)
 800807e:	429c      	cmp	r4, r3
 8008080:	bf08      	it	eq
 8008082:	68ec      	ldreq	r4, [r5, #12]
 8008084:	e7ec      	b.n	8008060 <_fflush_r+0x1c>
 8008086:	2000      	movs	r0, #0
 8008088:	bd38      	pop	{r3, r4, r5, pc}
 800808a:	bf00      	nop
 800808c:	08009bb8 	.word	0x08009bb8
 8008090:	08009bd8 	.word	0x08009bd8
 8008094:	08009b98 	.word	0x08009b98

08008098 <std>:
 8008098:	2300      	movs	r3, #0
 800809a:	b510      	push	{r4, lr}
 800809c:	4604      	mov	r4, r0
 800809e:	e9c0 3300 	strd	r3, r3, [r0]
 80080a2:	6083      	str	r3, [r0, #8]
 80080a4:	8181      	strh	r1, [r0, #12]
 80080a6:	6643      	str	r3, [r0, #100]	; 0x64
 80080a8:	81c2      	strh	r2, [r0, #14]
 80080aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080ae:	6183      	str	r3, [r0, #24]
 80080b0:	4619      	mov	r1, r3
 80080b2:	2208      	movs	r2, #8
 80080b4:	305c      	adds	r0, #92	; 0x5c
 80080b6:	f7fd faa0 	bl	80055fa <memset>
 80080ba:	4b05      	ldr	r3, [pc, #20]	; (80080d0 <std+0x38>)
 80080bc:	6263      	str	r3, [r4, #36]	; 0x24
 80080be:	4b05      	ldr	r3, [pc, #20]	; (80080d4 <std+0x3c>)
 80080c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80080c2:	4b05      	ldr	r3, [pc, #20]	; (80080d8 <std+0x40>)
 80080c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080c6:	4b05      	ldr	r3, [pc, #20]	; (80080dc <std+0x44>)
 80080c8:	6224      	str	r4, [r4, #32]
 80080ca:	6323      	str	r3, [r4, #48]	; 0x30
 80080cc:	bd10      	pop	{r4, pc}
 80080ce:	bf00      	nop
 80080d0:	0800984d 	.word	0x0800984d
 80080d4:	0800986f 	.word	0x0800986f
 80080d8:	080098a7 	.word	0x080098a7
 80080dc:	080098cb 	.word	0x080098cb

080080e0 <_cleanup_r>:
 80080e0:	4901      	ldr	r1, [pc, #4]	; (80080e8 <_cleanup_r+0x8>)
 80080e2:	f000 b885 	b.w	80081f0 <_fwalk_reent>
 80080e6:	bf00      	nop
 80080e8:	08008045 	.word	0x08008045

080080ec <__sfmoreglue>:
 80080ec:	b570      	push	{r4, r5, r6, lr}
 80080ee:	1e4a      	subs	r2, r1, #1
 80080f0:	2568      	movs	r5, #104	; 0x68
 80080f2:	4355      	muls	r5, r2
 80080f4:	460e      	mov	r6, r1
 80080f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80080fa:	f001 f8ab 	bl	8009254 <_malloc_r>
 80080fe:	4604      	mov	r4, r0
 8008100:	b140      	cbz	r0, 8008114 <__sfmoreglue+0x28>
 8008102:	2100      	movs	r1, #0
 8008104:	e9c0 1600 	strd	r1, r6, [r0]
 8008108:	300c      	adds	r0, #12
 800810a:	60a0      	str	r0, [r4, #8]
 800810c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008110:	f7fd fa73 	bl	80055fa <memset>
 8008114:	4620      	mov	r0, r4
 8008116:	bd70      	pop	{r4, r5, r6, pc}

08008118 <__sinit>:
 8008118:	6983      	ldr	r3, [r0, #24]
 800811a:	b510      	push	{r4, lr}
 800811c:	4604      	mov	r4, r0
 800811e:	bb33      	cbnz	r3, 800816e <__sinit+0x56>
 8008120:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008124:	6503      	str	r3, [r0, #80]	; 0x50
 8008126:	4b12      	ldr	r3, [pc, #72]	; (8008170 <__sinit+0x58>)
 8008128:	4a12      	ldr	r2, [pc, #72]	; (8008174 <__sinit+0x5c>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	6282      	str	r2, [r0, #40]	; 0x28
 800812e:	4298      	cmp	r0, r3
 8008130:	bf04      	itt	eq
 8008132:	2301      	moveq	r3, #1
 8008134:	6183      	streq	r3, [r0, #24]
 8008136:	f000 f81f 	bl	8008178 <__sfp>
 800813a:	6060      	str	r0, [r4, #4]
 800813c:	4620      	mov	r0, r4
 800813e:	f000 f81b 	bl	8008178 <__sfp>
 8008142:	60a0      	str	r0, [r4, #8]
 8008144:	4620      	mov	r0, r4
 8008146:	f000 f817 	bl	8008178 <__sfp>
 800814a:	2200      	movs	r2, #0
 800814c:	60e0      	str	r0, [r4, #12]
 800814e:	2104      	movs	r1, #4
 8008150:	6860      	ldr	r0, [r4, #4]
 8008152:	f7ff ffa1 	bl	8008098 <std>
 8008156:	2201      	movs	r2, #1
 8008158:	2109      	movs	r1, #9
 800815a:	68a0      	ldr	r0, [r4, #8]
 800815c:	f7ff ff9c 	bl	8008098 <std>
 8008160:	2202      	movs	r2, #2
 8008162:	2112      	movs	r1, #18
 8008164:	68e0      	ldr	r0, [r4, #12]
 8008166:	f7ff ff97 	bl	8008098 <std>
 800816a:	2301      	movs	r3, #1
 800816c:	61a3      	str	r3, [r4, #24]
 800816e:	bd10      	pop	{r4, pc}
 8008170:	08009af8 	.word	0x08009af8
 8008174:	080080e1 	.word	0x080080e1

08008178 <__sfp>:
 8008178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817a:	4b1b      	ldr	r3, [pc, #108]	; (80081e8 <__sfp+0x70>)
 800817c:	681e      	ldr	r6, [r3, #0]
 800817e:	69b3      	ldr	r3, [r6, #24]
 8008180:	4607      	mov	r7, r0
 8008182:	b913      	cbnz	r3, 800818a <__sfp+0x12>
 8008184:	4630      	mov	r0, r6
 8008186:	f7ff ffc7 	bl	8008118 <__sinit>
 800818a:	3648      	adds	r6, #72	; 0x48
 800818c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008190:	3b01      	subs	r3, #1
 8008192:	d503      	bpl.n	800819c <__sfp+0x24>
 8008194:	6833      	ldr	r3, [r6, #0]
 8008196:	b133      	cbz	r3, 80081a6 <__sfp+0x2e>
 8008198:	6836      	ldr	r6, [r6, #0]
 800819a:	e7f7      	b.n	800818c <__sfp+0x14>
 800819c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80081a0:	b16d      	cbz	r5, 80081be <__sfp+0x46>
 80081a2:	3468      	adds	r4, #104	; 0x68
 80081a4:	e7f4      	b.n	8008190 <__sfp+0x18>
 80081a6:	2104      	movs	r1, #4
 80081a8:	4638      	mov	r0, r7
 80081aa:	f7ff ff9f 	bl	80080ec <__sfmoreglue>
 80081ae:	6030      	str	r0, [r6, #0]
 80081b0:	2800      	cmp	r0, #0
 80081b2:	d1f1      	bne.n	8008198 <__sfp+0x20>
 80081b4:	230c      	movs	r3, #12
 80081b6:	603b      	str	r3, [r7, #0]
 80081b8:	4604      	mov	r4, r0
 80081ba:	4620      	mov	r0, r4
 80081bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081be:	4b0b      	ldr	r3, [pc, #44]	; (80081ec <__sfp+0x74>)
 80081c0:	6665      	str	r5, [r4, #100]	; 0x64
 80081c2:	e9c4 5500 	strd	r5, r5, [r4]
 80081c6:	60a5      	str	r5, [r4, #8]
 80081c8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80081cc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80081d0:	2208      	movs	r2, #8
 80081d2:	4629      	mov	r1, r5
 80081d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80081d8:	f7fd fa0f 	bl	80055fa <memset>
 80081dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80081e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80081e4:	e7e9      	b.n	80081ba <__sfp+0x42>
 80081e6:	bf00      	nop
 80081e8:	08009af8 	.word	0x08009af8
 80081ec:	ffff0001 	.word	0xffff0001

080081f0 <_fwalk_reent>:
 80081f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081f4:	4680      	mov	r8, r0
 80081f6:	4689      	mov	r9, r1
 80081f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80081fc:	2600      	movs	r6, #0
 80081fe:	b914      	cbnz	r4, 8008206 <_fwalk_reent+0x16>
 8008200:	4630      	mov	r0, r6
 8008202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008206:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800820a:	3f01      	subs	r7, #1
 800820c:	d501      	bpl.n	8008212 <_fwalk_reent+0x22>
 800820e:	6824      	ldr	r4, [r4, #0]
 8008210:	e7f5      	b.n	80081fe <_fwalk_reent+0xe>
 8008212:	89ab      	ldrh	r3, [r5, #12]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d907      	bls.n	8008228 <_fwalk_reent+0x38>
 8008218:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800821c:	3301      	adds	r3, #1
 800821e:	d003      	beq.n	8008228 <_fwalk_reent+0x38>
 8008220:	4629      	mov	r1, r5
 8008222:	4640      	mov	r0, r8
 8008224:	47c8      	blx	r9
 8008226:	4306      	orrs	r6, r0
 8008228:	3568      	adds	r5, #104	; 0x68
 800822a:	e7ee      	b.n	800820a <_fwalk_reent+0x1a>

0800822c <rshift>:
 800822c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800822e:	6906      	ldr	r6, [r0, #16]
 8008230:	114b      	asrs	r3, r1, #5
 8008232:	429e      	cmp	r6, r3
 8008234:	f100 0414 	add.w	r4, r0, #20
 8008238:	dd30      	ble.n	800829c <rshift+0x70>
 800823a:	f011 011f 	ands.w	r1, r1, #31
 800823e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008242:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008246:	d108      	bne.n	800825a <rshift+0x2e>
 8008248:	4621      	mov	r1, r4
 800824a:	42b2      	cmp	r2, r6
 800824c:	460b      	mov	r3, r1
 800824e:	d211      	bcs.n	8008274 <rshift+0x48>
 8008250:	f852 3b04 	ldr.w	r3, [r2], #4
 8008254:	f841 3b04 	str.w	r3, [r1], #4
 8008258:	e7f7      	b.n	800824a <rshift+0x1e>
 800825a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800825e:	f1c1 0c20 	rsb	ip, r1, #32
 8008262:	40cd      	lsrs	r5, r1
 8008264:	3204      	adds	r2, #4
 8008266:	4623      	mov	r3, r4
 8008268:	42b2      	cmp	r2, r6
 800826a:	4617      	mov	r7, r2
 800826c:	d30c      	bcc.n	8008288 <rshift+0x5c>
 800826e:	601d      	str	r5, [r3, #0]
 8008270:	b105      	cbz	r5, 8008274 <rshift+0x48>
 8008272:	3304      	adds	r3, #4
 8008274:	1b1a      	subs	r2, r3, r4
 8008276:	42a3      	cmp	r3, r4
 8008278:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800827c:	bf08      	it	eq
 800827e:	2300      	moveq	r3, #0
 8008280:	6102      	str	r2, [r0, #16]
 8008282:	bf08      	it	eq
 8008284:	6143      	streq	r3, [r0, #20]
 8008286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008288:	683f      	ldr	r7, [r7, #0]
 800828a:	fa07 f70c 	lsl.w	r7, r7, ip
 800828e:	433d      	orrs	r5, r7
 8008290:	f843 5b04 	str.w	r5, [r3], #4
 8008294:	f852 5b04 	ldr.w	r5, [r2], #4
 8008298:	40cd      	lsrs	r5, r1
 800829a:	e7e5      	b.n	8008268 <rshift+0x3c>
 800829c:	4623      	mov	r3, r4
 800829e:	e7e9      	b.n	8008274 <rshift+0x48>

080082a0 <__hexdig_fun>:
 80082a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80082a4:	2b09      	cmp	r3, #9
 80082a6:	d802      	bhi.n	80082ae <__hexdig_fun+0xe>
 80082a8:	3820      	subs	r0, #32
 80082aa:	b2c0      	uxtb	r0, r0
 80082ac:	4770      	bx	lr
 80082ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80082b2:	2b05      	cmp	r3, #5
 80082b4:	d801      	bhi.n	80082ba <__hexdig_fun+0x1a>
 80082b6:	3847      	subs	r0, #71	; 0x47
 80082b8:	e7f7      	b.n	80082aa <__hexdig_fun+0xa>
 80082ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80082be:	2b05      	cmp	r3, #5
 80082c0:	d801      	bhi.n	80082c6 <__hexdig_fun+0x26>
 80082c2:	3827      	subs	r0, #39	; 0x27
 80082c4:	e7f1      	b.n	80082aa <__hexdig_fun+0xa>
 80082c6:	2000      	movs	r0, #0
 80082c8:	4770      	bx	lr

080082ca <__gethex>:
 80082ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ce:	b08b      	sub	sp, #44	; 0x2c
 80082d0:	468a      	mov	sl, r1
 80082d2:	9002      	str	r0, [sp, #8]
 80082d4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80082d6:	9306      	str	r3, [sp, #24]
 80082d8:	4690      	mov	r8, r2
 80082da:	f000 fad0 	bl	800887e <__localeconv_l>
 80082de:	6803      	ldr	r3, [r0, #0]
 80082e0:	9303      	str	r3, [sp, #12]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7f7 ff74 	bl	80001d0 <strlen>
 80082e8:	9b03      	ldr	r3, [sp, #12]
 80082ea:	9001      	str	r0, [sp, #4]
 80082ec:	4403      	add	r3, r0
 80082ee:	f04f 0b00 	mov.w	fp, #0
 80082f2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80082f6:	9307      	str	r3, [sp, #28]
 80082f8:	f8da 3000 	ldr.w	r3, [sl]
 80082fc:	3302      	adds	r3, #2
 80082fe:	461f      	mov	r7, r3
 8008300:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008304:	2830      	cmp	r0, #48	; 0x30
 8008306:	d06c      	beq.n	80083e2 <__gethex+0x118>
 8008308:	f7ff ffca 	bl	80082a0 <__hexdig_fun>
 800830c:	4604      	mov	r4, r0
 800830e:	2800      	cmp	r0, #0
 8008310:	d16a      	bne.n	80083e8 <__gethex+0x11e>
 8008312:	9a01      	ldr	r2, [sp, #4]
 8008314:	9903      	ldr	r1, [sp, #12]
 8008316:	4638      	mov	r0, r7
 8008318:	f001 fadb 	bl	80098d2 <strncmp>
 800831c:	2800      	cmp	r0, #0
 800831e:	d166      	bne.n	80083ee <__gethex+0x124>
 8008320:	9b01      	ldr	r3, [sp, #4]
 8008322:	5cf8      	ldrb	r0, [r7, r3]
 8008324:	18fe      	adds	r6, r7, r3
 8008326:	f7ff ffbb 	bl	80082a0 <__hexdig_fun>
 800832a:	2800      	cmp	r0, #0
 800832c:	d062      	beq.n	80083f4 <__gethex+0x12a>
 800832e:	4633      	mov	r3, r6
 8008330:	7818      	ldrb	r0, [r3, #0]
 8008332:	2830      	cmp	r0, #48	; 0x30
 8008334:	461f      	mov	r7, r3
 8008336:	f103 0301 	add.w	r3, r3, #1
 800833a:	d0f9      	beq.n	8008330 <__gethex+0x66>
 800833c:	f7ff ffb0 	bl	80082a0 <__hexdig_fun>
 8008340:	fab0 f580 	clz	r5, r0
 8008344:	096d      	lsrs	r5, r5, #5
 8008346:	4634      	mov	r4, r6
 8008348:	f04f 0b01 	mov.w	fp, #1
 800834c:	463a      	mov	r2, r7
 800834e:	4616      	mov	r6, r2
 8008350:	3201      	adds	r2, #1
 8008352:	7830      	ldrb	r0, [r6, #0]
 8008354:	f7ff ffa4 	bl	80082a0 <__hexdig_fun>
 8008358:	2800      	cmp	r0, #0
 800835a:	d1f8      	bne.n	800834e <__gethex+0x84>
 800835c:	9a01      	ldr	r2, [sp, #4]
 800835e:	9903      	ldr	r1, [sp, #12]
 8008360:	4630      	mov	r0, r6
 8008362:	f001 fab6 	bl	80098d2 <strncmp>
 8008366:	b950      	cbnz	r0, 800837e <__gethex+0xb4>
 8008368:	b954      	cbnz	r4, 8008380 <__gethex+0xb6>
 800836a:	9b01      	ldr	r3, [sp, #4]
 800836c:	18f4      	adds	r4, r6, r3
 800836e:	4622      	mov	r2, r4
 8008370:	4616      	mov	r6, r2
 8008372:	3201      	adds	r2, #1
 8008374:	7830      	ldrb	r0, [r6, #0]
 8008376:	f7ff ff93 	bl	80082a0 <__hexdig_fun>
 800837a:	2800      	cmp	r0, #0
 800837c:	d1f8      	bne.n	8008370 <__gethex+0xa6>
 800837e:	b10c      	cbz	r4, 8008384 <__gethex+0xba>
 8008380:	1ba4      	subs	r4, r4, r6
 8008382:	00a4      	lsls	r4, r4, #2
 8008384:	7833      	ldrb	r3, [r6, #0]
 8008386:	2b50      	cmp	r3, #80	; 0x50
 8008388:	d001      	beq.n	800838e <__gethex+0xc4>
 800838a:	2b70      	cmp	r3, #112	; 0x70
 800838c:	d140      	bne.n	8008410 <__gethex+0x146>
 800838e:	7873      	ldrb	r3, [r6, #1]
 8008390:	2b2b      	cmp	r3, #43	; 0x2b
 8008392:	d031      	beq.n	80083f8 <__gethex+0x12e>
 8008394:	2b2d      	cmp	r3, #45	; 0x2d
 8008396:	d033      	beq.n	8008400 <__gethex+0x136>
 8008398:	1c71      	adds	r1, r6, #1
 800839a:	f04f 0900 	mov.w	r9, #0
 800839e:	7808      	ldrb	r0, [r1, #0]
 80083a0:	f7ff ff7e 	bl	80082a0 <__hexdig_fun>
 80083a4:	1e43      	subs	r3, r0, #1
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	2b18      	cmp	r3, #24
 80083aa:	d831      	bhi.n	8008410 <__gethex+0x146>
 80083ac:	f1a0 0210 	sub.w	r2, r0, #16
 80083b0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80083b4:	f7ff ff74 	bl	80082a0 <__hexdig_fun>
 80083b8:	1e43      	subs	r3, r0, #1
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	2b18      	cmp	r3, #24
 80083be:	d922      	bls.n	8008406 <__gethex+0x13c>
 80083c0:	f1b9 0f00 	cmp.w	r9, #0
 80083c4:	d000      	beq.n	80083c8 <__gethex+0xfe>
 80083c6:	4252      	negs	r2, r2
 80083c8:	4414      	add	r4, r2
 80083ca:	f8ca 1000 	str.w	r1, [sl]
 80083ce:	b30d      	cbz	r5, 8008414 <__gethex+0x14a>
 80083d0:	f1bb 0f00 	cmp.w	fp, #0
 80083d4:	bf0c      	ite	eq
 80083d6:	2706      	moveq	r7, #6
 80083d8:	2700      	movne	r7, #0
 80083da:	4638      	mov	r0, r7
 80083dc:	b00b      	add	sp, #44	; 0x2c
 80083de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e2:	f10b 0b01 	add.w	fp, fp, #1
 80083e6:	e78a      	b.n	80082fe <__gethex+0x34>
 80083e8:	2500      	movs	r5, #0
 80083ea:	462c      	mov	r4, r5
 80083ec:	e7ae      	b.n	800834c <__gethex+0x82>
 80083ee:	463e      	mov	r6, r7
 80083f0:	2501      	movs	r5, #1
 80083f2:	e7c7      	b.n	8008384 <__gethex+0xba>
 80083f4:	4604      	mov	r4, r0
 80083f6:	e7fb      	b.n	80083f0 <__gethex+0x126>
 80083f8:	f04f 0900 	mov.w	r9, #0
 80083fc:	1cb1      	adds	r1, r6, #2
 80083fe:	e7ce      	b.n	800839e <__gethex+0xd4>
 8008400:	f04f 0901 	mov.w	r9, #1
 8008404:	e7fa      	b.n	80083fc <__gethex+0x132>
 8008406:	230a      	movs	r3, #10
 8008408:	fb03 0202 	mla	r2, r3, r2, r0
 800840c:	3a10      	subs	r2, #16
 800840e:	e7cf      	b.n	80083b0 <__gethex+0xe6>
 8008410:	4631      	mov	r1, r6
 8008412:	e7da      	b.n	80083ca <__gethex+0x100>
 8008414:	1bf3      	subs	r3, r6, r7
 8008416:	3b01      	subs	r3, #1
 8008418:	4629      	mov	r1, r5
 800841a:	2b07      	cmp	r3, #7
 800841c:	dc49      	bgt.n	80084b2 <__gethex+0x1e8>
 800841e:	9802      	ldr	r0, [sp, #8]
 8008420:	f000 fabc 	bl	800899c <_Balloc>
 8008424:	9b01      	ldr	r3, [sp, #4]
 8008426:	f100 0914 	add.w	r9, r0, #20
 800842a:	f04f 0b00 	mov.w	fp, #0
 800842e:	f1c3 0301 	rsb	r3, r3, #1
 8008432:	4605      	mov	r5, r0
 8008434:	f8cd 9010 	str.w	r9, [sp, #16]
 8008438:	46da      	mov	sl, fp
 800843a:	9308      	str	r3, [sp, #32]
 800843c:	42b7      	cmp	r7, r6
 800843e:	d33b      	bcc.n	80084b8 <__gethex+0x1ee>
 8008440:	9804      	ldr	r0, [sp, #16]
 8008442:	f840 ab04 	str.w	sl, [r0], #4
 8008446:	eba0 0009 	sub.w	r0, r0, r9
 800844a:	1080      	asrs	r0, r0, #2
 800844c:	6128      	str	r0, [r5, #16]
 800844e:	0147      	lsls	r7, r0, #5
 8008450:	4650      	mov	r0, sl
 8008452:	f000 fb67 	bl	8008b24 <__hi0bits>
 8008456:	f8d8 6000 	ldr.w	r6, [r8]
 800845a:	1a3f      	subs	r7, r7, r0
 800845c:	42b7      	cmp	r7, r6
 800845e:	dd64      	ble.n	800852a <__gethex+0x260>
 8008460:	1bbf      	subs	r7, r7, r6
 8008462:	4639      	mov	r1, r7
 8008464:	4628      	mov	r0, r5
 8008466:	f000 fe77 	bl	8009158 <__any_on>
 800846a:	4682      	mov	sl, r0
 800846c:	b178      	cbz	r0, 800848e <__gethex+0x1c4>
 800846e:	1e7b      	subs	r3, r7, #1
 8008470:	1159      	asrs	r1, r3, #5
 8008472:	f003 021f 	and.w	r2, r3, #31
 8008476:	f04f 0a01 	mov.w	sl, #1
 800847a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800847e:	fa0a f202 	lsl.w	r2, sl, r2
 8008482:	420a      	tst	r2, r1
 8008484:	d003      	beq.n	800848e <__gethex+0x1c4>
 8008486:	4553      	cmp	r3, sl
 8008488:	dc46      	bgt.n	8008518 <__gethex+0x24e>
 800848a:	f04f 0a02 	mov.w	sl, #2
 800848e:	4639      	mov	r1, r7
 8008490:	4628      	mov	r0, r5
 8008492:	f7ff fecb 	bl	800822c <rshift>
 8008496:	443c      	add	r4, r7
 8008498:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800849c:	42a3      	cmp	r3, r4
 800849e:	da52      	bge.n	8008546 <__gethex+0x27c>
 80084a0:	4629      	mov	r1, r5
 80084a2:	9802      	ldr	r0, [sp, #8]
 80084a4:	f000 faae 	bl	8008a04 <_Bfree>
 80084a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80084aa:	2300      	movs	r3, #0
 80084ac:	6013      	str	r3, [r2, #0]
 80084ae:	27a3      	movs	r7, #163	; 0xa3
 80084b0:	e793      	b.n	80083da <__gethex+0x110>
 80084b2:	3101      	adds	r1, #1
 80084b4:	105b      	asrs	r3, r3, #1
 80084b6:	e7b0      	b.n	800841a <__gethex+0x150>
 80084b8:	1e73      	subs	r3, r6, #1
 80084ba:	9305      	str	r3, [sp, #20]
 80084bc:	9a07      	ldr	r2, [sp, #28]
 80084be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d018      	beq.n	80084f8 <__gethex+0x22e>
 80084c6:	f1bb 0f20 	cmp.w	fp, #32
 80084ca:	d107      	bne.n	80084dc <__gethex+0x212>
 80084cc:	9b04      	ldr	r3, [sp, #16]
 80084ce:	f8c3 a000 	str.w	sl, [r3]
 80084d2:	3304      	adds	r3, #4
 80084d4:	f04f 0a00 	mov.w	sl, #0
 80084d8:	9304      	str	r3, [sp, #16]
 80084da:	46d3      	mov	fp, sl
 80084dc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80084e0:	f7ff fede 	bl	80082a0 <__hexdig_fun>
 80084e4:	f000 000f 	and.w	r0, r0, #15
 80084e8:	fa00 f00b 	lsl.w	r0, r0, fp
 80084ec:	ea4a 0a00 	orr.w	sl, sl, r0
 80084f0:	f10b 0b04 	add.w	fp, fp, #4
 80084f4:	9b05      	ldr	r3, [sp, #20]
 80084f6:	e00d      	b.n	8008514 <__gethex+0x24a>
 80084f8:	9b05      	ldr	r3, [sp, #20]
 80084fa:	9a08      	ldr	r2, [sp, #32]
 80084fc:	4413      	add	r3, r2
 80084fe:	42bb      	cmp	r3, r7
 8008500:	d3e1      	bcc.n	80084c6 <__gethex+0x1fc>
 8008502:	4618      	mov	r0, r3
 8008504:	9a01      	ldr	r2, [sp, #4]
 8008506:	9903      	ldr	r1, [sp, #12]
 8008508:	9309      	str	r3, [sp, #36]	; 0x24
 800850a:	f001 f9e2 	bl	80098d2 <strncmp>
 800850e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008510:	2800      	cmp	r0, #0
 8008512:	d1d8      	bne.n	80084c6 <__gethex+0x1fc>
 8008514:	461e      	mov	r6, r3
 8008516:	e791      	b.n	800843c <__gethex+0x172>
 8008518:	1eb9      	subs	r1, r7, #2
 800851a:	4628      	mov	r0, r5
 800851c:	f000 fe1c 	bl	8009158 <__any_on>
 8008520:	2800      	cmp	r0, #0
 8008522:	d0b2      	beq.n	800848a <__gethex+0x1c0>
 8008524:	f04f 0a03 	mov.w	sl, #3
 8008528:	e7b1      	b.n	800848e <__gethex+0x1c4>
 800852a:	da09      	bge.n	8008540 <__gethex+0x276>
 800852c:	1bf7      	subs	r7, r6, r7
 800852e:	4629      	mov	r1, r5
 8008530:	463a      	mov	r2, r7
 8008532:	9802      	ldr	r0, [sp, #8]
 8008534:	f000 fc32 	bl	8008d9c <__lshift>
 8008538:	1be4      	subs	r4, r4, r7
 800853a:	4605      	mov	r5, r0
 800853c:	f100 0914 	add.w	r9, r0, #20
 8008540:	f04f 0a00 	mov.w	sl, #0
 8008544:	e7a8      	b.n	8008498 <__gethex+0x1ce>
 8008546:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800854a:	42a0      	cmp	r0, r4
 800854c:	dd6a      	ble.n	8008624 <__gethex+0x35a>
 800854e:	1b04      	subs	r4, r0, r4
 8008550:	42a6      	cmp	r6, r4
 8008552:	dc2e      	bgt.n	80085b2 <__gethex+0x2e8>
 8008554:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008558:	2b02      	cmp	r3, #2
 800855a:	d022      	beq.n	80085a2 <__gethex+0x2d8>
 800855c:	2b03      	cmp	r3, #3
 800855e:	d024      	beq.n	80085aa <__gethex+0x2e0>
 8008560:	2b01      	cmp	r3, #1
 8008562:	d115      	bne.n	8008590 <__gethex+0x2c6>
 8008564:	42a6      	cmp	r6, r4
 8008566:	d113      	bne.n	8008590 <__gethex+0x2c6>
 8008568:	2e01      	cmp	r6, #1
 800856a:	dc0b      	bgt.n	8008584 <__gethex+0x2ba>
 800856c:	9a06      	ldr	r2, [sp, #24]
 800856e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008572:	6013      	str	r3, [r2, #0]
 8008574:	2301      	movs	r3, #1
 8008576:	612b      	str	r3, [r5, #16]
 8008578:	f8c9 3000 	str.w	r3, [r9]
 800857c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800857e:	2762      	movs	r7, #98	; 0x62
 8008580:	601d      	str	r5, [r3, #0]
 8008582:	e72a      	b.n	80083da <__gethex+0x110>
 8008584:	1e71      	subs	r1, r6, #1
 8008586:	4628      	mov	r0, r5
 8008588:	f000 fde6 	bl	8009158 <__any_on>
 800858c:	2800      	cmp	r0, #0
 800858e:	d1ed      	bne.n	800856c <__gethex+0x2a2>
 8008590:	4629      	mov	r1, r5
 8008592:	9802      	ldr	r0, [sp, #8]
 8008594:	f000 fa36 	bl	8008a04 <_Bfree>
 8008598:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800859a:	2300      	movs	r3, #0
 800859c:	6013      	str	r3, [r2, #0]
 800859e:	2750      	movs	r7, #80	; 0x50
 80085a0:	e71b      	b.n	80083da <__gethex+0x110>
 80085a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d0e1      	beq.n	800856c <__gethex+0x2a2>
 80085a8:	e7f2      	b.n	8008590 <__gethex+0x2c6>
 80085aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1dd      	bne.n	800856c <__gethex+0x2a2>
 80085b0:	e7ee      	b.n	8008590 <__gethex+0x2c6>
 80085b2:	1e67      	subs	r7, r4, #1
 80085b4:	f1ba 0f00 	cmp.w	sl, #0
 80085b8:	d131      	bne.n	800861e <__gethex+0x354>
 80085ba:	b127      	cbz	r7, 80085c6 <__gethex+0x2fc>
 80085bc:	4639      	mov	r1, r7
 80085be:	4628      	mov	r0, r5
 80085c0:	f000 fdca 	bl	8009158 <__any_on>
 80085c4:	4682      	mov	sl, r0
 80085c6:	117a      	asrs	r2, r7, #5
 80085c8:	2301      	movs	r3, #1
 80085ca:	f007 071f 	and.w	r7, r7, #31
 80085ce:	fa03 f707 	lsl.w	r7, r3, r7
 80085d2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80085d6:	4621      	mov	r1, r4
 80085d8:	421f      	tst	r7, r3
 80085da:	4628      	mov	r0, r5
 80085dc:	bf18      	it	ne
 80085de:	f04a 0a02 	orrne.w	sl, sl, #2
 80085e2:	1b36      	subs	r6, r6, r4
 80085e4:	f7ff fe22 	bl	800822c <rshift>
 80085e8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80085ec:	2702      	movs	r7, #2
 80085ee:	f1ba 0f00 	cmp.w	sl, #0
 80085f2:	d048      	beq.n	8008686 <__gethex+0x3bc>
 80085f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d015      	beq.n	8008628 <__gethex+0x35e>
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d017      	beq.n	8008630 <__gethex+0x366>
 8008600:	2b01      	cmp	r3, #1
 8008602:	d109      	bne.n	8008618 <__gethex+0x34e>
 8008604:	f01a 0f02 	tst.w	sl, #2
 8008608:	d006      	beq.n	8008618 <__gethex+0x34e>
 800860a:	f8d9 3000 	ldr.w	r3, [r9]
 800860e:	ea4a 0a03 	orr.w	sl, sl, r3
 8008612:	f01a 0f01 	tst.w	sl, #1
 8008616:	d10e      	bne.n	8008636 <__gethex+0x36c>
 8008618:	f047 0710 	orr.w	r7, r7, #16
 800861c:	e033      	b.n	8008686 <__gethex+0x3bc>
 800861e:	f04f 0a01 	mov.w	sl, #1
 8008622:	e7d0      	b.n	80085c6 <__gethex+0x2fc>
 8008624:	2701      	movs	r7, #1
 8008626:	e7e2      	b.n	80085ee <__gethex+0x324>
 8008628:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800862a:	f1c3 0301 	rsb	r3, r3, #1
 800862e:	9315      	str	r3, [sp, #84]	; 0x54
 8008630:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008632:	2b00      	cmp	r3, #0
 8008634:	d0f0      	beq.n	8008618 <__gethex+0x34e>
 8008636:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800863a:	f105 0314 	add.w	r3, r5, #20
 800863e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008642:	eb03 010a 	add.w	r1, r3, sl
 8008646:	f04f 0c00 	mov.w	ip, #0
 800864a:	4618      	mov	r0, r3
 800864c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008650:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008654:	d01c      	beq.n	8008690 <__gethex+0x3c6>
 8008656:	3201      	adds	r2, #1
 8008658:	6002      	str	r2, [r0, #0]
 800865a:	2f02      	cmp	r7, #2
 800865c:	f105 0314 	add.w	r3, r5, #20
 8008660:	d138      	bne.n	80086d4 <__gethex+0x40a>
 8008662:	f8d8 2000 	ldr.w	r2, [r8]
 8008666:	3a01      	subs	r2, #1
 8008668:	42b2      	cmp	r2, r6
 800866a:	d10a      	bne.n	8008682 <__gethex+0x3b8>
 800866c:	1171      	asrs	r1, r6, #5
 800866e:	2201      	movs	r2, #1
 8008670:	f006 061f 	and.w	r6, r6, #31
 8008674:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008678:	fa02 f606 	lsl.w	r6, r2, r6
 800867c:	421e      	tst	r6, r3
 800867e:	bf18      	it	ne
 8008680:	4617      	movne	r7, r2
 8008682:	f047 0720 	orr.w	r7, r7, #32
 8008686:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008688:	601d      	str	r5, [r3, #0]
 800868a:	9b06      	ldr	r3, [sp, #24]
 800868c:	601c      	str	r4, [r3, #0]
 800868e:	e6a4      	b.n	80083da <__gethex+0x110>
 8008690:	4299      	cmp	r1, r3
 8008692:	f843 cc04 	str.w	ip, [r3, #-4]
 8008696:	d8d8      	bhi.n	800864a <__gethex+0x380>
 8008698:	68ab      	ldr	r3, [r5, #8]
 800869a:	4599      	cmp	r9, r3
 800869c:	db12      	blt.n	80086c4 <__gethex+0x3fa>
 800869e:	6869      	ldr	r1, [r5, #4]
 80086a0:	9802      	ldr	r0, [sp, #8]
 80086a2:	3101      	adds	r1, #1
 80086a4:	f000 f97a 	bl	800899c <_Balloc>
 80086a8:	692a      	ldr	r2, [r5, #16]
 80086aa:	3202      	adds	r2, #2
 80086ac:	f105 010c 	add.w	r1, r5, #12
 80086b0:	4683      	mov	fp, r0
 80086b2:	0092      	lsls	r2, r2, #2
 80086b4:	300c      	adds	r0, #12
 80086b6:	f7fc ff95 	bl	80055e4 <memcpy>
 80086ba:	4629      	mov	r1, r5
 80086bc:	9802      	ldr	r0, [sp, #8]
 80086be:	f000 f9a1 	bl	8008a04 <_Bfree>
 80086c2:	465d      	mov	r5, fp
 80086c4:	692b      	ldr	r3, [r5, #16]
 80086c6:	1c5a      	adds	r2, r3, #1
 80086c8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80086cc:	612a      	str	r2, [r5, #16]
 80086ce:	2201      	movs	r2, #1
 80086d0:	615a      	str	r2, [r3, #20]
 80086d2:	e7c2      	b.n	800865a <__gethex+0x390>
 80086d4:	692a      	ldr	r2, [r5, #16]
 80086d6:	454a      	cmp	r2, r9
 80086d8:	dd0b      	ble.n	80086f2 <__gethex+0x428>
 80086da:	2101      	movs	r1, #1
 80086dc:	4628      	mov	r0, r5
 80086de:	f7ff fda5 	bl	800822c <rshift>
 80086e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80086e6:	3401      	adds	r4, #1
 80086e8:	42a3      	cmp	r3, r4
 80086ea:	f6ff aed9 	blt.w	80084a0 <__gethex+0x1d6>
 80086ee:	2701      	movs	r7, #1
 80086f0:	e7c7      	b.n	8008682 <__gethex+0x3b8>
 80086f2:	f016 061f 	ands.w	r6, r6, #31
 80086f6:	d0fa      	beq.n	80086ee <__gethex+0x424>
 80086f8:	449a      	add	sl, r3
 80086fa:	f1c6 0620 	rsb	r6, r6, #32
 80086fe:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008702:	f000 fa0f 	bl	8008b24 <__hi0bits>
 8008706:	42b0      	cmp	r0, r6
 8008708:	dbe7      	blt.n	80086da <__gethex+0x410>
 800870a:	e7f0      	b.n	80086ee <__gethex+0x424>

0800870c <L_shift>:
 800870c:	f1c2 0208 	rsb	r2, r2, #8
 8008710:	0092      	lsls	r2, r2, #2
 8008712:	b570      	push	{r4, r5, r6, lr}
 8008714:	f1c2 0620 	rsb	r6, r2, #32
 8008718:	6843      	ldr	r3, [r0, #4]
 800871a:	6804      	ldr	r4, [r0, #0]
 800871c:	fa03 f506 	lsl.w	r5, r3, r6
 8008720:	432c      	orrs	r4, r5
 8008722:	40d3      	lsrs	r3, r2
 8008724:	6004      	str	r4, [r0, #0]
 8008726:	f840 3f04 	str.w	r3, [r0, #4]!
 800872a:	4288      	cmp	r0, r1
 800872c:	d3f4      	bcc.n	8008718 <L_shift+0xc>
 800872e:	bd70      	pop	{r4, r5, r6, pc}

08008730 <__match>:
 8008730:	b530      	push	{r4, r5, lr}
 8008732:	6803      	ldr	r3, [r0, #0]
 8008734:	3301      	adds	r3, #1
 8008736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800873a:	b914      	cbnz	r4, 8008742 <__match+0x12>
 800873c:	6003      	str	r3, [r0, #0]
 800873e:	2001      	movs	r0, #1
 8008740:	bd30      	pop	{r4, r5, pc}
 8008742:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008746:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800874a:	2d19      	cmp	r5, #25
 800874c:	bf98      	it	ls
 800874e:	3220      	addls	r2, #32
 8008750:	42a2      	cmp	r2, r4
 8008752:	d0f0      	beq.n	8008736 <__match+0x6>
 8008754:	2000      	movs	r0, #0
 8008756:	e7f3      	b.n	8008740 <__match+0x10>

08008758 <__hexnan>:
 8008758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875c:	680b      	ldr	r3, [r1, #0]
 800875e:	6801      	ldr	r1, [r0, #0]
 8008760:	115f      	asrs	r7, r3, #5
 8008762:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008766:	f013 031f 	ands.w	r3, r3, #31
 800876a:	b087      	sub	sp, #28
 800876c:	bf18      	it	ne
 800876e:	3704      	addne	r7, #4
 8008770:	2500      	movs	r5, #0
 8008772:	1f3e      	subs	r6, r7, #4
 8008774:	4682      	mov	sl, r0
 8008776:	4690      	mov	r8, r2
 8008778:	9301      	str	r3, [sp, #4]
 800877a:	f847 5c04 	str.w	r5, [r7, #-4]
 800877e:	46b1      	mov	r9, r6
 8008780:	4634      	mov	r4, r6
 8008782:	9502      	str	r5, [sp, #8]
 8008784:	46ab      	mov	fp, r5
 8008786:	784a      	ldrb	r2, [r1, #1]
 8008788:	1c4b      	adds	r3, r1, #1
 800878a:	9303      	str	r3, [sp, #12]
 800878c:	b342      	cbz	r2, 80087e0 <__hexnan+0x88>
 800878e:	4610      	mov	r0, r2
 8008790:	9105      	str	r1, [sp, #20]
 8008792:	9204      	str	r2, [sp, #16]
 8008794:	f7ff fd84 	bl	80082a0 <__hexdig_fun>
 8008798:	2800      	cmp	r0, #0
 800879a:	d143      	bne.n	8008824 <__hexnan+0xcc>
 800879c:	9a04      	ldr	r2, [sp, #16]
 800879e:	9905      	ldr	r1, [sp, #20]
 80087a0:	2a20      	cmp	r2, #32
 80087a2:	d818      	bhi.n	80087d6 <__hexnan+0x7e>
 80087a4:	9b02      	ldr	r3, [sp, #8]
 80087a6:	459b      	cmp	fp, r3
 80087a8:	dd13      	ble.n	80087d2 <__hexnan+0x7a>
 80087aa:	454c      	cmp	r4, r9
 80087ac:	d206      	bcs.n	80087bc <__hexnan+0x64>
 80087ae:	2d07      	cmp	r5, #7
 80087b0:	dc04      	bgt.n	80087bc <__hexnan+0x64>
 80087b2:	462a      	mov	r2, r5
 80087b4:	4649      	mov	r1, r9
 80087b6:	4620      	mov	r0, r4
 80087b8:	f7ff ffa8 	bl	800870c <L_shift>
 80087bc:	4544      	cmp	r4, r8
 80087be:	d944      	bls.n	800884a <__hexnan+0xf2>
 80087c0:	2300      	movs	r3, #0
 80087c2:	f1a4 0904 	sub.w	r9, r4, #4
 80087c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80087ca:	f8cd b008 	str.w	fp, [sp, #8]
 80087ce:	464c      	mov	r4, r9
 80087d0:	461d      	mov	r5, r3
 80087d2:	9903      	ldr	r1, [sp, #12]
 80087d4:	e7d7      	b.n	8008786 <__hexnan+0x2e>
 80087d6:	2a29      	cmp	r2, #41	; 0x29
 80087d8:	d14a      	bne.n	8008870 <__hexnan+0x118>
 80087da:	3102      	adds	r1, #2
 80087dc:	f8ca 1000 	str.w	r1, [sl]
 80087e0:	f1bb 0f00 	cmp.w	fp, #0
 80087e4:	d044      	beq.n	8008870 <__hexnan+0x118>
 80087e6:	454c      	cmp	r4, r9
 80087e8:	d206      	bcs.n	80087f8 <__hexnan+0xa0>
 80087ea:	2d07      	cmp	r5, #7
 80087ec:	dc04      	bgt.n	80087f8 <__hexnan+0xa0>
 80087ee:	462a      	mov	r2, r5
 80087f0:	4649      	mov	r1, r9
 80087f2:	4620      	mov	r0, r4
 80087f4:	f7ff ff8a 	bl	800870c <L_shift>
 80087f8:	4544      	cmp	r4, r8
 80087fa:	d928      	bls.n	800884e <__hexnan+0xf6>
 80087fc:	4643      	mov	r3, r8
 80087fe:	f854 2b04 	ldr.w	r2, [r4], #4
 8008802:	f843 2b04 	str.w	r2, [r3], #4
 8008806:	42a6      	cmp	r6, r4
 8008808:	d2f9      	bcs.n	80087fe <__hexnan+0xa6>
 800880a:	2200      	movs	r2, #0
 800880c:	f843 2b04 	str.w	r2, [r3], #4
 8008810:	429e      	cmp	r6, r3
 8008812:	d2fb      	bcs.n	800880c <__hexnan+0xb4>
 8008814:	6833      	ldr	r3, [r6, #0]
 8008816:	b91b      	cbnz	r3, 8008820 <__hexnan+0xc8>
 8008818:	4546      	cmp	r6, r8
 800881a:	d127      	bne.n	800886c <__hexnan+0x114>
 800881c:	2301      	movs	r3, #1
 800881e:	6033      	str	r3, [r6, #0]
 8008820:	2005      	movs	r0, #5
 8008822:	e026      	b.n	8008872 <__hexnan+0x11a>
 8008824:	3501      	adds	r5, #1
 8008826:	2d08      	cmp	r5, #8
 8008828:	f10b 0b01 	add.w	fp, fp, #1
 800882c:	dd06      	ble.n	800883c <__hexnan+0xe4>
 800882e:	4544      	cmp	r4, r8
 8008830:	d9cf      	bls.n	80087d2 <__hexnan+0x7a>
 8008832:	2300      	movs	r3, #0
 8008834:	f844 3c04 	str.w	r3, [r4, #-4]
 8008838:	2501      	movs	r5, #1
 800883a:	3c04      	subs	r4, #4
 800883c:	6822      	ldr	r2, [r4, #0]
 800883e:	f000 000f 	and.w	r0, r0, #15
 8008842:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008846:	6020      	str	r0, [r4, #0]
 8008848:	e7c3      	b.n	80087d2 <__hexnan+0x7a>
 800884a:	2508      	movs	r5, #8
 800884c:	e7c1      	b.n	80087d2 <__hexnan+0x7a>
 800884e:	9b01      	ldr	r3, [sp, #4]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d0df      	beq.n	8008814 <__hexnan+0xbc>
 8008854:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008858:	f1c3 0320 	rsb	r3, r3, #32
 800885c:	fa22 f303 	lsr.w	r3, r2, r3
 8008860:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008864:	401a      	ands	r2, r3
 8008866:	f847 2c04 	str.w	r2, [r7, #-4]
 800886a:	e7d3      	b.n	8008814 <__hexnan+0xbc>
 800886c:	3e04      	subs	r6, #4
 800886e:	e7d1      	b.n	8008814 <__hexnan+0xbc>
 8008870:	2004      	movs	r0, #4
 8008872:	b007      	add	sp, #28
 8008874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008878 <__locale_ctype_ptr_l>:
 8008878:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800887c:	4770      	bx	lr

0800887e <__localeconv_l>:
 800887e:	30f0      	adds	r0, #240	; 0xf0
 8008880:	4770      	bx	lr
	...

08008884 <_localeconv_r>:
 8008884:	4b04      	ldr	r3, [pc, #16]	; (8008898 <_localeconv_r+0x14>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6a18      	ldr	r0, [r3, #32]
 800888a:	4b04      	ldr	r3, [pc, #16]	; (800889c <_localeconv_r+0x18>)
 800888c:	2800      	cmp	r0, #0
 800888e:	bf08      	it	eq
 8008890:	4618      	moveq	r0, r3
 8008892:	30f0      	adds	r0, #240	; 0xf0
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	2000000c 	.word	0x2000000c
 800889c:	20000070 	.word	0x20000070

080088a0 <__swhatbuf_r>:
 80088a0:	b570      	push	{r4, r5, r6, lr}
 80088a2:	460e      	mov	r6, r1
 80088a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088a8:	2900      	cmp	r1, #0
 80088aa:	b096      	sub	sp, #88	; 0x58
 80088ac:	4614      	mov	r4, r2
 80088ae:	461d      	mov	r5, r3
 80088b0:	da07      	bge.n	80088c2 <__swhatbuf_r+0x22>
 80088b2:	2300      	movs	r3, #0
 80088b4:	602b      	str	r3, [r5, #0]
 80088b6:	89b3      	ldrh	r3, [r6, #12]
 80088b8:	061a      	lsls	r2, r3, #24
 80088ba:	d410      	bmi.n	80088de <__swhatbuf_r+0x3e>
 80088bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088c0:	e00e      	b.n	80088e0 <__swhatbuf_r+0x40>
 80088c2:	466a      	mov	r2, sp
 80088c4:	f001 f846 	bl	8009954 <_fstat_r>
 80088c8:	2800      	cmp	r0, #0
 80088ca:	dbf2      	blt.n	80088b2 <__swhatbuf_r+0x12>
 80088cc:	9a01      	ldr	r2, [sp, #4]
 80088ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80088d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80088d6:	425a      	negs	r2, r3
 80088d8:	415a      	adcs	r2, r3
 80088da:	602a      	str	r2, [r5, #0]
 80088dc:	e7ee      	b.n	80088bc <__swhatbuf_r+0x1c>
 80088de:	2340      	movs	r3, #64	; 0x40
 80088e0:	2000      	movs	r0, #0
 80088e2:	6023      	str	r3, [r4, #0]
 80088e4:	b016      	add	sp, #88	; 0x58
 80088e6:	bd70      	pop	{r4, r5, r6, pc}

080088e8 <__smakebuf_r>:
 80088e8:	898b      	ldrh	r3, [r1, #12]
 80088ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088ec:	079d      	lsls	r5, r3, #30
 80088ee:	4606      	mov	r6, r0
 80088f0:	460c      	mov	r4, r1
 80088f2:	d507      	bpl.n	8008904 <__smakebuf_r+0x1c>
 80088f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80088f8:	6023      	str	r3, [r4, #0]
 80088fa:	6123      	str	r3, [r4, #16]
 80088fc:	2301      	movs	r3, #1
 80088fe:	6163      	str	r3, [r4, #20]
 8008900:	b002      	add	sp, #8
 8008902:	bd70      	pop	{r4, r5, r6, pc}
 8008904:	ab01      	add	r3, sp, #4
 8008906:	466a      	mov	r2, sp
 8008908:	f7ff ffca 	bl	80088a0 <__swhatbuf_r>
 800890c:	9900      	ldr	r1, [sp, #0]
 800890e:	4605      	mov	r5, r0
 8008910:	4630      	mov	r0, r6
 8008912:	f000 fc9f 	bl	8009254 <_malloc_r>
 8008916:	b948      	cbnz	r0, 800892c <__smakebuf_r+0x44>
 8008918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800891c:	059a      	lsls	r2, r3, #22
 800891e:	d4ef      	bmi.n	8008900 <__smakebuf_r+0x18>
 8008920:	f023 0303 	bic.w	r3, r3, #3
 8008924:	f043 0302 	orr.w	r3, r3, #2
 8008928:	81a3      	strh	r3, [r4, #12]
 800892a:	e7e3      	b.n	80088f4 <__smakebuf_r+0xc>
 800892c:	4b0d      	ldr	r3, [pc, #52]	; (8008964 <__smakebuf_r+0x7c>)
 800892e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008930:	89a3      	ldrh	r3, [r4, #12]
 8008932:	6020      	str	r0, [r4, #0]
 8008934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008938:	81a3      	strh	r3, [r4, #12]
 800893a:	9b00      	ldr	r3, [sp, #0]
 800893c:	6163      	str	r3, [r4, #20]
 800893e:	9b01      	ldr	r3, [sp, #4]
 8008940:	6120      	str	r0, [r4, #16]
 8008942:	b15b      	cbz	r3, 800895c <__smakebuf_r+0x74>
 8008944:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008948:	4630      	mov	r0, r6
 800894a:	f001 f815 	bl	8009978 <_isatty_r>
 800894e:	b128      	cbz	r0, 800895c <__smakebuf_r+0x74>
 8008950:	89a3      	ldrh	r3, [r4, #12]
 8008952:	f023 0303 	bic.w	r3, r3, #3
 8008956:	f043 0301 	orr.w	r3, r3, #1
 800895a:	81a3      	strh	r3, [r4, #12]
 800895c:	89a3      	ldrh	r3, [r4, #12]
 800895e:	431d      	orrs	r5, r3
 8008960:	81a5      	strh	r5, [r4, #12]
 8008962:	e7cd      	b.n	8008900 <__smakebuf_r+0x18>
 8008964:	080080e1 	.word	0x080080e1

08008968 <malloc>:
 8008968:	4b02      	ldr	r3, [pc, #8]	; (8008974 <malloc+0xc>)
 800896a:	4601      	mov	r1, r0
 800896c:	6818      	ldr	r0, [r3, #0]
 800896e:	f000 bc71 	b.w	8009254 <_malloc_r>
 8008972:	bf00      	nop
 8008974:	2000000c 	.word	0x2000000c

08008978 <__ascii_mbtowc>:
 8008978:	b082      	sub	sp, #8
 800897a:	b901      	cbnz	r1, 800897e <__ascii_mbtowc+0x6>
 800897c:	a901      	add	r1, sp, #4
 800897e:	b142      	cbz	r2, 8008992 <__ascii_mbtowc+0x1a>
 8008980:	b14b      	cbz	r3, 8008996 <__ascii_mbtowc+0x1e>
 8008982:	7813      	ldrb	r3, [r2, #0]
 8008984:	600b      	str	r3, [r1, #0]
 8008986:	7812      	ldrb	r2, [r2, #0]
 8008988:	1c10      	adds	r0, r2, #0
 800898a:	bf18      	it	ne
 800898c:	2001      	movne	r0, #1
 800898e:	b002      	add	sp, #8
 8008990:	4770      	bx	lr
 8008992:	4610      	mov	r0, r2
 8008994:	e7fb      	b.n	800898e <__ascii_mbtowc+0x16>
 8008996:	f06f 0001 	mvn.w	r0, #1
 800899a:	e7f8      	b.n	800898e <__ascii_mbtowc+0x16>

0800899c <_Balloc>:
 800899c:	b570      	push	{r4, r5, r6, lr}
 800899e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80089a0:	4604      	mov	r4, r0
 80089a2:	460e      	mov	r6, r1
 80089a4:	b93d      	cbnz	r5, 80089b6 <_Balloc+0x1a>
 80089a6:	2010      	movs	r0, #16
 80089a8:	f7ff ffde 	bl	8008968 <malloc>
 80089ac:	6260      	str	r0, [r4, #36]	; 0x24
 80089ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80089b2:	6005      	str	r5, [r0, #0]
 80089b4:	60c5      	str	r5, [r0, #12]
 80089b6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80089b8:	68eb      	ldr	r3, [r5, #12]
 80089ba:	b183      	cbz	r3, 80089de <_Balloc+0x42>
 80089bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80089c4:	b9b8      	cbnz	r0, 80089f6 <_Balloc+0x5a>
 80089c6:	2101      	movs	r1, #1
 80089c8:	fa01 f506 	lsl.w	r5, r1, r6
 80089cc:	1d6a      	adds	r2, r5, #5
 80089ce:	0092      	lsls	r2, r2, #2
 80089d0:	4620      	mov	r0, r4
 80089d2:	f000 fbe2 	bl	800919a <_calloc_r>
 80089d6:	b160      	cbz	r0, 80089f2 <_Balloc+0x56>
 80089d8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80089dc:	e00e      	b.n	80089fc <_Balloc+0x60>
 80089de:	2221      	movs	r2, #33	; 0x21
 80089e0:	2104      	movs	r1, #4
 80089e2:	4620      	mov	r0, r4
 80089e4:	f000 fbd9 	bl	800919a <_calloc_r>
 80089e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089ea:	60e8      	str	r0, [r5, #12]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1e4      	bne.n	80089bc <_Balloc+0x20>
 80089f2:	2000      	movs	r0, #0
 80089f4:	bd70      	pop	{r4, r5, r6, pc}
 80089f6:	6802      	ldr	r2, [r0, #0]
 80089f8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80089fc:	2300      	movs	r3, #0
 80089fe:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a02:	e7f7      	b.n	80089f4 <_Balloc+0x58>

08008a04 <_Bfree>:
 8008a04:	b570      	push	{r4, r5, r6, lr}
 8008a06:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008a08:	4606      	mov	r6, r0
 8008a0a:	460d      	mov	r5, r1
 8008a0c:	b93c      	cbnz	r4, 8008a1e <_Bfree+0x1a>
 8008a0e:	2010      	movs	r0, #16
 8008a10:	f7ff ffaa 	bl	8008968 <malloc>
 8008a14:	6270      	str	r0, [r6, #36]	; 0x24
 8008a16:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a1a:	6004      	str	r4, [r0, #0]
 8008a1c:	60c4      	str	r4, [r0, #12]
 8008a1e:	b13d      	cbz	r5, 8008a30 <_Bfree+0x2c>
 8008a20:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008a22:	686a      	ldr	r2, [r5, #4]
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a2a:	6029      	str	r1, [r5, #0]
 8008a2c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008a30:	bd70      	pop	{r4, r5, r6, pc}

08008a32 <__multadd>:
 8008a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a36:	690d      	ldr	r5, [r1, #16]
 8008a38:	461f      	mov	r7, r3
 8008a3a:	4606      	mov	r6, r0
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	f101 0c14 	add.w	ip, r1, #20
 8008a42:	2300      	movs	r3, #0
 8008a44:	f8dc 0000 	ldr.w	r0, [ip]
 8008a48:	b281      	uxth	r1, r0
 8008a4a:	fb02 7101 	mla	r1, r2, r1, r7
 8008a4e:	0c0f      	lsrs	r7, r1, #16
 8008a50:	0c00      	lsrs	r0, r0, #16
 8008a52:	fb02 7000 	mla	r0, r2, r0, r7
 8008a56:	b289      	uxth	r1, r1
 8008a58:	3301      	adds	r3, #1
 8008a5a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008a5e:	429d      	cmp	r5, r3
 8008a60:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008a64:	f84c 1b04 	str.w	r1, [ip], #4
 8008a68:	dcec      	bgt.n	8008a44 <__multadd+0x12>
 8008a6a:	b1d7      	cbz	r7, 8008aa2 <__multadd+0x70>
 8008a6c:	68a3      	ldr	r3, [r4, #8]
 8008a6e:	42ab      	cmp	r3, r5
 8008a70:	dc12      	bgt.n	8008a98 <__multadd+0x66>
 8008a72:	6861      	ldr	r1, [r4, #4]
 8008a74:	4630      	mov	r0, r6
 8008a76:	3101      	adds	r1, #1
 8008a78:	f7ff ff90 	bl	800899c <_Balloc>
 8008a7c:	6922      	ldr	r2, [r4, #16]
 8008a7e:	3202      	adds	r2, #2
 8008a80:	f104 010c 	add.w	r1, r4, #12
 8008a84:	4680      	mov	r8, r0
 8008a86:	0092      	lsls	r2, r2, #2
 8008a88:	300c      	adds	r0, #12
 8008a8a:	f7fc fdab 	bl	80055e4 <memcpy>
 8008a8e:	4621      	mov	r1, r4
 8008a90:	4630      	mov	r0, r6
 8008a92:	f7ff ffb7 	bl	8008a04 <_Bfree>
 8008a96:	4644      	mov	r4, r8
 8008a98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a9c:	3501      	adds	r5, #1
 8008a9e:	615f      	str	r7, [r3, #20]
 8008aa0:	6125      	str	r5, [r4, #16]
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008aa8 <__s2b>:
 8008aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008aac:	460c      	mov	r4, r1
 8008aae:	4615      	mov	r5, r2
 8008ab0:	461f      	mov	r7, r3
 8008ab2:	2209      	movs	r2, #9
 8008ab4:	3308      	adds	r3, #8
 8008ab6:	4606      	mov	r6, r0
 8008ab8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008abc:	2100      	movs	r1, #0
 8008abe:	2201      	movs	r2, #1
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	db20      	blt.n	8008b06 <__s2b+0x5e>
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	f7ff ff69 	bl	800899c <_Balloc>
 8008aca:	9b08      	ldr	r3, [sp, #32]
 8008acc:	6143      	str	r3, [r0, #20]
 8008ace:	2d09      	cmp	r5, #9
 8008ad0:	f04f 0301 	mov.w	r3, #1
 8008ad4:	6103      	str	r3, [r0, #16]
 8008ad6:	dd19      	ble.n	8008b0c <__s2b+0x64>
 8008ad8:	f104 0809 	add.w	r8, r4, #9
 8008adc:	46c1      	mov	r9, r8
 8008ade:	442c      	add	r4, r5
 8008ae0:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008ae4:	4601      	mov	r1, r0
 8008ae6:	3b30      	subs	r3, #48	; 0x30
 8008ae8:	220a      	movs	r2, #10
 8008aea:	4630      	mov	r0, r6
 8008aec:	f7ff ffa1 	bl	8008a32 <__multadd>
 8008af0:	45a1      	cmp	r9, r4
 8008af2:	d1f5      	bne.n	8008ae0 <__s2b+0x38>
 8008af4:	eb08 0405 	add.w	r4, r8, r5
 8008af8:	3c08      	subs	r4, #8
 8008afa:	1b2d      	subs	r5, r5, r4
 8008afc:	1963      	adds	r3, r4, r5
 8008afe:	42bb      	cmp	r3, r7
 8008b00:	db07      	blt.n	8008b12 <__s2b+0x6a>
 8008b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b06:	0052      	lsls	r2, r2, #1
 8008b08:	3101      	adds	r1, #1
 8008b0a:	e7d9      	b.n	8008ac0 <__s2b+0x18>
 8008b0c:	340a      	adds	r4, #10
 8008b0e:	2509      	movs	r5, #9
 8008b10:	e7f3      	b.n	8008afa <__s2b+0x52>
 8008b12:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008b16:	4601      	mov	r1, r0
 8008b18:	3b30      	subs	r3, #48	; 0x30
 8008b1a:	220a      	movs	r2, #10
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	f7ff ff88 	bl	8008a32 <__multadd>
 8008b22:	e7eb      	b.n	8008afc <__s2b+0x54>

08008b24 <__hi0bits>:
 8008b24:	0c02      	lsrs	r2, r0, #16
 8008b26:	0412      	lsls	r2, r2, #16
 8008b28:	4603      	mov	r3, r0
 8008b2a:	b9b2      	cbnz	r2, 8008b5a <__hi0bits+0x36>
 8008b2c:	0403      	lsls	r3, r0, #16
 8008b2e:	2010      	movs	r0, #16
 8008b30:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008b34:	bf04      	itt	eq
 8008b36:	021b      	lsleq	r3, r3, #8
 8008b38:	3008      	addeq	r0, #8
 8008b3a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008b3e:	bf04      	itt	eq
 8008b40:	011b      	lsleq	r3, r3, #4
 8008b42:	3004      	addeq	r0, #4
 8008b44:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008b48:	bf04      	itt	eq
 8008b4a:	009b      	lsleq	r3, r3, #2
 8008b4c:	3002      	addeq	r0, #2
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	db06      	blt.n	8008b60 <__hi0bits+0x3c>
 8008b52:	005b      	lsls	r3, r3, #1
 8008b54:	d503      	bpl.n	8008b5e <__hi0bits+0x3a>
 8008b56:	3001      	adds	r0, #1
 8008b58:	4770      	bx	lr
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	e7e8      	b.n	8008b30 <__hi0bits+0xc>
 8008b5e:	2020      	movs	r0, #32
 8008b60:	4770      	bx	lr

08008b62 <__lo0bits>:
 8008b62:	6803      	ldr	r3, [r0, #0]
 8008b64:	f013 0207 	ands.w	r2, r3, #7
 8008b68:	4601      	mov	r1, r0
 8008b6a:	d00b      	beq.n	8008b84 <__lo0bits+0x22>
 8008b6c:	07da      	lsls	r2, r3, #31
 8008b6e:	d423      	bmi.n	8008bb8 <__lo0bits+0x56>
 8008b70:	0798      	lsls	r0, r3, #30
 8008b72:	bf49      	itett	mi
 8008b74:	085b      	lsrmi	r3, r3, #1
 8008b76:	089b      	lsrpl	r3, r3, #2
 8008b78:	2001      	movmi	r0, #1
 8008b7a:	600b      	strmi	r3, [r1, #0]
 8008b7c:	bf5c      	itt	pl
 8008b7e:	600b      	strpl	r3, [r1, #0]
 8008b80:	2002      	movpl	r0, #2
 8008b82:	4770      	bx	lr
 8008b84:	b298      	uxth	r0, r3
 8008b86:	b9a8      	cbnz	r0, 8008bb4 <__lo0bits+0x52>
 8008b88:	0c1b      	lsrs	r3, r3, #16
 8008b8a:	2010      	movs	r0, #16
 8008b8c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008b90:	bf04      	itt	eq
 8008b92:	0a1b      	lsreq	r3, r3, #8
 8008b94:	3008      	addeq	r0, #8
 8008b96:	071a      	lsls	r2, r3, #28
 8008b98:	bf04      	itt	eq
 8008b9a:	091b      	lsreq	r3, r3, #4
 8008b9c:	3004      	addeq	r0, #4
 8008b9e:	079a      	lsls	r2, r3, #30
 8008ba0:	bf04      	itt	eq
 8008ba2:	089b      	lsreq	r3, r3, #2
 8008ba4:	3002      	addeq	r0, #2
 8008ba6:	07da      	lsls	r2, r3, #31
 8008ba8:	d402      	bmi.n	8008bb0 <__lo0bits+0x4e>
 8008baa:	085b      	lsrs	r3, r3, #1
 8008bac:	d006      	beq.n	8008bbc <__lo0bits+0x5a>
 8008bae:	3001      	adds	r0, #1
 8008bb0:	600b      	str	r3, [r1, #0]
 8008bb2:	4770      	bx	lr
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	e7e9      	b.n	8008b8c <__lo0bits+0x2a>
 8008bb8:	2000      	movs	r0, #0
 8008bba:	4770      	bx	lr
 8008bbc:	2020      	movs	r0, #32
 8008bbe:	4770      	bx	lr

08008bc0 <__i2b>:
 8008bc0:	b510      	push	{r4, lr}
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	2101      	movs	r1, #1
 8008bc6:	f7ff fee9 	bl	800899c <_Balloc>
 8008bca:	2201      	movs	r2, #1
 8008bcc:	6144      	str	r4, [r0, #20]
 8008bce:	6102      	str	r2, [r0, #16]
 8008bd0:	bd10      	pop	{r4, pc}

08008bd2 <__multiply>:
 8008bd2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd6:	4614      	mov	r4, r2
 8008bd8:	690a      	ldr	r2, [r1, #16]
 8008bda:	6923      	ldr	r3, [r4, #16]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	bfb8      	it	lt
 8008be0:	460b      	movlt	r3, r1
 8008be2:	4688      	mov	r8, r1
 8008be4:	bfbc      	itt	lt
 8008be6:	46a0      	movlt	r8, r4
 8008be8:	461c      	movlt	r4, r3
 8008bea:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008bee:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008bf2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008bf6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008bfa:	eb07 0609 	add.w	r6, r7, r9
 8008bfe:	42b3      	cmp	r3, r6
 8008c00:	bfb8      	it	lt
 8008c02:	3101      	addlt	r1, #1
 8008c04:	f7ff feca 	bl	800899c <_Balloc>
 8008c08:	f100 0514 	add.w	r5, r0, #20
 8008c0c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008c10:	462b      	mov	r3, r5
 8008c12:	2200      	movs	r2, #0
 8008c14:	4573      	cmp	r3, lr
 8008c16:	d316      	bcc.n	8008c46 <__multiply+0x74>
 8008c18:	f104 0214 	add.w	r2, r4, #20
 8008c1c:	f108 0114 	add.w	r1, r8, #20
 8008c20:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008c24:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	9b00      	ldr	r3, [sp, #0]
 8008c2c:	9201      	str	r2, [sp, #4]
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d80c      	bhi.n	8008c4c <__multiply+0x7a>
 8008c32:	2e00      	cmp	r6, #0
 8008c34:	dd03      	ble.n	8008c3e <__multiply+0x6c>
 8008c36:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d05d      	beq.n	8008cfa <__multiply+0x128>
 8008c3e:	6106      	str	r6, [r0, #16]
 8008c40:	b003      	add	sp, #12
 8008c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c46:	f843 2b04 	str.w	r2, [r3], #4
 8008c4a:	e7e3      	b.n	8008c14 <__multiply+0x42>
 8008c4c:	f8b2 b000 	ldrh.w	fp, [r2]
 8008c50:	f1bb 0f00 	cmp.w	fp, #0
 8008c54:	d023      	beq.n	8008c9e <__multiply+0xcc>
 8008c56:	4689      	mov	r9, r1
 8008c58:	46ac      	mov	ip, r5
 8008c5a:	f04f 0800 	mov.w	r8, #0
 8008c5e:	f859 4b04 	ldr.w	r4, [r9], #4
 8008c62:	f8dc a000 	ldr.w	sl, [ip]
 8008c66:	b2a3      	uxth	r3, r4
 8008c68:	fa1f fa8a 	uxth.w	sl, sl
 8008c6c:	fb0b a303 	mla	r3, fp, r3, sl
 8008c70:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008c74:	f8dc 4000 	ldr.w	r4, [ip]
 8008c78:	4443      	add	r3, r8
 8008c7a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008c7e:	fb0b 840a 	mla	r4, fp, sl, r8
 8008c82:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008c86:	46e2      	mov	sl, ip
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008c8e:	454f      	cmp	r7, r9
 8008c90:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008c94:	f84a 3b04 	str.w	r3, [sl], #4
 8008c98:	d82b      	bhi.n	8008cf2 <__multiply+0x120>
 8008c9a:	f8cc 8004 	str.w	r8, [ip, #4]
 8008c9e:	9b01      	ldr	r3, [sp, #4]
 8008ca0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008ca4:	3204      	adds	r2, #4
 8008ca6:	f1ba 0f00 	cmp.w	sl, #0
 8008caa:	d020      	beq.n	8008cee <__multiply+0x11c>
 8008cac:	682b      	ldr	r3, [r5, #0]
 8008cae:	4689      	mov	r9, r1
 8008cb0:	46a8      	mov	r8, r5
 8008cb2:	f04f 0b00 	mov.w	fp, #0
 8008cb6:	f8b9 c000 	ldrh.w	ip, [r9]
 8008cba:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008cbe:	fb0a 440c 	mla	r4, sl, ip, r4
 8008cc2:	445c      	add	r4, fp
 8008cc4:	46c4      	mov	ip, r8
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008ccc:	f84c 3b04 	str.w	r3, [ip], #4
 8008cd0:	f859 3b04 	ldr.w	r3, [r9], #4
 8008cd4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008cd8:	0c1b      	lsrs	r3, r3, #16
 8008cda:	fb0a b303 	mla	r3, sl, r3, fp
 8008cde:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008ce2:	454f      	cmp	r7, r9
 8008ce4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008ce8:	d805      	bhi.n	8008cf6 <__multiply+0x124>
 8008cea:	f8c8 3004 	str.w	r3, [r8, #4]
 8008cee:	3504      	adds	r5, #4
 8008cf0:	e79b      	b.n	8008c2a <__multiply+0x58>
 8008cf2:	46d4      	mov	ip, sl
 8008cf4:	e7b3      	b.n	8008c5e <__multiply+0x8c>
 8008cf6:	46e0      	mov	r8, ip
 8008cf8:	e7dd      	b.n	8008cb6 <__multiply+0xe4>
 8008cfa:	3e01      	subs	r6, #1
 8008cfc:	e799      	b.n	8008c32 <__multiply+0x60>
	...

08008d00 <__pow5mult>:
 8008d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d04:	4615      	mov	r5, r2
 8008d06:	f012 0203 	ands.w	r2, r2, #3
 8008d0a:	4606      	mov	r6, r0
 8008d0c:	460f      	mov	r7, r1
 8008d0e:	d007      	beq.n	8008d20 <__pow5mult+0x20>
 8008d10:	3a01      	subs	r2, #1
 8008d12:	4c21      	ldr	r4, [pc, #132]	; (8008d98 <__pow5mult+0x98>)
 8008d14:	2300      	movs	r3, #0
 8008d16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d1a:	f7ff fe8a 	bl	8008a32 <__multadd>
 8008d1e:	4607      	mov	r7, r0
 8008d20:	10ad      	asrs	r5, r5, #2
 8008d22:	d035      	beq.n	8008d90 <__pow5mult+0x90>
 8008d24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008d26:	b93c      	cbnz	r4, 8008d38 <__pow5mult+0x38>
 8008d28:	2010      	movs	r0, #16
 8008d2a:	f7ff fe1d 	bl	8008968 <malloc>
 8008d2e:	6270      	str	r0, [r6, #36]	; 0x24
 8008d30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d34:	6004      	str	r4, [r0, #0]
 8008d36:	60c4      	str	r4, [r0, #12]
 8008d38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008d3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d40:	b94c      	cbnz	r4, 8008d56 <__pow5mult+0x56>
 8008d42:	f240 2171 	movw	r1, #625	; 0x271
 8008d46:	4630      	mov	r0, r6
 8008d48:	f7ff ff3a 	bl	8008bc0 <__i2b>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d52:	4604      	mov	r4, r0
 8008d54:	6003      	str	r3, [r0, #0]
 8008d56:	f04f 0800 	mov.w	r8, #0
 8008d5a:	07eb      	lsls	r3, r5, #31
 8008d5c:	d50a      	bpl.n	8008d74 <__pow5mult+0x74>
 8008d5e:	4639      	mov	r1, r7
 8008d60:	4622      	mov	r2, r4
 8008d62:	4630      	mov	r0, r6
 8008d64:	f7ff ff35 	bl	8008bd2 <__multiply>
 8008d68:	4639      	mov	r1, r7
 8008d6a:	4681      	mov	r9, r0
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	f7ff fe49 	bl	8008a04 <_Bfree>
 8008d72:	464f      	mov	r7, r9
 8008d74:	106d      	asrs	r5, r5, #1
 8008d76:	d00b      	beq.n	8008d90 <__pow5mult+0x90>
 8008d78:	6820      	ldr	r0, [r4, #0]
 8008d7a:	b938      	cbnz	r0, 8008d8c <__pow5mult+0x8c>
 8008d7c:	4622      	mov	r2, r4
 8008d7e:	4621      	mov	r1, r4
 8008d80:	4630      	mov	r0, r6
 8008d82:	f7ff ff26 	bl	8008bd2 <__multiply>
 8008d86:	6020      	str	r0, [r4, #0]
 8008d88:	f8c0 8000 	str.w	r8, [r0]
 8008d8c:	4604      	mov	r4, r0
 8008d8e:	e7e4      	b.n	8008d5a <__pow5mult+0x5a>
 8008d90:	4638      	mov	r0, r7
 8008d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d96:	bf00      	nop
 8008d98:	08009cf8 	.word	0x08009cf8

08008d9c <__lshift>:
 8008d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008da0:	460c      	mov	r4, r1
 8008da2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008da6:	6923      	ldr	r3, [r4, #16]
 8008da8:	6849      	ldr	r1, [r1, #4]
 8008daa:	eb0a 0903 	add.w	r9, sl, r3
 8008dae:	68a3      	ldr	r3, [r4, #8]
 8008db0:	4607      	mov	r7, r0
 8008db2:	4616      	mov	r6, r2
 8008db4:	f109 0501 	add.w	r5, r9, #1
 8008db8:	42ab      	cmp	r3, r5
 8008dba:	db32      	blt.n	8008e22 <__lshift+0x86>
 8008dbc:	4638      	mov	r0, r7
 8008dbe:	f7ff fded 	bl	800899c <_Balloc>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	4680      	mov	r8, r0
 8008dc6:	f100 0114 	add.w	r1, r0, #20
 8008dca:	461a      	mov	r2, r3
 8008dcc:	4553      	cmp	r3, sl
 8008dce:	db2b      	blt.n	8008e28 <__lshift+0x8c>
 8008dd0:	6920      	ldr	r0, [r4, #16]
 8008dd2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008dd6:	f104 0314 	add.w	r3, r4, #20
 8008dda:	f016 021f 	ands.w	r2, r6, #31
 8008dde:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008de2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008de6:	d025      	beq.n	8008e34 <__lshift+0x98>
 8008de8:	f1c2 0e20 	rsb	lr, r2, #32
 8008dec:	2000      	movs	r0, #0
 8008dee:	681e      	ldr	r6, [r3, #0]
 8008df0:	468a      	mov	sl, r1
 8008df2:	4096      	lsls	r6, r2
 8008df4:	4330      	orrs	r0, r6
 8008df6:	f84a 0b04 	str.w	r0, [sl], #4
 8008dfa:	f853 0b04 	ldr.w	r0, [r3], #4
 8008dfe:	459c      	cmp	ip, r3
 8008e00:	fa20 f00e 	lsr.w	r0, r0, lr
 8008e04:	d814      	bhi.n	8008e30 <__lshift+0x94>
 8008e06:	6048      	str	r0, [r1, #4]
 8008e08:	b108      	cbz	r0, 8008e0e <__lshift+0x72>
 8008e0a:	f109 0502 	add.w	r5, r9, #2
 8008e0e:	3d01      	subs	r5, #1
 8008e10:	4638      	mov	r0, r7
 8008e12:	f8c8 5010 	str.w	r5, [r8, #16]
 8008e16:	4621      	mov	r1, r4
 8008e18:	f7ff fdf4 	bl	8008a04 <_Bfree>
 8008e1c:	4640      	mov	r0, r8
 8008e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e22:	3101      	adds	r1, #1
 8008e24:	005b      	lsls	r3, r3, #1
 8008e26:	e7c7      	b.n	8008db8 <__lshift+0x1c>
 8008e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	e7cd      	b.n	8008dcc <__lshift+0x30>
 8008e30:	4651      	mov	r1, sl
 8008e32:	e7dc      	b.n	8008dee <__lshift+0x52>
 8008e34:	3904      	subs	r1, #4
 8008e36:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e3a:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e3e:	459c      	cmp	ip, r3
 8008e40:	d8f9      	bhi.n	8008e36 <__lshift+0x9a>
 8008e42:	e7e4      	b.n	8008e0e <__lshift+0x72>

08008e44 <__mcmp>:
 8008e44:	6903      	ldr	r3, [r0, #16]
 8008e46:	690a      	ldr	r2, [r1, #16]
 8008e48:	1a9b      	subs	r3, r3, r2
 8008e4a:	b530      	push	{r4, r5, lr}
 8008e4c:	d10c      	bne.n	8008e68 <__mcmp+0x24>
 8008e4e:	0092      	lsls	r2, r2, #2
 8008e50:	3014      	adds	r0, #20
 8008e52:	3114      	adds	r1, #20
 8008e54:	1884      	adds	r4, r0, r2
 8008e56:	4411      	add	r1, r2
 8008e58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008e5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008e60:	4295      	cmp	r5, r2
 8008e62:	d003      	beq.n	8008e6c <__mcmp+0x28>
 8008e64:	d305      	bcc.n	8008e72 <__mcmp+0x2e>
 8008e66:	2301      	movs	r3, #1
 8008e68:	4618      	mov	r0, r3
 8008e6a:	bd30      	pop	{r4, r5, pc}
 8008e6c:	42a0      	cmp	r0, r4
 8008e6e:	d3f3      	bcc.n	8008e58 <__mcmp+0x14>
 8008e70:	e7fa      	b.n	8008e68 <__mcmp+0x24>
 8008e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e76:	e7f7      	b.n	8008e68 <__mcmp+0x24>

08008e78 <__mdiff>:
 8008e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e7c:	460d      	mov	r5, r1
 8008e7e:	4607      	mov	r7, r0
 8008e80:	4611      	mov	r1, r2
 8008e82:	4628      	mov	r0, r5
 8008e84:	4614      	mov	r4, r2
 8008e86:	f7ff ffdd 	bl	8008e44 <__mcmp>
 8008e8a:	1e06      	subs	r6, r0, #0
 8008e8c:	d108      	bne.n	8008ea0 <__mdiff+0x28>
 8008e8e:	4631      	mov	r1, r6
 8008e90:	4638      	mov	r0, r7
 8008e92:	f7ff fd83 	bl	800899c <_Balloc>
 8008e96:	2301      	movs	r3, #1
 8008e98:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea0:	bfa4      	itt	ge
 8008ea2:	4623      	movge	r3, r4
 8008ea4:	462c      	movge	r4, r5
 8008ea6:	4638      	mov	r0, r7
 8008ea8:	6861      	ldr	r1, [r4, #4]
 8008eaa:	bfa6      	itte	ge
 8008eac:	461d      	movge	r5, r3
 8008eae:	2600      	movge	r6, #0
 8008eb0:	2601      	movlt	r6, #1
 8008eb2:	f7ff fd73 	bl	800899c <_Balloc>
 8008eb6:	692b      	ldr	r3, [r5, #16]
 8008eb8:	60c6      	str	r6, [r0, #12]
 8008eba:	6926      	ldr	r6, [r4, #16]
 8008ebc:	f105 0914 	add.w	r9, r5, #20
 8008ec0:	f104 0214 	add.w	r2, r4, #20
 8008ec4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008ec8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008ecc:	f100 0514 	add.w	r5, r0, #20
 8008ed0:	f04f 0e00 	mov.w	lr, #0
 8008ed4:	f852 ab04 	ldr.w	sl, [r2], #4
 8008ed8:	f859 4b04 	ldr.w	r4, [r9], #4
 8008edc:	fa1e f18a 	uxtah	r1, lr, sl
 8008ee0:	b2a3      	uxth	r3, r4
 8008ee2:	1ac9      	subs	r1, r1, r3
 8008ee4:	0c23      	lsrs	r3, r4, #16
 8008ee6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008eea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008eee:	b289      	uxth	r1, r1
 8008ef0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008ef4:	45c8      	cmp	r8, r9
 8008ef6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008efa:	4694      	mov	ip, r2
 8008efc:	f845 3b04 	str.w	r3, [r5], #4
 8008f00:	d8e8      	bhi.n	8008ed4 <__mdiff+0x5c>
 8008f02:	45bc      	cmp	ip, r7
 8008f04:	d304      	bcc.n	8008f10 <__mdiff+0x98>
 8008f06:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008f0a:	b183      	cbz	r3, 8008f2e <__mdiff+0xb6>
 8008f0c:	6106      	str	r6, [r0, #16]
 8008f0e:	e7c5      	b.n	8008e9c <__mdiff+0x24>
 8008f10:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008f14:	fa1e f381 	uxtah	r3, lr, r1
 8008f18:	141a      	asrs	r2, r3, #16
 8008f1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f24:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008f28:	f845 3b04 	str.w	r3, [r5], #4
 8008f2c:	e7e9      	b.n	8008f02 <__mdiff+0x8a>
 8008f2e:	3e01      	subs	r6, #1
 8008f30:	e7e9      	b.n	8008f06 <__mdiff+0x8e>
	...

08008f34 <__ulp>:
 8008f34:	4b12      	ldr	r3, [pc, #72]	; (8008f80 <__ulp+0x4c>)
 8008f36:	ee10 2a90 	vmov	r2, s1
 8008f3a:	401a      	ands	r2, r3
 8008f3c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	dd04      	ble.n	8008f4e <__ulp+0x1a>
 8008f44:	2000      	movs	r0, #0
 8008f46:	4619      	mov	r1, r3
 8008f48:	ec41 0b10 	vmov	d0, r0, r1
 8008f4c:	4770      	bx	lr
 8008f4e:	425b      	negs	r3, r3
 8008f50:	151b      	asrs	r3, r3, #20
 8008f52:	2b13      	cmp	r3, #19
 8008f54:	f04f 0000 	mov.w	r0, #0
 8008f58:	f04f 0100 	mov.w	r1, #0
 8008f5c:	dc04      	bgt.n	8008f68 <__ulp+0x34>
 8008f5e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008f62:	fa42 f103 	asr.w	r1, r2, r3
 8008f66:	e7ef      	b.n	8008f48 <__ulp+0x14>
 8008f68:	3b14      	subs	r3, #20
 8008f6a:	2b1e      	cmp	r3, #30
 8008f6c:	f04f 0201 	mov.w	r2, #1
 8008f70:	bfda      	itte	le
 8008f72:	f1c3 031f 	rsble	r3, r3, #31
 8008f76:	fa02 f303 	lslle.w	r3, r2, r3
 8008f7a:	4613      	movgt	r3, r2
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	e7e3      	b.n	8008f48 <__ulp+0x14>
 8008f80:	7ff00000 	.word	0x7ff00000

08008f84 <__b2d>:
 8008f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f86:	6905      	ldr	r5, [r0, #16]
 8008f88:	f100 0714 	add.w	r7, r0, #20
 8008f8c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008f90:	1f2e      	subs	r6, r5, #4
 8008f92:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008f96:	4620      	mov	r0, r4
 8008f98:	f7ff fdc4 	bl	8008b24 <__hi0bits>
 8008f9c:	f1c0 0320 	rsb	r3, r0, #32
 8008fa0:	280a      	cmp	r0, #10
 8008fa2:	600b      	str	r3, [r1, #0]
 8008fa4:	f8df c074 	ldr.w	ip, [pc, #116]	; 800901c <__b2d+0x98>
 8008fa8:	dc14      	bgt.n	8008fd4 <__b2d+0x50>
 8008faa:	f1c0 0e0b 	rsb	lr, r0, #11
 8008fae:	fa24 f10e 	lsr.w	r1, r4, lr
 8008fb2:	42b7      	cmp	r7, r6
 8008fb4:	ea41 030c 	orr.w	r3, r1, ip
 8008fb8:	bf34      	ite	cc
 8008fba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008fbe:	2100      	movcs	r1, #0
 8008fc0:	3015      	adds	r0, #21
 8008fc2:	fa04 f000 	lsl.w	r0, r4, r0
 8008fc6:	fa21 f10e 	lsr.w	r1, r1, lr
 8008fca:	ea40 0201 	orr.w	r2, r0, r1
 8008fce:	ec43 2b10 	vmov	d0, r2, r3
 8008fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fd4:	42b7      	cmp	r7, r6
 8008fd6:	bf3a      	itte	cc
 8008fd8:	f1a5 0608 	subcc.w	r6, r5, #8
 8008fdc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008fe0:	2100      	movcs	r1, #0
 8008fe2:	380b      	subs	r0, #11
 8008fe4:	d015      	beq.n	8009012 <__b2d+0x8e>
 8008fe6:	4084      	lsls	r4, r0
 8008fe8:	f1c0 0520 	rsb	r5, r0, #32
 8008fec:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8008ff0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8008ff4:	42be      	cmp	r6, r7
 8008ff6:	fa21 fc05 	lsr.w	ip, r1, r5
 8008ffa:	ea44 030c 	orr.w	r3, r4, ip
 8008ffe:	bf8c      	ite	hi
 8009000:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009004:	2400      	movls	r4, #0
 8009006:	fa01 f000 	lsl.w	r0, r1, r0
 800900a:	40ec      	lsrs	r4, r5
 800900c:	ea40 0204 	orr.w	r2, r0, r4
 8009010:	e7dd      	b.n	8008fce <__b2d+0x4a>
 8009012:	ea44 030c 	orr.w	r3, r4, ip
 8009016:	460a      	mov	r2, r1
 8009018:	e7d9      	b.n	8008fce <__b2d+0x4a>
 800901a:	bf00      	nop
 800901c:	3ff00000 	.word	0x3ff00000

08009020 <__d2b>:
 8009020:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009024:	460e      	mov	r6, r1
 8009026:	2101      	movs	r1, #1
 8009028:	ec59 8b10 	vmov	r8, r9, d0
 800902c:	4615      	mov	r5, r2
 800902e:	f7ff fcb5 	bl	800899c <_Balloc>
 8009032:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009036:	4607      	mov	r7, r0
 8009038:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800903c:	bb34      	cbnz	r4, 800908c <__d2b+0x6c>
 800903e:	9301      	str	r3, [sp, #4]
 8009040:	f1b8 0300 	subs.w	r3, r8, #0
 8009044:	d027      	beq.n	8009096 <__d2b+0x76>
 8009046:	a802      	add	r0, sp, #8
 8009048:	f840 3d08 	str.w	r3, [r0, #-8]!
 800904c:	f7ff fd89 	bl	8008b62 <__lo0bits>
 8009050:	9900      	ldr	r1, [sp, #0]
 8009052:	b1f0      	cbz	r0, 8009092 <__d2b+0x72>
 8009054:	9a01      	ldr	r2, [sp, #4]
 8009056:	f1c0 0320 	rsb	r3, r0, #32
 800905a:	fa02 f303 	lsl.w	r3, r2, r3
 800905e:	430b      	orrs	r3, r1
 8009060:	40c2      	lsrs	r2, r0
 8009062:	617b      	str	r3, [r7, #20]
 8009064:	9201      	str	r2, [sp, #4]
 8009066:	9b01      	ldr	r3, [sp, #4]
 8009068:	61bb      	str	r3, [r7, #24]
 800906a:	2b00      	cmp	r3, #0
 800906c:	bf14      	ite	ne
 800906e:	2102      	movne	r1, #2
 8009070:	2101      	moveq	r1, #1
 8009072:	6139      	str	r1, [r7, #16]
 8009074:	b1c4      	cbz	r4, 80090a8 <__d2b+0x88>
 8009076:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800907a:	4404      	add	r4, r0
 800907c:	6034      	str	r4, [r6, #0]
 800907e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009082:	6028      	str	r0, [r5, #0]
 8009084:	4638      	mov	r0, r7
 8009086:	b003      	add	sp, #12
 8009088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800908c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009090:	e7d5      	b.n	800903e <__d2b+0x1e>
 8009092:	6179      	str	r1, [r7, #20]
 8009094:	e7e7      	b.n	8009066 <__d2b+0x46>
 8009096:	a801      	add	r0, sp, #4
 8009098:	f7ff fd63 	bl	8008b62 <__lo0bits>
 800909c:	9b01      	ldr	r3, [sp, #4]
 800909e:	617b      	str	r3, [r7, #20]
 80090a0:	2101      	movs	r1, #1
 80090a2:	6139      	str	r1, [r7, #16]
 80090a4:	3020      	adds	r0, #32
 80090a6:	e7e5      	b.n	8009074 <__d2b+0x54>
 80090a8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80090ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80090b0:	6030      	str	r0, [r6, #0]
 80090b2:	6918      	ldr	r0, [r3, #16]
 80090b4:	f7ff fd36 	bl	8008b24 <__hi0bits>
 80090b8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80090bc:	e7e1      	b.n	8009082 <__d2b+0x62>

080090be <__ratio>:
 80090be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c2:	4688      	mov	r8, r1
 80090c4:	4669      	mov	r1, sp
 80090c6:	4681      	mov	r9, r0
 80090c8:	f7ff ff5c 	bl	8008f84 <__b2d>
 80090cc:	a901      	add	r1, sp, #4
 80090ce:	4640      	mov	r0, r8
 80090d0:	ec57 6b10 	vmov	r6, r7, d0
 80090d4:	f7ff ff56 	bl	8008f84 <__b2d>
 80090d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80090dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80090e0:	eba3 0c02 	sub.w	ip, r3, r2
 80090e4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80090e8:	1a9b      	subs	r3, r3, r2
 80090ea:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80090ee:	ec5b ab10 	vmov	sl, fp, d0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	bfce      	itee	gt
 80090f6:	463a      	movgt	r2, r7
 80090f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80090fc:	465a      	movle	r2, fp
 80090fe:	4659      	mov	r1, fp
 8009100:	463d      	mov	r5, r7
 8009102:	bfd4      	ite	le
 8009104:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8009108:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800910c:	4630      	mov	r0, r6
 800910e:	ee10 2a10 	vmov	r2, s0
 8009112:	460b      	mov	r3, r1
 8009114:	4629      	mov	r1, r5
 8009116:	f7f7 fb99 	bl	800084c <__aeabi_ddiv>
 800911a:	ec41 0b10 	vmov	d0, r0, r1
 800911e:	b003      	add	sp, #12
 8009120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009124 <__copybits>:
 8009124:	3901      	subs	r1, #1
 8009126:	b510      	push	{r4, lr}
 8009128:	1149      	asrs	r1, r1, #5
 800912a:	6914      	ldr	r4, [r2, #16]
 800912c:	3101      	adds	r1, #1
 800912e:	f102 0314 	add.w	r3, r2, #20
 8009132:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009136:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800913a:	42a3      	cmp	r3, r4
 800913c:	4602      	mov	r2, r0
 800913e:	d303      	bcc.n	8009148 <__copybits+0x24>
 8009140:	2300      	movs	r3, #0
 8009142:	428a      	cmp	r2, r1
 8009144:	d305      	bcc.n	8009152 <__copybits+0x2e>
 8009146:	bd10      	pop	{r4, pc}
 8009148:	f853 2b04 	ldr.w	r2, [r3], #4
 800914c:	f840 2b04 	str.w	r2, [r0], #4
 8009150:	e7f3      	b.n	800913a <__copybits+0x16>
 8009152:	f842 3b04 	str.w	r3, [r2], #4
 8009156:	e7f4      	b.n	8009142 <__copybits+0x1e>

08009158 <__any_on>:
 8009158:	f100 0214 	add.w	r2, r0, #20
 800915c:	6900      	ldr	r0, [r0, #16]
 800915e:	114b      	asrs	r3, r1, #5
 8009160:	4298      	cmp	r0, r3
 8009162:	b510      	push	{r4, lr}
 8009164:	db11      	blt.n	800918a <__any_on+0x32>
 8009166:	dd0a      	ble.n	800917e <__any_on+0x26>
 8009168:	f011 011f 	ands.w	r1, r1, #31
 800916c:	d007      	beq.n	800917e <__any_on+0x26>
 800916e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009172:	fa24 f001 	lsr.w	r0, r4, r1
 8009176:	fa00 f101 	lsl.w	r1, r0, r1
 800917a:	428c      	cmp	r4, r1
 800917c:	d10b      	bne.n	8009196 <__any_on+0x3e>
 800917e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009182:	4293      	cmp	r3, r2
 8009184:	d803      	bhi.n	800918e <__any_on+0x36>
 8009186:	2000      	movs	r0, #0
 8009188:	bd10      	pop	{r4, pc}
 800918a:	4603      	mov	r3, r0
 800918c:	e7f7      	b.n	800917e <__any_on+0x26>
 800918e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009192:	2900      	cmp	r1, #0
 8009194:	d0f5      	beq.n	8009182 <__any_on+0x2a>
 8009196:	2001      	movs	r0, #1
 8009198:	e7f6      	b.n	8009188 <__any_on+0x30>

0800919a <_calloc_r>:
 800919a:	b538      	push	{r3, r4, r5, lr}
 800919c:	fb02 f401 	mul.w	r4, r2, r1
 80091a0:	4621      	mov	r1, r4
 80091a2:	f000 f857 	bl	8009254 <_malloc_r>
 80091a6:	4605      	mov	r5, r0
 80091a8:	b118      	cbz	r0, 80091b2 <_calloc_r+0x18>
 80091aa:	4622      	mov	r2, r4
 80091ac:	2100      	movs	r1, #0
 80091ae:	f7fc fa24 	bl	80055fa <memset>
 80091b2:	4628      	mov	r0, r5
 80091b4:	bd38      	pop	{r3, r4, r5, pc}
	...

080091b8 <_free_r>:
 80091b8:	b538      	push	{r3, r4, r5, lr}
 80091ba:	4605      	mov	r5, r0
 80091bc:	2900      	cmp	r1, #0
 80091be:	d045      	beq.n	800924c <_free_r+0x94>
 80091c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091c4:	1f0c      	subs	r4, r1, #4
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	bfb8      	it	lt
 80091ca:	18e4      	addlt	r4, r4, r3
 80091cc:	f000 fc0f 	bl	80099ee <__malloc_lock>
 80091d0:	4a1f      	ldr	r2, [pc, #124]	; (8009250 <_free_r+0x98>)
 80091d2:	6813      	ldr	r3, [r2, #0]
 80091d4:	4610      	mov	r0, r2
 80091d6:	b933      	cbnz	r3, 80091e6 <_free_r+0x2e>
 80091d8:	6063      	str	r3, [r4, #4]
 80091da:	6014      	str	r4, [r2, #0]
 80091dc:	4628      	mov	r0, r5
 80091de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091e2:	f000 bc05 	b.w	80099f0 <__malloc_unlock>
 80091e6:	42a3      	cmp	r3, r4
 80091e8:	d90c      	bls.n	8009204 <_free_r+0x4c>
 80091ea:	6821      	ldr	r1, [r4, #0]
 80091ec:	1862      	adds	r2, r4, r1
 80091ee:	4293      	cmp	r3, r2
 80091f0:	bf04      	itt	eq
 80091f2:	681a      	ldreq	r2, [r3, #0]
 80091f4:	685b      	ldreq	r3, [r3, #4]
 80091f6:	6063      	str	r3, [r4, #4]
 80091f8:	bf04      	itt	eq
 80091fa:	1852      	addeq	r2, r2, r1
 80091fc:	6022      	streq	r2, [r4, #0]
 80091fe:	6004      	str	r4, [r0, #0]
 8009200:	e7ec      	b.n	80091dc <_free_r+0x24>
 8009202:	4613      	mov	r3, r2
 8009204:	685a      	ldr	r2, [r3, #4]
 8009206:	b10a      	cbz	r2, 800920c <_free_r+0x54>
 8009208:	42a2      	cmp	r2, r4
 800920a:	d9fa      	bls.n	8009202 <_free_r+0x4a>
 800920c:	6819      	ldr	r1, [r3, #0]
 800920e:	1858      	adds	r0, r3, r1
 8009210:	42a0      	cmp	r0, r4
 8009212:	d10b      	bne.n	800922c <_free_r+0x74>
 8009214:	6820      	ldr	r0, [r4, #0]
 8009216:	4401      	add	r1, r0
 8009218:	1858      	adds	r0, r3, r1
 800921a:	4282      	cmp	r2, r0
 800921c:	6019      	str	r1, [r3, #0]
 800921e:	d1dd      	bne.n	80091dc <_free_r+0x24>
 8009220:	6810      	ldr	r0, [r2, #0]
 8009222:	6852      	ldr	r2, [r2, #4]
 8009224:	605a      	str	r2, [r3, #4]
 8009226:	4401      	add	r1, r0
 8009228:	6019      	str	r1, [r3, #0]
 800922a:	e7d7      	b.n	80091dc <_free_r+0x24>
 800922c:	d902      	bls.n	8009234 <_free_r+0x7c>
 800922e:	230c      	movs	r3, #12
 8009230:	602b      	str	r3, [r5, #0]
 8009232:	e7d3      	b.n	80091dc <_free_r+0x24>
 8009234:	6820      	ldr	r0, [r4, #0]
 8009236:	1821      	adds	r1, r4, r0
 8009238:	428a      	cmp	r2, r1
 800923a:	bf04      	itt	eq
 800923c:	6811      	ldreq	r1, [r2, #0]
 800923e:	6852      	ldreq	r2, [r2, #4]
 8009240:	6062      	str	r2, [r4, #4]
 8009242:	bf04      	itt	eq
 8009244:	1809      	addeq	r1, r1, r0
 8009246:	6021      	streq	r1, [r4, #0]
 8009248:	605c      	str	r4, [r3, #4]
 800924a:	e7c7      	b.n	80091dc <_free_r+0x24>
 800924c:	bd38      	pop	{r3, r4, r5, pc}
 800924e:	bf00      	nop
 8009250:	20000204 	.word	0x20000204

08009254 <_malloc_r>:
 8009254:	b570      	push	{r4, r5, r6, lr}
 8009256:	1ccd      	adds	r5, r1, #3
 8009258:	f025 0503 	bic.w	r5, r5, #3
 800925c:	3508      	adds	r5, #8
 800925e:	2d0c      	cmp	r5, #12
 8009260:	bf38      	it	cc
 8009262:	250c      	movcc	r5, #12
 8009264:	2d00      	cmp	r5, #0
 8009266:	4606      	mov	r6, r0
 8009268:	db01      	blt.n	800926e <_malloc_r+0x1a>
 800926a:	42a9      	cmp	r1, r5
 800926c:	d903      	bls.n	8009276 <_malloc_r+0x22>
 800926e:	230c      	movs	r3, #12
 8009270:	6033      	str	r3, [r6, #0]
 8009272:	2000      	movs	r0, #0
 8009274:	bd70      	pop	{r4, r5, r6, pc}
 8009276:	f000 fbba 	bl	80099ee <__malloc_lock>
 800927a:	4a21      	ldr	r2, [pc, #132]	; (8009300 <_malloc_r+0xac>)
 800927c:	6814      	ldr	r4, [r2, #0]
 800927e:	4621      	mov	r1, r4
 8009280:	b991      	cbnz	r1, 80092a8 <_malloc_r+0x54>
 8009282:	4c20      	ldr	r4, [pc, #128]	; (8009304 <_malloc_r+0xb0>)
 8009284:	6823      	ldr	r3, [r4, #0]
 8009286:	b91b      	cbnz	r3, 8009290 <_malloc_r+0x3c>
 8009288:	4630      	mov	r0, r6
 800928a:	f000 facf 	bl	800982c <_sbrk_r>
 800928e:	6020      	str	r0, [r4, #0]
 8009290:	4629      	mov	r1, r5
 8009292:	4630      	mov	r0, r6
 8009294:	f000 faca 	bl	800982c <_sbrk_r>
 8009298:	1c43      	adds	r3, r0, #1
 800929a:	d124      	bne.n	80092e6 <_malloc_r+0x92>
 800929c:	230c      	movs	r3, #12
 800929e:	6033      	str	r3, [r6, #0]
 80092a0:	4630      	mov	r0, r6
 80092a2:	f000 fba5 	bl	80099f0 <__malloc_unlock>
 80092a6:	e7e4      	b.n	8009272 <_malloc_r+0x1e>
 80092a8:	680b      	ldr	r3, [r1, #0]
 80092aa:	1b5b      	subs	r3, r3, r5
 80092ac:	d418      	bmi.n	80092e0 <_malloc_r+0x8c>
 80092ae:	2b0b      	cmp	r3, #11
 80092b0:	d90f      	bls.n	80092d2 <_malloc_r+0x7e>
 80092b2:	600b      	str	r3, [r1, #0]
 80092b4:	50cd      	str	r5, [r1, r3]
 80092b6:	18cc      	adds	r4, r1, r3
 80092b8:	4630      	mov	r0, r6
 80092ba:	f000 fb99 	bl	80099f0 <__malloc_unlock>
 80092be:	f104 000b 	add.w	r0, r4, #11
 80092c2:	1d23      	adds	r3, r4, #4
 80092c4:	f020 0007 	bic.w	r0, r0, #7
 80092c8:	1ac3      	subs	r3, r0, r3
 80092ca:	d0d3      	beq.n	8009274 <_malloc_r+0x20>
 80092cc:	425a      	negs	r2, r3
 80092ce:	50e2      	str	r2, [r4, r3]
 80092d0:	e7d0      	b.n	8009274 <_malloc_r+0x20>
 80092d2:	428c      	cmp	r4, r1
 80092d4:	684b      	ldr	r3, [r1, #4]
 80092d6:	bf16      	itet	ne
 80092d8:	6063      	strne	r3, [r4, #4]
 80092da:	6013      	streq	r3, [r2, #0]
 80092dc:	460c      	movne	r4, r1
 80092de:	e7eb      	b.n	80092b8 <_malloc_r+0x64>
 80092e0:	460c      	mov	r4, r1
 80092e2:	6849      	ldr	r1, [r1, #4]
 80092e4:	e7cc      	b.n	8009280 <_malloc_r+0x2c>
 80092e6:	1cc4      	adds	r4, r0, #3
 80092e8:	f024 0403 	bic.w	r4, r4, #3
 80092ec:	42a0      	cmp	r0, r4
 80092ee:	d005      	beq.n	80092fc <_malloc_r+0xa8>
 80092f0:	1a21      	subs	r1, r4, r0
 80092f2:	4630      	mov	r0, r6
 80092f4:	f000 fa9a 	bl	800982c <_sbrk_r>
 80092f8:	3001      	adds	r0, #1
 80092fa:	d0cf      	beq.n	800929c <_malloc_r+0x48>
 80092fc:	6025      	str	r5, [r4, #0]
 80092fe:	e7db      	b.n	80092b8 <_malloc_r+0x64>
 8009300:	20000204 	.word	0x20000204
 8009304:	20000208 	.word	0x20000208

08009308 <__ssputs_r>:
 8009308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800930c:	688e      	ldr	r6, [r1, #8]
 800930e:	429e      	cmp	r6, r3
 8009310:	4682      	mov	sl, r0
 8009312:	460c      	mov	r4, r1
 8009314:	4690      	mov	r8, r2
 8009316:	4699      	mov	r9, r3
 8009318:	d837      	bhi.n	800938a <__ssputs_r+0x82>
 800931a:	898a      	ldrh	r2, [r1, #12]
 800931c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009320:	d031      	beq.n	8009386 <__ssputs_r+0x7e>
 8009322:	6825      	ldr	r5, [r4, #0]
 8009324:	6909      	ldr	r1, [r1, #16]
 8009326:	1a6f      	subs	r7, r5, r1
 8009328:	6965      	ldr	r5, [r4, #20]
 800932a:	2302      	movs	r3, #2
 800932c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009330:	fb95 f5f3 	sdiv	r5, r5, r3
 8009334:	f109 0301 	add.w	r3, r9, #1
 8009338:	443b      	add	r3, r7
 800933a:	429d      	cmp	r5, r3
 800933c:	bf38      	it	cc
 800933e:	461d      	movcc	r5, r3
 8009340:	0553      	lsls	r3, r2, #21
 8009342:	d530      	bpl.n	80093a6 <__ssputs_r+0x9e>
 8009344:	4629      	mov	r1, r5
 8009346:	f7ff ff85 	bl	8009254 <_malloc_r>
 800934a:	4606      	mov	r6, r0
 800934c:	b950      	cbnz	r0, 8009364 <__ssputs_r+0x5c>
 800934e:	230c      	movs	r3, #12
 8009350:	f8ca 3000 	str.w	r3, [sl]
 8009354:	89a3      	ldrh	r3, [r4, #12]
 8009356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800935a:	81a3      	strh	r3, [r4, #12]
 800935c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009364:	463a      	mov	r2, r7
 8009366:	6921      	ldr	r1, [r4, #16]
 8009368:	f7fc f93c 	bl	80055e4 <memcpy>
 800936c:	89a3      	ldrh	r3, [r4, #12]
 800936e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009376:	81a3      	strh	r3, [r4, #12]
 8009378:	6126      	str	r6, [r4, #16]
 800937a:	6165      	str	r5, [r4, #20]
 800937c:	443e      	add	r6, r7
 800937e:	1bed      	subs	r5, r5, r7
 8009380:	6026      	str	r6, [r4, #0]
 8009382:	60a5      	str	r5, [r4, #8]
 8009384:	464e      	mov	r6, r9
 8009386:	454e      	cmp	r6, r9
 8009388:	d900      	bls.n	800938c <__ssputs_r+0x84>
 800938a:	464e      	mov	r6, r9
 800938c:	4632      	mov	r2, r6
 800938e:	4641      	mov	r1, r8
 8009390:	6820      	ldr	r0, [r4, #0]
 8009392:	f000 fb13 	bl	80099bc <memmove>
 8009396:	68a3      	ldr	r3, [r4, #8]
 8009398:	1b9b      	subs	r3, r3, r6
 800939a:	60a3      	str	r3, [r4, #8]
 800939c:	6823      	ldr	r3, [r4, #0]
 800939e:	441e      	add	r6, r3
 80093a0:	6026      	str	r6, [r4, #0]
 80093a2:	2000      	movs	r0, #0
 80093a4:	e7dc      	b.n	8009360 <__ssputs_r+0x58>
 80093a6:	462a      	mov	r2, r5
 80093a8:	f000 fb23 	bl	80099f2 <_realloc_r>
 80093ac:	4606      	mov	r6, r0
 80093ae:	2800      	cmp	r0, #0
 80093b0:	d1e2      	bne.n	8009378 <__ssputs_r+0x70>
 80093b2:	6921      	ldr	r1, [r4, #16]
 80093b4:	4650      	mov	r0, sl
 80093b6:	f7ff feff 	bl	80091b8 <_free_r>
 80093ba:	e7c8      	b.n	800934e <__ssputs_r+0x46>

080093bc <_svfiprintf_r>:
 80093bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c0:	461d      	mov	r5, r3
 80093c2:	898b      	ldrh	r3, [r1, #12]
 80093c4:	061f      	lsls	r7, r3, #24
 80093c6:	b09d      	sub	sp, #116	; 0x74
 80093c8:	4680      	mov	r8, r0
 80093ca:	460c      	mov	r4, r1
 80093cc:	4616      	mov	r6, r2
 80093ce:	d50f      	bpl.n	80093f0 <_svfiprintf_r+0x34>
 80093d0:	690b      	ldr	r3, [r1, #16]
 80093d2:	b96b      	cbnz	r3, 80093f0 <_svfiprintf_r+0x34>
 80093d4:	2140      	movs	r1, #64	; 0x40
 80093d6:	f7ff ff3d 	bl	8009254 <_malloc_r>
 80093da:	6020      	str	r0, [r4, #0]
 80093dc:	6120      	str	r0, [r4, #16]
 80093de:	b928      	cbnz	r0, 80093ec <_svfiprintf_r+0x30>
 80093e0:	230c      	movs	r3, #12
 80093e2:	f8c8 3000 	str.w	r3, [r8]
 80093e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093ea:	e0c8      	b.n	800957e <_svfiprintf_r+0x1c2>
 80093ec:	2340      	movs	r3, #64	; 0x40
 80093ee:	6163      	str	r3, [r4, #20]
 80093f0:	2300      	movs	r3, #0
 80093f2:	9309      	str	r3, [sp, #36]	; 0x24
 80093f4:	2320      	movs	r3, #32
 80093f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093fa:	2330      	movs	r3, #48	; 0x30
 80093fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009400:	9503      	str	r5, [sp, #12]
 8009402:	f04f 0b01 	mov.w	fp, #1
 8009406:	4637      	mov	r7, r6
 8009408:	463d      	mov	r5, r7
 800940a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800940e:	b10b      	cbz	r3, 8009414 <_svfiprintf_r+0x58>
 8009410:	2b25      	cmp	r3, #37	; 0x25
 8009412:	d13e      	bne.n	8009492 <_svfiprintf_r+0xd6>
 8009414:	ebb7 0a06 	subs.w	sl, r7, r6
 8009418:	d00b      	beq.n	8009432 <_svfiprintf_r+0x76>
 800941a:	4653      	mov	r3, sl
 800941c:	4632      	mov	r2, r6
 800941e:	4621      	mov	r1, r4
 8009420:	4640      	mov	r0, r8
 8009422:	f7ff ff71 	bl	8009308 <__ssputs_r>
 8009426:	3001      	adds	r0, #1
 8009428:	f000 80a4 	beq.w	8009574 <_svfiprintf_r+0x1b8>
 800942c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800942e:	4453      	add	r3, sl
 8009430:	9309      	str	r3, [sp, #36]	; 0x24
 8009432:	783b      	ldrb	r3, [r7, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	f000 809d 	beq.w	8009574 <_svfiprintf_r+0x1b8>
 800943a:	2300      	movs	r3, #0
 800943c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009440:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009444:	9304      	str	r3, [sp, #16]
 8009446:	9307      	str	r3, [sp, #28]
 8009448:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800944c:	931a      	str	r3, [sp, #104]	; 0x68
 800944e:	462f      	mov	r7, r5
 8009450:	2205      	movs	r2, #5
 8009452:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009456:	4850      	ldr	r0, [pc, #320]	; (8009598 <_svfiprintf_r+0x1dc>)
 8009458:	f7f6 fec2 	bl	80001e0 <memchr>
 800945c:	9b04      	ldr	r3, [sp, #16]
 800945e:	b9d0      	cbnz	r0, 8009496 <_svfiprintf_r+0xda>
 8009460:	06d9      	lsls	r1, r3, #27
 8009462:	bf44      	itt	mi
 8009464:	2220      	movmi	r2, #32
 8009466:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800946a:	071a      	lsls	r2, r3, #28
 800946c:	bf44      	itt	mi
 800946e:	222b      	movmi	r2, #43	; 0x2b
 8009470:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009474:	782a      	ldrb	r2, [r5, #0]
 8009476:	2a2a      	cmp	r2, #42	; 0x2a
 8009478:	d015      	beq.n	80094a6 <_svfiprintf_r+0xea>
 800947a:	9a07      	ldr	r2, [sp, #28]
 800947c:	462f      	mov	r7, r5
 800947e:	2000      	movs	r0, #0
 8009480:	250a      	movs	r5, #10
 8009482:	4639      	mov	r1, r7
 8009484:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009488:	3b30      	subs	r3, #48	; 0x30
 800948a:	2b09      	cmp	r3, #9
 800948c:	d94d      	bls.n	800952a <_svfiprintf_r+0x16e>
 800948e:	b1b8      	cbz	r0, 80094c0 <_svfiprintf_r+0x104>
 8009490:	e00f      	b.n	80094b2 <_svfiprintf_r+0xf6>
 8009492:	462f      	mov	r7, r5
 8009494:	e7b8      	b.n	8009408 <_svfiprintf_r+0x4c>
 8009496:	4a40      	ldr	r2, [pc, #256]	; (8009598 <_svfiprintf_r+0x1dc>)
 8009498:	1a80      	subs	r0, r0, r2
 800949a:	fa0b f000 	lsl.w	r0, fp, r0
 800949e:	4318      	orrs	r0, r3
 80094a0:	9004      	str	r0, [sp, #16]
 80094a2:	463d      	mov	r5, r7
 80094a4:	e7d3      	b.n	800944e <_svfiprintf_r+0x92>
 80094a6:	9a03      	ldr	r2, [sp, #12]
 80094a8:	1d11      	adds	r1, r2, #4
 80094aa:	6812      	ldr	r2, [r2, #0]
 80094ac:	9103      	str	r1, [sp, #12]
 80094ae:	2a00      	cmp	r2, #0
 80094b0:	db01      	blt.n	80094b6 <_svfiprintf_r+0xfa>
 80094b2:	9207      	str	r2, [sp, #28]
 80094b4:	e004      	b.n	80094c0 <_svfiprintf_r+0x104>
 80094b6:	4252      	negs	r2, r2
 80094b8:	f043 0302 	orr.w	r3, r3, #2
 80094bc:	9207      	str	r2, [sp, #28]
 80094be:	9304      	str	r3, [sp, #16]
 80094c0:	783b      	ldrb	r3, [r7, #0]
 80094c2:	2b2e      	cmp	r3, #46	; 0x2e
 80094c4:	d10c      	bne.n	80094e0 <_svfiprintf_r+0x124>
 80094c6:	787b      	ldrb	r3, [r7, #1]
 80094c8:	2b2a      	cmp	r3, #42	; 0x2a
 80094ca:	d133      	bne.n	8009534 <_svfiprintf_r+0x178>
 80094cc:	9b03      	ldr	r3, [sp, #12]
 80094ce:	1d1a      	adds	r2, r3, #4
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	9203      	str	r2, [sp, #12]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	bfb8      	it	lt
 80094d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80094dc:	3702      	adds	r7, #2
 80094de:	9305      	str	r3, [sp, #20]
 80094e0:	4d2e      	ldr	r5, [pc, #184]	; (800959c <_svfiprintf_r+0x1e0>)
 80094e2:	7839      	ldrb	r1, [r7, #0]
 80094e4:	2203      	movs	r2, #3
 80094e6:	4628      	mov	r0, r5
 80094e8:	f7f6 fe7a 	bl	80001e0 <memchr>
 80094ec:	b138      	cbz	r0, 80094fe <_svfiprintf_r+0x142>
 80094ee:	2340      	movs	r3, #64	; 0x40
 80094f0:	1b40      	subs	r0, r0, r5
 80094f2:	fa03 f000 	lsl.w	r0, r3, r0
 80094f6:	9b04      	ldr	r3, [sp, #16]
 80094f8:	4303      	orrs	r3, r0
 80094fa:	3701      	adds	r7, #1
 80094fc:	9304      	str	r3, [sp, #16]
 80094fe:	7839      	ldrb	r1, [r7, #0]
 8009500:	4827      	ldr	r0, [pc, #156]	; (80095a0 <_svfiprintf_r+0x1e4>)
 8009502:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009506:	2206      	movs	r2, #6
 8009508:	1c7e      	adds	r6, r7, #1
 800950a:	f7f6 fe69 	bl	80001e0 <memchr>
 800950e:	2800      	cmp	r0, #0
 8009510:	d038      	beq.n	8009584 <_svfiprintf_r+0x1c8>
 8009512:	4b24      	ldr	r3, [pc, #144]	; (80095a4 <_svfiprintf_r+0x1e8>)
 8009514:	bb13      	cbnz	r3, 800955c <_svfiprintf_r+0x1a0>
 8009516:	9b03      	ldr	r3, [sp, #12]
 8009518:	3307      	adds	r3, #7
 800951a:	f023 0307 	bic.w	r3, r3, #7
 800951e:	3308      	adds	r3, #8
 8009520:	9303      	str	r3, [sp, #12]
 8009522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009524:	444b      	add	r3, r9
 8009526:	9309      	str	r3, [sp, #36]	; 0x24
 8009528:	e76d      	b.n	8009406 <_svfiprintf_r+0x4a>
 800952a:	fb05 3202 	mla	r2, r5, r2, r3
 800952e:	2001      	movs	r0, #1
 8009530:	460f      	mov	r7, r1
 8009532:	e7a6      	b.n	8009482 <_svfiprintf_r+0xc6>
 8009534:	2300      	movs	r3, #0
 8009536:	3701      	adds	r7, #1
 8009538:	9305      	str	r3, [sp, #20]
 800953a:	4619      	mov	r1, r3
 800953c:	250a      	movs	r5, #10
 800953e:	4638      	mov	r0, r7
 8009540:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009544:	3a30      	subs	r2, #48	; 0x30
 8009546:	2a09      	cmp	r2, #9
 8009548:	d903      	bls.n	8009552 <_svfiprintf_r+0x196>
 800954a:	2b00      	cmp	r3, #0
 800954c:	d0c8      	beq.n	80094e0 <_svfiprintf_r+0x124>
 800954e:	9105      	str	r1, [sp, #20]
 8009550:	e7c6      	b.n	80094e0 <_svfiprintf_r+0x124>
 8009552:	fb05 2101 	mla	r1, r5, r1, r2
 8009556:	2301      	movs	r3, #1
 8009558:	4607      	mov	r7, r0
 800955a:	e7f0      	b.n	800953e <_svfiprintf_r+0x182>
 800955c:	ab03      	add	r3, sp, #12
 800955e:	9300      	str	r3, [sp, #0]
 8009560:	4622      	mov	r2, r4
 8009562:	4b11      	ldr	r3, [pc, #68]	; (80095a8 <_svfiprintf_r+0x1ec>)
 8009564:	a904      	add	r1, sp, #16
 8009566:	4640      	mov	r0, r8
 8009568:	f7fc f8e4 	bl	8005734 <_printf_float>
 800956c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009570:	4681      	mov	r9, r0
 8009572:	d1d6      	bne.n	8009522 <_svfiprintf_r+0x166>
 8009574:	89a3      	ldrh	r3, [r4, #12]
 8009576:	065b      	lsls	r3, r3, #25
 8009578:	f53f af35 	bmi.w	80093e6 <_svfiprintf_r+0x2a>
 800957c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800957e:	b01d      	add	sp, #116	; 0x74
 8009580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009584:	ab03      	add	r3, sp, #12
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	4622      	mov	r2, r4
 800958a:	4b07      	ldr	r3, [pc, #28]	; (80095a8 <_svfiprintf_r+0x1ec>)
 800958c:	a904      	add	r1, sp, #16
 800958e:	4640      	mov	r0, r8
 8009590:	f7fc fb86 	bl	8005ca0 <_printf_i>
 8009594:	e7ea      	b.n	800956c <_svfiprintf_r+0x1b0>
 8009596:	bf00      	nop
 8009598:	08009d04 	.word	0x08009d04
 800959c:	08009d0a 	.word	0x08009d0a
 80095a0:	08009d0e 	.word	0x08009d0e
 80095a4:	08005735 	.word	0x08005735
 80095a8:	08009309 	.word	0x08009309

080095ac <__sfputc_r>:
 80095ac:	6893      	ldr	r3, [r2, #8]
 80095ae:	3b01      	subs	r3, #1
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	b410      	push	{r4}
 80095b4:	6093      	str	r3, [r2, #8]
 80095b6:	da08      	bge.n	80095ca <__sfputc_r+0x1e>
 80095b8:	6994      	ldr	r4, [r2, #24]
 80095ba:	42a3      	cmp	r3, r4
 80095bc:	db01      	blt.n	80095c2 <__sfputc_r+0x16>
 80095be:	290a      	cmp	r1, #10
 80095c0:	d103      	bne.n	80095ca <__sfputc_r+0x1e>
 80095c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095c6:	f7fd bdb1 	b.w	800712c <__swbuf_r>
 80095ca:	6813      	ldr	r3, [r2, #0]
 80095cc:	1c58      	adds	r0, r3, #1
 80095ce:	6010      	str	r0, [r2, #0]
 80095d0:	7019      	strb	r1, [r3, #0]
 80095d2:	4608      	mov	r0, r1
 80095d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095d8:	4770      	bx	lr

080095da <__sfputs_r>:
 80095da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095dc:	4606      	mov	r6, r0
 80095de:	460f      	mov	r7, r1
 80095e0:	4614      	mov	r4, r2
 80095e2:	18d5      	adds	r5, r2, r3
 80095e4:	42ac      	cmp	r4, r5
 80095e6:	d101      	bne.n	80095ec <__sfputs_r+0x12>
 80095e8:	2000      	movs	r0, #0
 80095ea:	e007      	b.n	80095fc <__sfputs_r+0x22>
 80095ec:	463a      	mov	r2, r7
 80095ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095f2:	4630      	mov	r0, r6
 80095f4:	f7ff ffda 	bl	80095ac <__sfputc_r>
 80095f8:	1c43      	adds	r3, r0, #1
 80095fa:	d1f3      	bne.n	80095e4 <__sfputs_r+0xa>
 80095fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009600 <_vfiprintf_r>:
 8009600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009604:	460c      	mov	r4, r1
 8009606:	b09d      	sub	sp, #116	; 0x74
 8009608:	4617      	mov	r7, r2
 800960a:	461d      	mov	r5, r3
 800960c:	4606      	mov	r6, r0
 800960e:	b118      	cbz	r0, 8009618 <_vfiprintf_r+0x18>
 8009610:	6983      	ldr	r3, [r0, #24]
 8009612:	b90b      	cbnz	r3, 8009618 <_vfiprintf_r+0x18>
 8009614:	f7fe fd80 	bl	8008118 <__sinit>
 8009618:	4b7c      	ldr	r3, [pc, #496]	; (800980c <_vfiprintf_r+0x20c>)
 800961a:	429c      	cmp	r4, r3
 800961c:	d158      	bne.n	80096d0 <_vfiprintf_r+0xd0>
 800961e:	6874      	ldr	r4, [r6, #4]
 8009620:	89a3      	ldrh	r3, [r4, #12]
 8009622:	0718      	lsls	r0, r3, #28
 8009624:	d55e      	bpl.n	80096e4 <_vfiprintf_r+0xe4>
 8009626:	6923      	ldr	r3, [r4, #16]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d05b      	beq.n	80096e4 <_vfiprintf_r+0xe4>
 800962c:	2300      	movs	r3, #0
 800962e:	9309      	str	r3, [sp, #36]	; 0x24
 8009630:	2320      	movs	r3, #32
 8009632:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009636:	2330      	movs	r3, #48	; 0x30
 8009638:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800963c:	9503      	str	r5, [sp, #12]
 800963e:	f04f 0b01 	mov.w	fp, #1
 8009642:	46b8      	mov	r8, r7
 8009644:	4645      	mov	r5, r8
 8009646:	f815 3b01 	ldrb.w	r3, [r5], #1
 800964a:	b10b      	cbz	r3, 8009650 <_vfiprintf_r+0x50>
 800964c:	2b25      	cmp	r3, #37	; 0x25
 800964e:	d154      	bne.n	80096fa <_vfiprintf_r+0xfa>
 8009650:	ebb8 0a07 	subs.w	sl, r8, r7
 8009654:	d00b      	beq.n	800966e <_vfiprintf_r+0x6e>
 8009656:	4653      	mov	r3, sl
 8009658:	463a      	mov	r2, r7
 800965a:	4621      	mov	r1, r4
 800965c:	4630      	mov	r0, r6
 800965e:	f7ff ffbc 	bl	80095da <__sfputs_r>
 8009662:	3001      	adds	r0, #1
 8009664:	f000 80c2 	beq.w	80097ec <_vfiprintf_r+0x1ec>
 8009668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800966a:	4453      	add	r3, sl
 800966c:	9309      	str	r3, [sp, #36]	; 0x24
 800966e:	f898 3000 	ldrb.w	r3, [r8]
 8009672:	2b00      	cmp	r3, #0
 8009674:	f000 80ba 	beq.w	80097ec <_vfiprintf_r+0x1ec>
 8009678:	2300      	movs	r3, #0
 800967a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800967e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009682:	9304      	str	r3, [sp, #16]
 8009684:	9307      	str	r3, [sp, #28]
 8009686:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800968a:	931a      	str	r3, [sp, #104]	; 0x68
 800968c:	46a8      	mov	r8, r5
 800968e:	2205      	movs	r2, #5
 8009690:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009694:	485e      	ldr	r0, [pc, #376]	; (8009810 <_vfiprintf_r+0x210>)
 8009696:	f7f6 fda3 	bl	80001e0 <memchr>
 800969a:	9b04      	ldr	r3, [sp, #16]
 800969c:	bb78      	cbnz	r0, 80096fe <_vfiprintf_r+0xfe>
 800969e:	06d9      	lsls	r1, r3, #27
 80096a0:	bf44      	itt	mi
 80096a2:	2220      	movmi	r2, #32
 80096a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80096a8:	071a      	lsls	r2, r3, #28
 80096aa:	bf44      	itt	mi
 80096ac:	222b      	movmi	r2, #43	; 0x2b
 80096ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80096b2:	782a      	ldrb	r2, [r5, #0]
 80096b4:	2a2a      	cmp	r2, #42	; 0x2a
 80096b6:	d02a      	beq.n	800970e <_vfiprintf_r+0x10e>
 80096b8:	9a07      	ldr	r2, [sp, #28]
 80096ba:	46a8      	mov	r8, r5
 80096bc:	2000      	movs	r0, #0
 80096be:	250a      	movs	r5, #10
 80096c0:	4641      	mov	r1, r8
 80096c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096c6:	3b30      	subs	r3, #48	; 0x30
 80096c8:	2b09      	cmp	r3, #9
 80096ca:	d969      	bls.n	80097a0 <_vfiprintf_r+0x1a0>
 80096cc:	b360      	cbz	r0, 8009728 <_vfiprintf_r+0x128>
 80096ce:	e024      	b.n	800971a <_vfiprintf_r+0x11a>
 80096d0:	4b50      	ldr	r3, [pc, #320]	; (8009814 <_vfiprintf_r+0x214>)
 80096d2:	429c      	cmp	r4, r3
 80096d4:	d101      	bne.n	80096da <_vfiprintf_r+0xda>
 80096d6:	68b4      	ldr	r4, [r6, #8]
 80096d8:	e7a2      	b.n	8009620 <_vfiprintf_r+0x20>
 80096da:	4b4f      	ldr	r3, [pc, #316]	; (8009818 <_vfiprintf_r+0x218>)
 80096dc:	429c      	cmp	r4, r3
 80096de:	bf08      	it	eq
 80096e0:	68f4      	ldreq	r4, [r6, #12]
 80096e2:	e79d      	b.n	8009620 <_vfiprintf_r+0x20>
 80096e4:	4621      	mov	r1, r4
 80096e6:	4630      	mov	r0, r6
 80096e8:	f7fd fd72 	bl	80071d0 <__swsetup_r>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d09d      	beq.n	800962c <_vfiprintf_r+0x2c>
 80096f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096f4:	b01d      	add	sp, #116	; 0x74
 80096f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096fa:	46a8      	mov	r8, r5
 80096fc:	e7a2      	b.n	8009644 <_vfiprintf_r+0x44>
 80096fe:	4a44      	ldr	r2, [pc, #272]	; (8009810 <_vfiprintf_r+0x210>)
 8009700:	1a80      	subs	r0, r0, r2
 8009702:	fa0b f000 	lsl.w	r0, fp, r0
 8009706:	4318      	orrs	r0, r3
 8009708:	9004      	str	r0, [sp, #16]
 800970a:	4645      	mov	r5, r8
 800970c:	e7be      	b.n	800968c <_vfiprintf_r+0x8c>
 800970e:	9a03      	ldr	r2, [sp, #12]
 8009710:	1d11      	adds	r1, r2, #4
 8009712:	6812      	ldr	r2, [r2, #0]
 8009714:	9103      	str	r1, [sp, #12]
 8009716:	2a00      	cmp	r2, #0
 8009718:	db01      	blt.n	800971e <_vfiprintf_r+0x11e>
 800971a:	9207      	str	r2, [sp, #28]
 800971c:	e004      	b.n	8009728 <_vfiprintf_r+0x128>
 800971e:	4252      	negs	r2, r2
 8009720:	f043 0302 	orr.w	r3, r3, #2
 8009724:	9207      	str	r2, [sp, #28]
 8009726:	9304      	str	r3, [sp, #16]
 8009728:	f898 3000 	ldrb.w	r3, [r8]
 800972c:	2b2e      	cmp	r3, #46	; 0x2e
 800972e:	d10e      	bne.n	800974e <_vfiprintf_r+0x14e>
 8009730:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009734:	2b2a      	cmp	r3, #42	; 0x2a
 8009736:	d138      	bne.n	80097aa <_vfiprintf_r+0x1aa>
 8009738:	9b03      	ldr	r3, [sp, #12]
 800973a:	1d1a      	adds	r2, r3, #4
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	9203      	str	r2, [sp, #12]
 8009740:	2b00      	cmp	r3, #0
 8009742:	bfb8      	it	lt
 8009744:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009748:	f108 0802 	add.w	r8, r8, #2
 800974c:	9305      	str	r3, [sp, #20]
 800974e:	4d33      	ldr	r5, [pc, #204]	; (800981c <_vfiprintf_r+0x21c>)
 8009750:	f898 1000 	ldrb.w	r1, [r8]
 8009754:	2203      	movs	r2, #3
 8009756:	4628      	mov	r0, r5
 8009758:	f7f6 fd42 	bl	80001e0 <memchr>
 800975c:	b140      	cbz	r0, 8009770 <_vfiprintf_r+0x170>
 800975e:	2340      	movs	r3, #64	; 0x40
 8009760:	1b40      	subs	r0, r0, r5
 8009762:	fa03 f000 	lsl.w	r0, r3, r0
 8009766:	9b04      	ldr	r3, [sp, #16]
 8009768:	4303      	orrs	r3, r0
 800976a:	f108 0801 	add.w	r8, r8, #1
 800976e:	9304      	str	r3, [sp, #16]
 8009770:	f898 1000 	ldrb.w	r1, [r8]
 8009774:	482a      	ldr	r0, [pc, #168]	; (8009820 <_vfiprintf_r+0x220>)
 8009776:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800977a:	2206      	movs	r2, #6
 800977c:	f108 0701 	add.w	r7, r8, #1
 8009780:	f7f6 fd2e 	bl	80001e0 <memchr>
 8009784:	2800      	cmp	r0, #0
 8009786:	d037      	beq.n	80097f8 <_vfiprintf_r+0x1f8>
 8009788:	4b26      	ldr	r3, [pc, #152]	; (8009824 <_vfiprintf_r+0x224>)
 800978a:	bb1b      	cbnz	r3, 80097d4 <_vfiprintf_r+0x1d4>
 800978c:	9b03      	ldr	r3, [sp, #12]
 800978e:	3307      	adds	r3, #7
 8009790:	f023 0307 	bic.w	r3, r3, #7
 8009794:	3308      	adds	r3, #8
 8009796:	9303      	str	r3, [sp, #12]
 8009798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800979a:	444b      	add	r3, r9
 800979c:	9309      	str	r3, [sp, #36]	; 0x24
 800979e:	e750      	b.n	8009642 <_vfiprintf_r+0x42>
 80097a0:	fb05 3202 	mla	r2, r5, r2, r3
 80097a4:	2001      	movs	r0, #1
 80097a6:	4688      	mov	r8, r1
 80097a8:	e78a      	b.n	80096c0 <_vfiprintf_r+0xc0>
 80097aa:	2300      	movs	r3, #0
 80097ac:	f108 0801 	add.w	r8, r8, #1
 80097b0:	9305      	str	r3, [sp, #20]
 80097b2:	4619      	mov	r1, r3
 80097b4:	250a      	movs	r5, #10
 80097b6:	4640      	mov	r0, r8
 80097b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097bc:	3a30      	subs	r2, #48	; 0x30
 80097be:	2a09      	cmp	r2, #9
 80097c0:	d903      	bls.n	80097ca <_vfiprintf_r+0x1ca>
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d0c3      	beq.n	800974e <_vfiprintf_r+0x14e>
 80097c6:	9105      	str	r1, [sp, #20]
 80097c8:	e7c1      	b.n	800974e <_vfiprintf_r+0x14e>
 80097ca:	fb05 2101 	mla	r1, r5, r1, r2
 80097ce:	2301      	movs	r3, #1
 80097d0:	4680      	mov	r8, r0
 80097d2:	e7f0      	b.n	80097b6 <_vfiprintf_r+0x1b6>
 80097d4:	ab03      	add	r3, sp, #12
 80097d6:	9300      	str	r3, [sp, #0]
 80097d8:	4622      	mov	r2, r4
 80097da:	4b13      	ldr	r3, [pc, #76]	; (8009828 <_vfiprintf_r+0x228>)
 80097dc:	a904      	add	r1, sp, #16
 80097de:	4630      	mov	r0, r6
 80097e0:	f7fb ffa8 	bl	8005734 <_printf_float>
 80097e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80097e8:	4681      	mov	r9, r0
 80097ea:	d1d5      	bne.n	8009798 <_vfiprintf_r+0x198>
 80097ec:	89a3      	ldrh	r3, [r4, #12]
 80097ee:	065b      	lsls	r3, r3, #25
 80097f0:	f53f af7e 	bmi.w	80096f0 <_vfiprintf_r+0xf0>
 80097f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097f6:	e77d      	b.n	80096f4 <_vfiprintf_r+0xf4>
 80097f8:	ab03      	add	r3, sp, #12
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	4622      	mov	r2, r4
 80097fe:	4b0a      	ldr	r3, [pc, #40]	; (8009828 <_vfiprintf_r+0x228>)
 8009800:	a904      	add	r1, sp, #16
 8009802:	4630      	mov	r0, r6
 8009804:	f7fc fa4c 	bl	8005ca0 <_printf_i>
 8009808:	e7ec      	b.n	80097e4 <_vfiprintf_r+0x1e4>
 800980a:	bf00      	nop
 800980c:	08009bb8 	.word	0x08009bb8
 8009810:	08009d04 	.word	0x08009d04
 8009814:	08009bd8 	.word	0x08009bd8
 8009818:	08009b98 	.word	0x08009b98
 800981c:	08009d0a 	.word	0x08009d0a
 8009820:	08009d0e 	.word	0x08009d0e
 8009824:	08005735 	.word	0x08005735
 8009828:	080095db 	.word	0x080095db

0800982c <_sbrk_r>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	4c06      	ldr	r4, [pc, #24]	; (8009848 <_sbrk_r+0x1c>)
 8009830:	2300      	movs	r3, #0
 8009832:	4605      	mov	r5, r0
 8009834:	4608      	mov	r0, r1
 8009836:	6023      	str	r3, [r4, #0]
 8009838:	f7f7 fe4a 	bl	80014d0 <_sbrk>
 800983c:	1c43      	adds	r3, r0, #1
 800983e:	d102      	bne.n	8009846 <_sbrk_r+0x1a>
 8009840:	6823      	ldr	r3, [r4, #0]
 8009842:	b103      	cbz	r3, 8009846 <_sbrk_r+0x1a>
 8009844:	602b      	str	r3, [r5, #0]
 8009846:	bd38      	pop	{r3, r4, r5, pc}
 8009848:	2000044c 	.word	0x2000044c

0800984c <__sread>:
 800984c:	b510      	push	{r4, lr}
 800984e:	460c      	mov	r4, r1
 8009850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009854:	f000 f8f4 	bl	8009a40 <_read_r>
 8009858:	2800      	cmp	r0, #0
 800985a:	bfab      	itete	ge
 800985c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800985e:	89a3      	ldrhlt	r3, [r4, #12]
 8009860:	181b      	addge	r3, r3, r0
 8009862:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009866:	bfac      	ite	ge
 8009868:	6563      	strge	r3, [r4, #84]	; 0x54
 800986a:	81a3      	strhlt	r3, [r4, #12]
 800986c:	bd10      	pop	{r4, pc}

0800986e <__swrite>:
 800986e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009872:	461f      	mov	r7, r3
 8009874:	898b      	ldrh	r3, [r1, #12]
 8009876:	05db      	lsls	r3, r3, #23
 8009878:	4605      	mov	r5, r0
 800987a:	460c      	mov	r4, r1
 800987c:	4616      	mov	r6, r2
 800987e:	d505      	bpl.n	800988c <__swrite+0x1e>
 8009880:	2302      	movs	r3, #2
 8009882:	2200      	movs	r2, #0
 8009884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009888:	f000 f886 	bl	8009998 <_lseek_r>
 800988c:	89a3      	ldrh	r3, [r4, #12]
 800988e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009892:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009896:	81a3      	strh	r3, [r4, #12]
 8009898:	4632      	mov	r2, r6
 800989a:	463b      	mov	r3, r7
 800989c:	4628      	mov	r0, r5
 800989e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098a2:	f000 b835 	b.w	8009910 <_write_r>

080098a6 <__sseek>:
 80098a6:	b510      	push	{r4, lr}
 80098a8:	460c      	mov	r4, r1
 80098aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ae:	f000 f873 	bl	8009998 <_lseek_r>
 80098b2:	1c43      	adds	r3, r0, #1
 80098b4:	89a3      	ldrh	r3, [r4, #12]
 80098b6:	bf15      	itete	ne
 80098b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80098ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098c2:	81a3      	strheq	r3, [r4, #12]
 80098c4:	bf18      	it	ne
 80098c6:	81a3      	strhne	r3, [r4, #12]
 80098c8:	bd10      	pop	{r4, pc}

080098ca <__sclose>:
 80098ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ce:	f000 b831 	b.w	8009934 <_close_r>

080098d2 <strncmp>:
 80098d2:	b510      	push	{r4, lr}
 80098d4:	b16a      	cbz	r2, 80098f2 <strncmp+0x20>
 80098d6:	3901      	subs	r1, #1
 80098d8:	1884      	adds	r4, r0, r2
 80098da:	f810 3b01 	ldrb.w	r3, [r0], #1
 80098de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d103      	bne.n	80098ee <strncmp+0x1c>
 80098e6:	42a0      	cmp	r0, r4
 80098e8:	d001      	beq.n	80098ee <strncmp+0x1c>
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d1f5      	bne.n	80098da <strncmp+0x8>
 80098ee:	1a98      	subs	r0, r3, r2
 80098f0:	bd10      	pop	{r4, pc}
 80098f2:	4610      	mov	r0, r2
 80098f4:	e7fc      	b.n	80098f0 <strncmp+0x1e>

080098f6 <__ascii_wctomb>:
 80098f6:	b149      	cbz	r1, 800990c <__ascii_wctomb+0x16>
 80098f8:	2aff      	cmp	r2, #255	; 0xff
 80098fa:	bf85      	ittet	hi
 80098fc:	238a      	movhi	r3, #138	; 0x8a
 80098fe:	6003      	strhi	r3, [r0, #0]
 8009900:	700a      	strbls	r2, [r1, #0]
 8009902:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009906:	bf98      	it	ls
 8009908:	2001      	movls	r0, #1
 800990a:	4770      	bx	lr
 800990c:	4608      	mov	r0, r1
 800990e:	4770      	bx	lr

08009910 <_write_r>:
 8009910:	b538      	push	{r3, r4, r5, lr}
 8009912:	4c07      	ldr	r4, [pc, #28]	; (8009930 <_write_r+0x20>)
 8009914:	4605      	mov	r5, r0
 8009916:	4608      	mov	r0, r1
 8009918:	4611      	mov	r1, r2
 800991a:	2200      	movs	r2, #0
 800991c:	6022      	str	r2, [r4, #0]
 800991e:	461a      	mov	r2, r3
 8009920:	f7f7 fd85 	bl	800142e <_write>
 8009924:	1c43      	adds	r3, r0, #1
 8009926:	d102      	bne.n	800992e <_write_r+0x1e>
 8009928:	6823      	ldr	r3, [r4, #0]
 800992a:	b103      	cbz	r3, 800992e <_write_r+0x1e>
 800992c:	602b      	str	r3, [r5, #0]
 800992e:	bd38      	pop	{r3, r4, r5, pc}
 8009930:	2000044c 	.word	0x2000044c

08009934 <_close_r>:
 8009934:	b538      	push	{r3, r4, r5, lr}
 8009936:	4c06      	ldr	r4, [pc, #24]	; (8009950 <_close_r+0x1c>)
 8009938:	2300      	movs	r3, #0
 800993a:	4605      	mov	r5, r0
 800993c:	4608      	mov	r0, r1
 800993e:	6023      	str	r3, [r4, #0]
 8009940:	f7f7 fd91 	bl	8001466 <_close>
 8009944:	1c43      	adds	r3, r0, #1
 8009946:	d102      	bne.n	800994e <_close_r+0x1a>
 8009948:	6823      	ldr	r3, [r4, #0]
 800994a:	b103      	cbz	r3, 800994e <_close_r+0x1a>
 800994c:	602b      	str	r3, [r5, #0]
 800994e:	bd38      	pop	{r3, r4, r5, pc}
 8009950:	2000044c 	.word	0x2000044c

08009954 <_fstat_r>:
 8009954:	b538      	push	{r3, r4, r5, lr}
 8009956:	4c07      	ldr	r4, [pc, #28]	; (8009974 <_fstat_r+0x20>)
 8009958:	2300      	movs	r3, #0
 800995a:	4605      	mov	r5, r0
 800995c:	4608      	mov	r0, r1
 800995e:	4611      	mov	r1, r2
 8009960:	6023      	str	r3, [r4, #0]
 8009962:	f7f7 fd8c 	bl	800147e <_fstat>
 8009966:	1c43      	adds	r3, r0, #1
 8009968:	d102      	bne.n	8009970 <_fstat_r+0x1c>
 800996a:	6823      	ldr	r3, [r4, #0]
 800996c:	b103      	cbz	r3, 8009970 <_fstat_r+0x1c>
 800996e:	602b      	str	r3, [r5, #0]
 8009970:	bd38      	pop	{r3, r4, r5, pc}
 8009972:	bf00      	nop
 8009974:	2000044c 	.word	0x2000044c

08009978 <_isatty_r>:
 8009978:	b538      	push	{r3, r4, r5, lr}
 800997a:	4c06      	ldr	r4, [pc, #24]	; (8009994 <_isatty_r+0x1c>)
 800997c:	2300      	movs	r3, #0
 800997e:	4605      	mov	r5, r0
 8009980:	4608      	mov	r0, r1
 8009982:	6023      	str	r3, [r4, #0]
 8009984:	f7f7 fd8b 	bl	800149e <_isatty>
 8009988:	1c43      	adds	r3, r0, #1
 800998a:	d102      	bne.n	8009992 <_isatty_r+0x1a>
 800998c:	6823      	ldr	r3, [r4, #0]
 800998e:	b103      	cbz	r3, 8009992 <_isatty_r+0x1a>
 8009990:	602b      	str	r3, [r5, #0]
 8009992:	bd38      	pop	{r3, r4, r5, pc}
 8009994:	2000044c 	.word	0x2000044c

08009998 <_lseek_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	4c07      	ldr	r4, [pc, #28]	; (80099b8 <_lseek_r+0x20>)
 800999c:	4605      	mov	r5, r0
 800999e:	4608      	mov	r0, r1
 80099a0:	4611      	mov	r1, r2
 80099a2:	2200      	movs	r2, #0
 80099a4:	6022      	str	r2, [r4, #0]
 80099a6:	461a      	mov	r2, r3
 80099a8:	f7f7 fd84 	bl	80014b4 <_lseek>
 80099ac:	1c43      	adds	r3, r0, #1
 80099ae:	d102      	bne.n	80099b6 <_lseek_r+0x1e>
 80099b0:	6823      	ldr	r3, [r4, #0]
 80099b2:	b103      	cbz	r3, 80099b6 <_lseek_r+0x1e>
 80099b4:	602b      	str	r3, [r5, #0]
 80099b6:	bd38      	pop	{r3, r4, r5, pc}
 80099b8:	2000044c 	.word	0x2000044c

080099bc <memmove>:
 80099bc:	4288      	cmp	r0, r1
 80099be:	b510      	push	{r4, lr}
 80099c0:	eb01 0302 	add.w	r3, r1, r2
 80099c4:	d807      	bhi.n	80099d6 <memmove+0x1a>
 80099c6:	1e42      	subs	r2, r0, #1
 80099c8:	4299      	cmp	r1, r3
 80099ca:	d00a      	beq.n	80099e2 <memmove+0x26>
 80099cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099d0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80099d4:	e7f8      	b.n	80099c8 <memmove+0xc>
 80099d6:	4283      	cmp	r3, r0
 80099d8:	d9f5      	bls.n	80099c6 <memmove+0xa>
 80099da:	1881      	adds	r1, r0, r2
 80099dc:	1ad2      	subs	r2, r2, r3
 80099de:	42d3      	cmn	r3, r2
 80099e0:	d100      	bne.n	80099e4 <memmove+0x28>
 80099e2:	bd10      	pop	{r4, pc}
 80099e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099e8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80099ec:	e7f7      	b.n	80099de <memmove+0x22>

080099ee <__malloc_lock>:
 80099ee:	4770      	bx	lr

080099f0 <__malloc_unlock>:
 80099f0:	4770      	bx	lr

080099f2 <_realloc_r>:
 80099f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099f4:	4607      	mov	r7, r0
 80099f6:	4614      	mov	r4, r2
 80099f8:	460e      	mov	r6, r1
 80099fa:	b921      	cbnz	r1, 8009a06 <_realloc_r+0x14>
 80099fc:	4611      	mov	r1, r2
 80099fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009a02:	f7ff bc27 	b.w	8009254 <_malloc_r>
 8009a06:	b922      	cbnz	r2, 8009a12 <_realloc_r+0x20>
 8009a08:	f7ff fbd6 	bl	80091b8 <_free_r>
 8009a0c:	4625      	mov	r5, r4
 8009a0e:	4628      	mov	r0, r5
 8009a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a12:	f000 f827 	bl	8009a64 <_malloc_usable_size_r>
 8009a16:	42a0      	cmp	r0, r4
 8009a18:	d20f      	bcs.n	8009a3a <_realloc_r+0x48>
 8009a1a:	4621      	mov	r1, r4
 8009a1c:	4638      	mov	r0, r7
 8009a1e:	f7ff fc19 	bl	8009254 <_malloc_r>
 8009a22:	4605      	mov	r5, r0
 8009a24:	2800      	cmp	r0, #0
 8009a26:	d0f2      	beq.n	8009a0e <_realloc_r+0x1c>
 8009a28:	4631      	mov	r1, r6
 8009a2a:	4622      	mov	r2, r4
 8009a2c:	f7fb fdda 	bl	80055e4 <memcpy>
 8009a30:	4631      	mov	r1, r6
 8009a32:	4638      	mov	r0, r7
 8009a34:	f7ff fbc0 	bl	80091b8 <_free_r>
 8009a38:	e7e9      	b.n	8009a0e <_realloc_r+0x1c>
 8009a3a:	4635      	mov	r5, r6
 8009a3c:	e7e7      	b.n	8009a0e <_realloc_r+0x1c>
	...

08009a40 <_read_r>:
 8009a40:	b538      	push	{r3, r4, r5, lr}
 8009a42:	4c07      	ldr	r4, [pc, #28]	; (8009a60 <_read_r+0x20>)
 8009a44:	4605      	mov	r5, r0
 8009a46:	4608      	mov	r0, r1
 8009a48:	4611      	mov	r1, r2
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	6022      	str	r2, [r4, #0]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	f7f7 fcd0 	bl	80013f4 <_read>
 8009a54:	1c43      	adds	r3, r0, #1
 8009a56:	d102      	bne.n	8009a5e <_read_r+0x1e>
 8009a58:	6823      	ldr	r3, [r4, #0]
 8009a5a:	b103      	cbz	r3, 8009a5e <_read_r+0x1e>
 8009a5c:	602b      	str	r3, [r5, #0]
 8009a5e:	bd38      	pop	{r3, r4, r5, pc}
 8009a60:	2000044c 	.word	0x2000044c

08009a64 <_malloc_usable_size_r>:
 8009a64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a68:	1f18      	subs	r0, r3, #4
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	bfbc      	itt	lt
 8009a6e:	580b      	ldrlt	r3, [r1, r0]
 8009a70:	18c0      	addlt	r0, r0, r3
 8009a72:	4770      	bx	lr

08009a74 <_init>:
 8009a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a76:	bf00      	nop
 8009a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a7a:	bc08      	pop	{r3}
 8009a7c:	469e      	mov	lr, r3
 8009a7e:	4770      	bx	lr

08009a80 <_fini>:
 8009a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a82:	bf00      	nop
 8009a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a86:	bc08      	pop	{r3}
 8009a88:	469e      	mov	lr, r3
 8009a8a:	4770      	bx	lr
