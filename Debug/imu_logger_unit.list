
imu_logger_unit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ce4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  08009e78  08009e78  00019e78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a218  0800a218  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a218  0800a218  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a218  0800a218  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a218  0800a218  0001a218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a21c  0800a21c  0001a21c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200001e0  0800a400  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  0800a400  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001308b  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029b2  00000000  00000000  0003329b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001108  00000000  00000000  00035c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa0  00000000  00000000  00036d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a98a  00000000  00000000  00037cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e1d1  00000000  00000000  00052682  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e51d  00000000  00000000  00060853  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eed70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005958  00000000  00000000  000eedec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e5c 	.word	0x08009e5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009e5c 	.word	0x08009e5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c9e:	4b23      	ldr	r3, [pc, #140]	; (8000d2c <MX_GPIO_Init+0xa4>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	4a22      	ldr	r2, [pc, #136]	; (8000d2c <MX_GPIO_Init+0xa4>)
 8000ca4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ca8:	6153      	str	r3, [r2, #20]
 8000caa:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <MX_GPIO_Init+0xa4>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <MX_GPIO_Init+0xa4>)
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	4a1c      	ldr	r2, [pc, #112]	; (8000d2c <MX_GPIO_Init+0xa4>)
 8000cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc0:	6153      	str	r3, [r2, #20]
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_GPIO_Init+0xa4>)
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_GPIO_Init+0xa4>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	4a16      	ldr	r2, [pc, #88]	; (8000d2c <MX_GPIO_Init+0xa4>)
 8000cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd8:	6153      	str	r3, [r2, #20]
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_GPIO_Init+0xa4>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	210a      	movs	r1, #10
 8000cea:	4811      	ldr	r0, [pc, #68]	; (8000d30 <MX_GPIO_Init+0xa8>)
 8000cec:	f001 fa16 	bl	800211c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cfc:	f107 030c 	add.w	r3, r7, #12
 8000d00:	4619      	mov	r1, r3
 8000d02:	480c      	ldr	r0, [pc, #48]	; (8000d34 <MX_GPIO_Init+0xac>)
 8000d04:	f001 f880 	bl	8001e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000d08:	230a      	movs	r3, #10
 8000d0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4804      	ldr	r0, [pc, #16]	; (8000d30 <MX_GPIO_Init+0xa8>)
 8000d20:	f001 f872 	bl	8001e08 <HAL_GPIO_Init>

}
 8000d24:	bf00      	nop
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	48000400 	.word	0x48000400
 8000d34:	48001400 	.word	0x48001400

08000d38 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000d3c:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <MX_I2C1_Init+0x74>)
 8000d3e:	4a1c      	ldr	r2, [pc, #112]	; (8000db0 <MX_I2C1_Init+0x78>)
 8000d40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <MX_I2C1_Init+0x74>)
 8000d44:	4a1b      	ldr	r2, [pc, #108]	; (8000db4 <MX_I2C1_Init+0x7c>)
 8000d46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d48:	4b18      	ldr	r3, [pc, #96]	; (8000dac <MX_I2C1_Init+0x74>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <MX_I2C1_Init+0x74>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <MX_I2C1_Init+0x74>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <MX_I2C1_Init+0x74>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <MX_I2C1_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <MX_I2C1_Init+0x74>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <MX_I2C1_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d72:	480e      	ldr	r0, [pc, #56]	; (8000dac <MX_I2C1_Init+0x74>)
 8000d74:	f001 fa04 	bl	8002180 <HAL_I2C_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d7e:	f000 fb63 	bl	8001448 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d82:	2100      	movs	r1, #0
 8000d84:	4809      	ldr	r0, [pc, #36]	; (8000dac <MX_I2C1_Init+0x74>)
 8000d86:	f001 fed5 	bl	8002b34 <HAL_I2CEx_ConfigAnalogFilter>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d90:	f000 fb5a 	bl	8001448 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d94:	2100      	movs	r1, #0
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_I2C1_Init+0x74>)
 8000d98:	f001 ff17 	bl	8002bca <HAL_I2CEx_ConfigDigitalFilter>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000da2:	f000 fb51 	bl	8001448 <Error_Handler>
  }

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000210 	.word	0x20000210
 8000db0:	40005400 	.word	0x40005400
 8000db4:	00602173 	.word	0x00602173

08000db8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <HAL_I2C_MspInit+0x7c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d127      	bne.n	8000e2a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <HAL_I2C_MspInit+0x80>)
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	4a16      	ldr	r2, [pc, #88]	; (8000e38 <HAL_I2C_MspInit+0x80>)
 8000de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de4:	6153      	str	r3, [r2, #20]
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <HAL_I2C_MspInit+0x80>)
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000df2:	23c0      	movs	r3, #192	; 0xc0
 8000df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df6:	2312      	movs	r3, #18
 8000df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e02:	2304      	movs	r3, #4
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480b      	ldr	r0, [pc, #44]	; (8000e3c <HAL_I2C_MspInit+0x84>)
 8000e0e:	f000 fffb 	bl	8001e08 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <HAL_I2C_MspInit+0x80>)
 8000e14:	69db      	ldr	r3, [r3, #28]
 8000e16:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <HAL_I2C_MspInit+0x80>)
 8000e18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e1c:	61d3      	str	r3, [r2, #28]
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_I2C_MspInit+0x80>)
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	3728      	adds	r7, #40	; 0x28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40005400 	.word	0x40005400
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	48000400 	.word	0x48000400

08000e40 <lpme1_get_timestamp>:
  *@brief: Get system time stamp
  *@para: Pointer to float variable use to save read value
  *@ret: Status, return LPME1_OK if read success otherwise return LPME1_ERROR
  */
lpme1_status_t lpme1_get_timestamp(float *time)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
    uint8_t buffer[4];
    if(lpme1_read_buffer(TIMESTAMP_0, buffer, 4) == LPME1_OK)
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	2204      	movs	r2, #4
 8000e4e:	4619      	mov	r1, r3
 8000e50:	2020      	movs	r0, #32
 8000e52:	f000 f8f7 	bl	8001044 <lpme1_read_buffer>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d10b      	bne.n	8000e74 <lpme1_get_timestamp+0x34>
    {
        *time = uint8_to_float(buffer);
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 f88d 	bl	8000f80 <uint8_to_float>
 8000e66:	eef0 7a40 	vmov.f32	s15, s0
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	edc3 7a00 	vstr	s15, [r3]
        return LPME1_OK;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e000      	b.n	8000e76 <lpme1_get_timestamp+0x36>
    }
    else
        return LPME1_ERROR;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <lpme1_get_gyr>:
  *@brief: Get gyroscope data
  *@para: Pointer to float array that have 3 elements at least
  *@ret: Status, return LPME1_OK if read success otherwise return LPME1_ERROR
  */
lpme1_status_t lpme1_get_gyr(float *gyr)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
    DataDecoder data[3];
    if(lpme1_read_buffer(GYR_X_0, (uint8_t *)data[0].u8vals, 12) == LPME1_OK)
 8000e86:	f107 0308 	add.w	r3, r7, #8
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	2030      	movs	r0, #48	; 0x30
 8000e90:	f000 f8d8 	bl	8001044 <lpme1_read_buffer>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d116      	bne.n	8000ec8 <lpme1_get_gyr+0x4a>
    {
        for(uint8_t i = 0; i<3; i++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	75fb      	strb	r3, [r7, #23]
 8000e9e:	e00e      	b.n	8000ebe <lpme1_get_gyr+0x40>
        {
            *(gyr+i) = data[i].fval;
 8000ea0:	7dfa      	ldrb	r2, [r7, #23]
 8000ea2:	7dfb      	ldrb	r3, [r7, #23]
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	440b      	add	r3, r1
 8000eaa:	0092      	lsls	r2, r2, #2
 8000eac:	f107 0118 	add.w	r1, r7, #24
 8000eb0:	440a      	add	r2, r1
 8000eb2:	3a10      	subs	r2, #16
 8000eb4:	6812      	ldr	r2, [r2, #0]
 8000eb6:	601a      	str	r2, [r3, #0]
        for(uint8_t i = 0; i<3; i++)
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	75fb      	strb	r3, [r7, #23]
 8000ebe:	7dfb      	ldrb	r3, [r7, #23]
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d9ed      	bls.n	8000ea0 <lpme1_get_gyr+0x22>
        }
        return LPME1_OK;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e000      	b.n	8000eca <lpme1_get_gyr+0x4c>
    }
    else
        return LPME1_ERROR;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <lpme1_set_Freq>:
        LPMS_DATA_FREQ_200HZ
        LPMS_DATA_FREQ_400HZ
  *@ret: Status, return LPME1_OK if write success otherwise return LPME1_ERROR
  */
lpme1_status_t lpme1_set_Freq(uint8_t freq)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b084      	sub	sp, #16
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	71fb      	strb	r3, [r7, #7]
    uint8_t data;

    if(lpme1_read_reg(DATA_CTRL, &data) != LPME1_OK)
 8000edc:	f107 030f 	add.w	r3, r7, #15
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	2002      	movs	r0, #2
 8000ee4:	f000 f86e 	bl	8000fc4 <lpme1_read_reg>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d001      	beq.n	8000ef2 <lpme1_set_Freq+0x20>
        return LPME1_ERROR;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	e042      	b.n	8000f78 <lpme1_set_Freq+0xa6>

    data &= ~LPMS_DATA_FREQ_MASK;
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	f023 030f 	bic.w	r3, r3, #15
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	73fb      	strb	r3, [r7, #15]

    if(freq == LPMS_DATA_FREQ_5HZ)          data |= LPMS_DATA_FREQ_5HZ;
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d102      	bne.n	8000f08 <lpme1_set_Freq+0x36>
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	73fb      	strb	r3, [r7, #15]
 8000f06:	e02b      	b.n	8000f60 <lpme1_set_Freq+0x8e>
    else if(freq == LPMS_DATA_FREQ_10HZ)    data |= LPMS_DATA_FREQ_10HZ;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d105      	bne.n	8000f1a <lpme1_set_Freq+0x48>
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	e022      	b.n	8000f60 <lpme1_set_Freq+0x8e>
    else if(freq == LPMS_DATA_FREQ_50HZ)    data |= LPMS_DATA_FREQ_50HZ;
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d105      	bne.n	8000f2c <lpme1_set_Freq+0x5a>
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	f043 0302 	orr.w	r3, r3, #2
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	73fb      	strb	r3, [r7, #15]
 8000f2a:	e019      	b.n	8000f60 <lpme1_set_Freq+0x8e>
    else if(freq == LPMS_DATA_FREQ_100HZ)   data |= LPMS_DATA_FREQ_100HZ;
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d105      	bne.n	8000f3e <lpme1_set_Freq+0x6c>
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	f043 0303 	orr.w	r3, r3, #3
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	73fb      	strb	r3, [r7, #15]
 8000f3c:	e010      	b.n	8000f60 <lpme1_set_Freq+0x8e>
    else if(freq == LPMS_DATA_FREQ_200HZ)   data |= LPMS_DATA_FREQ_200HZ;
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d105      	bne.n	8000f50 <lpme1_set_Freq+0x7e>
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	f043 0304 	orr.w	r3, r3, #4
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	73fb      	strb	r3, [r7, #15]
 8000f4e:	e007      	b.n	8000f60 <lpme1_set_Freq+0x8e>
    else if(freq == LPMS_DATA_FREQ_400HZ)   data |= LPMS_DATA_FREQ_400HZ;
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	2b05      	cmp	r3, #5
 8000f54:	d104      	bne.n	8000f60 <lpme1_set_Freq+0x8e>
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	f043 0305 	orr.w	r3, r3, #5
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	73fb      	strb	r3, [r7, #15]

    if(lpme1_write_reg(DATA_CTRL, &data) != LPME1_OK)
 8000f60:	f107 030f 	add.w	r3, r7, #15
 8000f64:	4619      	mov	r1, r3
 8000f66:	2002      	movs	r0, #2
 8000f68:	f000 f84c 	bl	8001004 <lpme1_write_reg>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d001      	beq.n	8000f76 <lpme1_set_Freq+0xa4>
        return LPME1_ERROR;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e000      	b.n	8000f78 <lpme1_set_Freq+0xa6>

    return LPME1_OK;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <uint8_to_float>:
  *@brief: Convert 4 uint8_t values to float value
  *@para: Pointer to uint8_t array[4];
  *@ret: float value
  */
float uint8_to_float(uint8_t *pu8vals)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
    DataDecoder decoder;
    for(uint8_t i = 0; i < 4; i++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]
 8000f8c:	e00c      	b.n	8000fa8 <uint8_to_float+0x28>
    {
        decoder.u8vals[i] = *(pu8vals +i);
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	441a      	add	r2, r3
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	7812      	ldrb	r2, [r2, #0]
 8000f98:	f107 0110 	add.w	r1, r7, #16
 8000f9c:	440b      	add	r3, r1
 8000f9e:	f803 2c08 	strb.w	r2, [r3, #-8]
    for(uint8_t i = 0; i < 4; i++)
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	73fb      	strb	r3, [r7, #15]
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d9ef      	bls.n	8000f8e <uint8_to_float+0xe>
    }
    return decoder.fval;
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	ee07 3a90 	vmov	s15, r3
}
 8000fb4:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <lpme1_read_reg>:
  *@para: regaddr, register address to be read
  *@para: buf, Pointer to uint8_t variable use to save read value
  *@ret: Status, return LPME1_OK if read success otherwise return LPME1_ERROR
  */
lpme1_status_t lpme1_read_reg(uint8_t regaddr,uint8_t *buf)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af04      	add	r7, sp, #16
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
#ifdef USE_IIC
    if(HAL_I2C_Mem_Read(&LPME1_HI2C, LPME1_I2C_ADRRESS, regaddr,
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	2364      	movs	r3, #100	; 0x64
 8000fd6:	9302      	str	r3, [sp, #8]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	2164      	movs	r1, #100	; 0x64
 8000fe4:	4806      	ldr	r0, [pc, #24]	; (8001000 <lpme1_read_reg+0x3c>)
 8000fe6:	f001 fa6f 	bl	80024c8 <HAL_I2C_Mem_Read>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d101      	bne.n	8000ff4 <lpme1_read_reg+0x30>
                        I2C_MEMADD_SIZE_8BIT, buf, 1, LPME1_MAX_TIMEOUT)==HAL_OK)
        return LPME1_OK;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e000      	b.n	8000ff6 <lpme1_read_reg+0x32>
    else
        return LPME1_ERROR;
 8000ff4:	2300      	movs	r3, #0
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
    temp = 20; while(temp--);   //give slave some time
	
    return LPME1_OK;
#endif
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000210 	.word	0x20000210

08001004 <lpme1_write_reg>:
  *@para: regaddr, register address to be write
  *@para: buf, Pointer to uint8_t variable saved the data to be write
  *@ret: Status, return LPME1_OK if read success otherwise return LPME1_ERROR
  */
lpme1_status_t lpme1_write_reg(uint8_t regaddr,uint8_t *buf)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af04      	add	r7, sp, #16
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	71fb      	strb	r3, [r7, #7]
#ifdef USE_IIC
    if(HAL_I2C_Mem_Write(&LPME1_HI2C, LPME1_I2C_ADRRESS, regaddr,
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	b29a      	uxth	r2, r3
 8001014:	2364      	movs	r3, #100	; 0x64
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	2301      	movs	r3, #1
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	2164      	movs	r1, #100	; 0x64
 8001024:	4806      	ldr	r0, [pc, #24]	; (8001040 <lpme1_write_reg+0x3c>)
 8001026:	f001 f93b 	bl	80022a0 <HAL_I2C_Mem_Write>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d101      	bne.n	8001034 <lpme1_write_reg+0x30>
                         I2C_MEMADD_SIZE_8BIT, buf, 1, LPME1_MAX_TIMEOUT)==HAL_OK)
        return LPME1_OK;
 8001030:	2301      	movs	r3, #1
 8001032:	e000      	b.n	8001036 <lpme1_write_reg+0x32>
    else
        return LPME1_ERROR;
 8001034:	2300      	movs	r3, #0
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
	uint8_t i = 20;while(i--);
	
    return LPME1_OK;
#endif
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000210 	.word	0x20000210

08001044 <lpme1_read_buffer>:
  *@para: buf, Pointer to uint8_t array use to save read datas
  *@para: len, data length to be read
  *@ret: Status, return LPME1_OK if read success otherwise return LPME1_ERROR
  */
lpme1_status_t lpme1_read_buffer(uint8_t regaddr,uint8_t *buf,uint8_t len)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af04      	add	r7, sp, #16
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
 8001050:	4613      	mov	r3, r2
 8001052:	71bb      	strb	r3, [r7, #6]
#ifdef USE_IIC
    if(HAL_I2C_Mem_Read(&LPME1_HI2C, LPME1_I2C_ADRRESS, regaddr,
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	b299      	uxth	r1, r3
 8001058:	79bb      	ldrb	r3, [r7, #6]
 800105a:	b29b      	uxth	r3, r3
 800105c:	2264      	movs	r2, #100	; 0x64
 800105e:	9202      	str	r2, [sp, #8]
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2301      	movs	r3, #1
 8001068:	460a      	mov	r2, r1
 800106a:	2164      	movs	r1, #100	; 0x64
 800106c:	4806      	ldr	r0, [pc, #24]	; (8001088 <lpme1_read_buffer+0x44>)
 800106e:	f001 fa2b 	bl	80024c8 <HAL_I2C_Mem_Read>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <lpme1_read_buffer+0x38>
                        I2C_MEMADD_SIZE_8BIT, buf, len, LPME1_MAX_TIMEOUT)==HAL_OK)
        return LPME1_OK;
 8001078:	2301      	movs	r3, #1
 800107a:	e000      	b.n	800107e <lpme1_read_buffer+0x3a>
    else
        return LPME1_ERROR;
 800107c:	2300      	movs	r3, #0
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
	while(i--);
	
    return LPME1_OK;
#endif
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000210 	.word	0x20000210

0800108c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001094:	1d39      	adds	r1, r7, #4
 8001096:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800109a:	2201      	movs	r2, #1
 800109c:	4803      	ldr	r0, [pc, #12]	; (80010ac <__io_putchar+0x20>)
 800109e:	f004 f8f5 	bl	800528c <HAL_UART_Transmit>
 return ch;
 80010a2:	687b      	ldr	r3, [r7, #4]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	2000034c 	.word	0x2000034c

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b6:	f000 fd0d 	bl	8001ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ba:	f000 f857 	bl	800116c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010be:	f7ff fde3 	bl	8000c88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010c2:	f000 fc37 	bl	8001934 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010c6:	f7ff fe37 	bl	8000d38 <MX_I2C1_Init>
  MX_TIM3_Init();
 80010ca:	f000 fb1f 	bl	800170c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80010ce:	f000 fc01 	bl	80018d4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80010d2:	f000 facd 	bl	8001670 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  setup();
 80010d6:	f000 f8a3 	bl	8001220 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1)==GPIO_PIN_RESET) {
 80010da:	2102      	movs	r1, #2
 80010dc:	481f      	ldr	r0, [pc, #124]	; (800115c <main+0xac>)
 80010de:	f001 f805 	bl	80020ec <HAL_GPIO_ReadPin>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d11b      	bne.n	8001120 <main+0x70>
		  for(int i=0;i<3;i++){
 80010e8:	2300      	movs	r3, #0
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	e012      	b.n	8001114 <main+0x64>
		  	  speaker_output(0.5);
 80010ee:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80010f2:	f000 f8fd 	bl	80012f0 <speaker_output>
		  	  HAL_Delay(500);
 80010f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010fa:	f000 fd51 	bl	8001ba0 <HAL_Delay>
		  	  speaker_output(0);
 80010fe:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001160 <main+0xb0>
 8001102:	f000 f8f5 	bl	80012f0 <speaker_output>
		  	  HAL_Delay(500);
 8001106:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800110a:	f000 fd49 	bl	8001ba0 <HAL_Delay>
		  for(int i=0;i<3;i++){
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3301      	adds	r3, #1
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b02      	cmp	r3, #2
 8001118:	dde9      	ble.n	80010ee <main+0x3e>
		  }
		  logger_flag=1;
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <main+0xb4>)
 800111c:	2201      	movs	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]
	  }
	  if(logger_flag==0 && counter>counter_th){
 8001120:	4b10      	ldr	r3, [pc, #64]	; (8001164 <main+0xb4>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	f083 0301 	eor.w	r3, r3, #1
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d0d5      	beq.n	80010da <main+0x2a>
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <main+0xb8>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001136:	4293      	cmp	r3, r2
 8001138:	ddcf      	ble.n	80010da <main+0x2a>
	  	  speaker_output(0.5);
 800113a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800113e:	f000 f8d7 	bl	80012f0 <speaker_output>
	  	  counter=0;
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <main+0xb8>)
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
		  HAL_Delay(1000);
 8001148:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800114c:	f000 fd28 	bl	8001ba0 <HAL_Delay>
		  speaker_output(0);
 8001150:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8001160 <main+0xb0>
 8001154:	f000 f8cc 	bl	80012f0 <speaker_output>
	  if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1)==GPIO_PIN_RESET) {
 8001158:	e7bf      	b.n	80010da <main+0x2a>
 800115a:	bf00      	nop
 800115c:	48001400 	.word	0x48001400
 8001160:	00000000 	.word	0x00000000
 8001164:	200001fc 	.word	0x200001fc
 8001168:	20000200 	.word	0x20000200

0800116c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b096      	sub	sp, #88	; 0x58
 8001170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001172:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001176:	2228      	movs	r2, #40	; 0x28
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f004 fc33 	bl	80059e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]
 800119e:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011a0:	2302      	movs	r3, #2
 80011a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a4:	2301      	movs	r3, #1
 80011a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a8:	2310      	movs	r3, #16
 80011aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ac:	2302      	movs	r3, #2
 80011ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011b0:	2300      	movs	r3, #0
 80011b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80011b4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80011b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 fd50 	bl	8002c64 <HAL_RCC_OscConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SystemClock_Config+0x62>
  {
    Error_Handler();
 80011ca:	f000 f93d 	bl	8001448 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ce:	230f      	movs	r3, #15
 80011d0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d2:	2302      	movs	r3, #2
 80011d4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	2102      	movs	r1, #2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 fc42 	bl	8003a74 <HAL_RCC_ClockConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80011f6:	f000 f927 	bl	8001448 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80011fa:	2321      	movs	r3, #33	; 0x21
 80011fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 80011fe:	2301      	movs	r3, #1
 8001200:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8001202:	2310      	movs	r3, #16
 8001204:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	4618      	mov	r0, r3
 800120a:	f002 fe69 	bl	8003ee0 <HAL_RCCEx_PeriphCLKConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001214:	f000 f918 	bl	8001448 <Error_Handler>
  }
}
 8001218:	bf00      	nop
 800121a:	3758      	adds	r7, #88	; 0x58
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <setup>:

/* USER CODE BEGIN 4 */
void setup(){
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
	ConfigOC_Speaker.OCMode = TIM_OCMODE_PWM1;
 8001226:	4b2c      	ldr	r3, [pc, #176]	; (80012d8 <setup+0xb8>)
 8001228:	2260      	movs	r2, #96	; 0x60
 800122a:	601a      	str	r2, [r3, #0]
	ConfigOC_Speaker.OCPolarity = TIM_OCPOLARITY_HIGH;
 800122c:	4b2a      	ldr	r3, [pc, #168]	; (80012d8 <setup+0xb8>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
	ConfigOC_Speaker.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001232:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <setup+0xb8>)
 8001234:	2200      	movs	r2, #0
 8001236:	60da      	str	r2, [r3, #12]
	ConfigOC_Speaker.OCFastMode = TIM_OCFAST_DISABLE;
 8001238:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <setup+0xb8>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
	ConfigOC_Speaker.OCIdleState = TIM_OCIDLESTATE_RESET;
 800123e:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <setup+0xb8>)
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
	ConfigOC_Speaker.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001244:	4b24      	ldr	r3, [pc, #144]	; (80012d8 <setup+0xb8>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]

	HAL_Delay(300);
 800124a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800124e:	f000 fca7 	bl	8001ba0 <HAL_Delay>
	printf("Timestamp,Roll Speed,Pitch Speed,Yaw Speed\r\n");
 8001252:	4822      	ldr	r0, [pc, #136]	; (80012dc <setup+0xbc>)
 8001254:	f005 fa82 	bl	800675c <puts>
	HAL_Delay(100);
 8001258:	2064      	movs	r0, #100	; 0x64
 800125a:	f000 fca1 	bl	8001ba0 <HAL_Delay>
	while(1) {
		if(lpme1_set_Freq(LPMS_DATA_FREQ_200HZ) != LPME1_OK) ready_flag=0;
 800125e:	2004      	movs	r0, #4
 8001260:	f7ff fe37 	bl	8000ed2 <lpme1_set_Freq>
 8001264:	4603      	mov	r3, r0
 8001266:	2b01      	cmp	r3, #1
 8001268:	d002      	beq.n	8001270 <setup+0x50>
 800126a:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <setup+0xc0>)
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
		if(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) ready_flag=0;
 8001270:	481c      	ldr	r0, [pc, #112]	; (80012e4 <setup+0xc4>)
 8001272:	f002 ff87 	bl	8004184 <HAL_TIM_Base_Start_IT>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d002      	beq.n	8001282 <setup+0x62>
 800127c:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <setup+0xc0>)
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8001282:	2064      	movs	r0, #100	; 0x64
 8001284:	f000 fc8c 	bl	8001ba0 <HAL_Delay>
		if(ready_flag == 1) break;
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <setup+0xc0>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d103      	bne.n	8001298 <setup+0x78>
		ready_flag = 1;
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <setup+0xc0>)
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
		if(lpme1_set_Freq(LPMS_DATA_FREQ_200HZ) != LPME1_OK) ready_flag=0;
 8001296:	e7e2      	b.n	800125e <setup+0x3e>
		if(ready_flag == 1) break;
 8001298:	bf00      	nop
	}
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 800129a:	2104      	movs	r1, #4
 800129c:	4812      	ldr	r0, [pc, #72]	; (80012e8 <setup+0xc8>)
 800129e:	f002 ffd1 	bl	8004244 <HAL_TIM_PWM_Start>

	//Ready beep
	for(int i=0;i<3;i++){
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	e010      	b.n	80012ca <setup+0xaa>
		speaker_output(0.5);
 80012a8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80012ac:	f000 f820 	bl	80012f0 <speaker_output>
		HAL_Delay(50);
 80012b0:	2032      	movs	r0, #50	; 0x32
 80012b2:	f000 fc75 	bl	8001ba0 <HAL_Delay>
		speaker_output(0);
 80012b6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80012ec <setup+0xcc>
 80012ba:	f000 f819 	bl	80012f0 <speaker_output>
		HAL_Delay(50);
 80012be:	2032      	movs	r0, #50	; 0x32
 80012c0:	f000 fc6e 	bl	8001ba0 <HAL_Delay>
	for(int i=0;i<3;i++){
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3301      	adds	r3, #1
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	ddeb      	ble.n	80012a8 <setup+0x88>
	}
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200002b0 	.word	0x200002b0
 80012dc:	08009e78 	.word	0x08009e78
 80012e0:	20000000 	.word	0x20000000
 80012e4:	2000030c 	.word	0x2000030c
 80012e8:	200002cc 	.word	0x200002cc
 80012ec:	00000000 	.word	0x00000000

080012f0 <speaker_output>:

void speaker_output(float duty){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	ed87 0a01 	vstr	s0, [r7, #4]
	if(duty>0){
 80012fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80012fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001306:	dd1e      	ble.n	8001346 <speaker_output+0x56>
		ConfigOC_Speaker.Pulse=(int)(duty*htim3.Init.Period);
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <speaker_output+0x80>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001314:	edd7 7a01 	vldr	s15, [r7, #4]
 8001318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800131c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001320:	ee17 2a90 	vmov	r2, s15
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <speaker_output+0x84>)
 8001326:	605a      	str	r2, [r3, #4]
		HAL_TIM_PWM_ConfigChannel(&htim3,&ConfigOC_Speaker,TIM_CHANNEL_2);
 8001328:	2204      	movs	r2, #4
 800132a:	4912      	ldr	r1, [pc, #72]	; (8001374 <speaker_output+0x84>)
 800132c:	4810      	ldr	r0, [pc, #64]	; (8001370 <speaker_output+0x80>)
 800132e:	f003 f8fb 	bl	8004528 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001332:	2104      	movs	r1, #4
 8001334:	480e      	ldr	r0, [pc, #56]	; (8001370 <speaker_output+0x80>)
 8001336:	f002 ff85 	bl	8004244 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 800133a:	2201      	movs	r2, #1
 800133c:	2102      	movs	r1, #2
 800133e:	480e      	ldr	r0, [pc, #56]	; (8001378 <speaker_output+0x88>)
 8001340:	f000 feec 	bl	800211c <HAL_GPIO_WritePin>
		ConfigOC_Speaker.Pulse=0;
		HAL_TIM_PWM_ConfigChannel(&htim3,&ConfigOC_Speaker,TIM_CHANNEL_2);
		HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
	}
}
 8001344:	e010      	b.n	8001368 <speaker_output+0x78>
		ConfigOC_Speaker.Pulse=0;
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <speaker_output+0x84>)
 8001348:	2200      	movs	r2, #0
 800134a:	605a      	str	r2, [r3, #4]
		HAL_TIM_PWM_ConfigChannel(&htim3,&ConfigOC_Speaker,TIM_CHANNEL_2);
 800134c:	2204      	movs	r2, #4
 800134e:	4909      	ldr	r1, [pc, #36]	; (8001374 <speaker_output+0x84>)
 8001350:	4807      	ldr	r0, [pc, #28]	; (8001370 <speaker_output+0x80>)
 8001352:	f003 f8e9 	bl	8004528 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001356:	2104      	movs	r1, #4
 8001358:	4805      	ldr	r0, [pc, #20]	; (8001370 <speaker_output+0x80>)
 800135a:	f002 ff73 	bl	8004244 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	2102      	movs	r1, #2
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <speaker_output+0x88>)
 8001364:	f000 feda 	bl	800211c <HAL_GPIO_WritePin>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200002cc 	.word	0x200002cc
 8001374:	200002b0 	.word	0x200002b0
 8001378:	48000400 	.word	0x48000400

0800137c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800137c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001380:	b088      	sub	sp, #32
 8001382:	af06      	add	r7, sp, #24
 8001384:	6078      	str	r0, [r7, #4]
  if (htim == &htim2){
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a28      	ldr	r2, [pc, #160]	; (800142c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d145      	bne.n	800141a <HAL_TIM_PeriodElapsedCallback+0x9e>
	  if(lpme1_get_timestamp(&lpme1Data.time)==LPME1_OK) HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);	//For instant visual debug
 800138e:	4828      	ldr	r0, [pc, #160]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001390:	f7ff fd56 	bl	8000e40 <lpme1_get_timestamp>
 8001394:	4603      	mov	r3, r0
 8001396:	2b01      	cmp	r3, #1
 8001398:	d103      	bne.n	80013a2 <HAL_TIM_PeriodElapsedCallback+0x26>
 800139a:	2108      	movs	r1, #8
 800139c:	4825      	ldr	r0, [pc, #148]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800139e:	f000 fed5 	bl	800214c <HAL_GPIO_TogglePin>
	  //lpme1_get_acc(lpme1Data.acc);
	  lpme1_get_gyr(lpme1Data.gyr);
 80013a2:	4825      	ldr	r0, [pc, #148]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80013a4:	f7ff fd6b 	bl	8000e7e <lpme1_get_gyr>
	  //lpme1_get_mag(lpme1Data.mag);
	  //lpme1_get_euler(lpme1Data.euler);
	  //lpme1_get_quat(lpme1Data.quat);

	  if(logger_flag==1){
 80013a8:	4b24      	ldr	r3, [pc, #144]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d02b      	beq.n	8001408 <HAL_TIM_PeriodElapsedCallback+0x8c>
		  //printf("%.3f,%f,%.3f\r\n", lpme1Data.time, lpme1Data.euler[2], lpme1Data.gyr[2]);
		  printf("%.3f,%3f,%.3f,%.3f\r\n", lpme1Data.time, lpme1Data.gyr[0], lpme1Data.gyr[1], lpme1Data.gyr[2]);
 80013b0:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff f8c7 	bl	8000548 <__aeabi_f2d>
 80013ba:	4682      	mov	sl, r0
 80013bc:	468b      	mov	fp, r1
 80013be:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f8c0 	bl	8000548 <__aeabi_f2d>
 80013c8:	4604      	mov	r4, r0
 80013ca:	460d      	mov	r5, r1
 80013cc:	4b18      	ldr	r3, [pc, #96]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f8b9 	bl	8000548 <__aeabi_f2d>
 80013d6:	4680      	mov	r8, r0
 80013d8:	4689      	mov	r9, r1
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff f8b2 	bl	8000548 <__aeabi_f2d>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013ec:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80013f0:	e9cd 4500 	strd	r4, r5, [sp]
 80013f4:	4652      	mov	r2, sl
 80013f6:	465b      	mov	r3, fp
 80013f8:	4811      	ldr	r0, [pc, #68]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80013fa:	f005 f93b 	bl	8006674 <iprintf>
		  counter++;
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	3301      	adds	r3, #1
 8001404:	4a0f      	ldr	r2, [pc, #60]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001406:	6013      	str	r3, [r2, #0]
	  }
	  if(counter>counter_th){
 8001408:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001410:	4293      	cmp	r3, r2
 8001412:	dd02      	ble.n	800141a <HAL_TIM_PeriodElapsedCallback+0x9e>
		  logger_flag=0;
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
	  }
  }
  HAL_TIM_Base_Start_IT(&htim2);
 800141a:	4804      	ldr	r0, [pc, #16]	; (800142c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800141c:	f002 feb2 	bl	8004184 <HAL_TIM_Base_Start_IT>
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800142a:	bf00      	nop
 800142c:	2000030c 	.word	0x2000030c
 8001430:	2000025c 	.word	0x2000025c
 8001434:	48000400 	.word	0x48000400
 8001438:	2000026c 	.word	0x2000026c
 800143c:	200001fc 	.word	0x200001fc
 8001440:	08009ea4 	.word	0x08009ea4
 8001444:	20000200 	.word	0x20000200

08001448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <HAL_MspInit+0x44>)
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	4a0e      	ldr	r2, [pc, #56]	; (800149c <HAL_MspInit+0x44>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6193      	str	r3, [r2, #24]
 800146a:	4b0c      	ldr	r3, [pc, #48]	; (800149c <HAL_MspInit+0x44>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_MspInit+0x44>)
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	4a08      	ldr	r2, [pc, #32]	; (800149c <HAL_MspInit+0x44>)
 800147c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001480:	61d3      	str	r3, [r2, #28]
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_MspInit+0x44>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000

080014a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <HardFault_Handler+0x4>

080014b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <MemManage_Handler+0x4>

080014ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <BusFault_Handler+0x4>

080014c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <UsageFault_Handler+0x4>

080014c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f4:	f000 fb34 	bl	8001b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}

080014fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <TIM2_IRQHandler+0x10>)
 8001502:	f002 fef1 	bl	80042e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	2000030c 	.word	0x2000030c

08001510 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	e00a      	b.n	8001538 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001522:	f3af 8000 	nop.w
 8001526:	4601      	mov	r1, r0
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	60ba      	str	r2, [r7, #8]
 800152e:	b2ca      	uxtb	r2, r1
 8001530:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	3301      	adds	r3, #1
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	429a      	cmp	r2, r3
 800153e:	dbf0      	blt.n	8001522 <_read+0x12>
	}

return len;
 8001540:	687b      	ldr	r3, [r7, #4]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	e009      	b.n	8001570 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	60ba      	str	r2, [r7, #8]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fd91 	bl	800108c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	3301      	adds	r3, #1
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	429a      	cmp	r2, r3
 8001576:	dbf1      	blt.n	800155c <_write+0x12>
	}
	return len;
 8001578:	687b      	ldr	r3, [r7, #4]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <_close>:

int _close(int file)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
	return -1;
 800158a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015aa:	605a      	str	r2, [r3, #4]
	return 0;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <_isatty>:

int _isatty(int file)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
	return 1;
 80015c2:	2301      	movs	r3, #1
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
	return 0;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <_sbrk+0x50>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <_sbrk+0x16>
		heap_end = &end;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <_sbrk+0x50>)
 80015fe:	4a10      	ldr	r2, [pc, #64]	; (8001640 <_sbrk+0x54>)
 8001600:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <_sbrk+0x50>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <_sbrk+0x50>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4413      	add	r3, r2
 8001610:	466a      	mov	r2, sp
 8001612:	4293      	cmp	r3, r2
 8001614:	d907      	bls.n	8001626 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001616:	f004 f9b1 	bl	800597c <__errno>
 800161a:	4602      	mov	r2, r0
 800161c:	230c      	movs	r3, #12
 800161e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001624:	e006      	b.n	8001634 <_sbrk+0x48>
	}

	heap_end += incr;
 8001626:	4b05      	ldr	r3, [pc, #20]	; (800163c <_sbrk+0x50>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	4a03      	ldr	r2, [pc, #12]	; (800163c <_sbrk+0x50>)
 8001630:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001632:	68fb      	ldr	r3, [r7, #12]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000204 	.word	0x20000204
 8001640:	20000458 	.word	0x20000458

08001644 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <SystemInit+0x28>)
 800164a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800164e:	4a07      	ldr	r2, [pc, #28]	; (800166c <SystemInit+0x28>)
 8001650:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001654:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <SystemInit+0x28>)
 800165a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800165e:	609a      	str	r2, [r3, #8]
#endif
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001676:	f107 0310 	add.w	r3, r7, #16
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800168e:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <MX_TIM2_Init+0x98>)
 8001690:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001694:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 640-1;
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <MX_TIM2_Init+0x98>)
 8001698:	f240 227f 	movw	r2, #639	; 0x27f
 800169c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169e:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <MX_TIM2_Init+0x98>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80016a4:	4b18      	ldr	r3, [pc, #96]	; (8001708 <MX_TIM2_Init+0x98>)
 80016a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ac:	4b16      	ldr	r3, [pc, #88]	; (8001708 <MX_TIM2_Init+0x98>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <MX_TIM2_Init+0x98>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016b8:	4813      	ldr	r0, [pc, #76]	; (8001708 <MX_TIM2_Init+0x98>)
 80016ba:	f002 fd37 	bl	800412c <HAL_TIM_Base_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80016c4:	f7ff fec0 	bl	8001448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016ce:	f107 0310 	add.w	r3, r7, #16
 80016d2:	4619      	mov	r1, r3
 80016d4:	480c      	ldr	r0, [pc, #48]	; (8001708 <MX_TIM2_Init+0x98>)
 80016d6:	f003 f83f 	bl	8004758 <HAL_TIM_ConfigClockSource>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80016e0:	f7ff feb2 	bl	8001448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e4:	2300      	movs	r3, #0
 80016e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	4619      	mov	r1, r3
 80016f0:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_TIM2_Init+0x98>)
 80016f2:	f003 fcf1 	bl	80050d8 <HAL_TIMEx_MasterConfigSynchronization>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80016fc:	f7ff fea4 	bl	8001448 <Error_Handler>
  }

}
 8001700:	bf00      	nop
 8001702:	3720      	adds	r7, #32
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	2000030c 	.word	0x2000030c

0800170c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08e      	sub	sp, #56	; 0x38
 8001710:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001712:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001720:	f107 031c 	add.w	r3, r7, #28
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800172c:	463b      	mov	r3, r7
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]
 800173a:	615a      	str	r2, [r3, #20]
 800173c:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800173e:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <MX_TIM3_Init+0xe4>)
 8001740:	4a2c      	ldr	r2, [pc, #176]	; (80017f4 <MX_TIM3_Init+0xe8>)
 8001742:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 248-1;
 8001744:	4b2a      	ldr	r3, [pc, #168]	; (80017f0 <MX_TIM3_Init+0xe4>)
 8001746:	22f7      	movs	r2, #247	; 0xf7
 8001748:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174a:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <MX_TIM3_Init+0xe4>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001750:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <MX_TIM3_Init+0xe4>)
 8001752:	2263      	movs	r2, #99	; 0x63
 8001754:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001756:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <MX_TIM3_Init+0xe4>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175c:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <MX_TIM3_Init+0xe4>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001762:	4823      	ldr	r0, [pc, #140]	; (80017f0 <MX_TIM3_Init+0xe4>)
 8001764:	f002 fce2 	bl	800412c <HAL_TIM_Base_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800176e:	f7ff fe6b 	bl	8001448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001778:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800177c:	4619      	mov	r1, r3
 800177e:	481c      	ldr	r0, [pc, #112]	; (80017f0 <MX_TIM3_Init+0xe4>)
 8001780:	f002 ffea 	bl	8004758 <HAL_TIM_ConfigClockSource>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800178a:	f7ff fe5d 	bl	8001448 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800178e:	4818      	ldr	r0, [pc, #96]	; (80017f0 <MX_TIM3_Init+0xe4>)
 8001790:	f002 fd22 	bl	80041d8 <HAL_TIM_PWM_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800179a:	f7ff fe55 	bl	8001448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017a6:	f107 031c 	add.w	r3, r7, #28
 80017aa:	4619      	mov	r1, r3
 80017ac:	4810      	ldr	r0, [pc, #64]	; (80017f0 <MX_TIM3_Init+0xe4>)
 80017ae:	f003 fc93 	bl	80050d8 <HAL_TIMEx_MasterConfigSynchronization>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80017b8:	f7ff fe46 	bl	8001448 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017bc:	2360      	movs	r3, #96	; 0x60
 80017be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017cc:	463b      	mov	r3, r7
 80017ce:	2204      	movs	r2, #4
 80017d0:	4619      	mov	r1, r3
 80017d2:	4807      	ldr	r0, [pc, #28]	; (80017f0 <MX_TIM3_Init+0xe4>)
 80017d4:	f002 fea8 	bl	8004528 <HAL_TIM_PWM_ConfigChannel>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80017de:	f7ff fe33 	bl	8001448 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80017e2:	4803      	ldr	r0, [pc, #12]	; (80017f0 <MX_TIM3_Init+0xe4>)
 80017e4:	f000 f840 	bl	8001868 <HAL_TIM_MspPostInit>

}
 80017e8:	bf00      	nop
 80017ea:	3738      	adds	r7, #56	; 0x38
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	200002cc 	.word	0x200002cc
 80017f4:	40000400 	.word	0x40000400

080017f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001808:	d114      	bne.n	8001834 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <HAL_TIM_Base_MspInit+0x68>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	4a14      	ldr	r2, [pc, #80]	; (8001860 <HAL_TIM_Base_MspInit+0x68>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	61d3      	str	r3, [r2, #28]
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_TIM_Base_MspInit+0x68>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2100      	movs	r1, #0
 8001826:	201c      	movs	r0, #28
 8001828:	f000 fab7 	bl	8001d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800182c:	201c      	movs	r0, #28
 800182e:	f000 fad0 	bl	8001dd2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001832:	e010      	b.n	8001856 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <HAL_TIM_Base_MspInit+0x6c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d10b      	bne.n	8001856 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <HAL_TIM_Base_MspInit+0x68>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	4a07      	ldr	r2, [pc, #28]	; (8001860 <HAL_TIM_Base_MspInit+0x68>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	61d3      	str	r3, [r2, #28]
 800184a:	4b05      	ldr	r3, [pc, #20]	; (8001860 <HAL_TIM_Base_MspInit+0x68>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]
}
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40021000 	.word	0x40021000
 8001864:	40000400 	.word	0x40000400

08001868 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a11      	ldr	r2, [pc, #68]	; (80018cc <HAL_TIM_MspPostInit+0x64>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d11c      	bne.n	80018c4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <HAL_TIM_MspPostInit+0x68>)
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	4a10      	ldr	r2, [pc, #64]	; (80018d0 <HAL_TIM_MspPostInit+0x68>)
 8001890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001894:	6153      	str	r3, [r2, #20]
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <HAL_TIM_MspPostInit+0x68>)
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018a2:	2310      	movs	r3, #16
 80018a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018b2:	2302      	movs	r3, #2
 80018b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	4619      	mov	r1, r3
 80018bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c0:	f000 faa2 	bl	8001e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018c4:	bf00      	nop
 80018c6:	3720      	adds	r7, #32
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40000400 	.word	0x40000400
 80018d0:	40021000 	.word	0x40021000

080018d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80018d8:	4b14      	ldr	r3, [pc, #80]	; (800192c <MX_USART1_UART_Init+0x58>)
 80018da:	4a15      	ldr	r2, [pc, #84]	; (8001930 <MX_USART1_UART_Init+0x5c>)
 80018dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <MX_USART1_UART_Init+0x58>)
 80018e0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80018e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <MX_USART1_UART_Init+0x58>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <MX_USART1_UART_Init+0x58>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <MX_USART1_UART_Init+0x58>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <MX_USART1_UART_Init+0x58>)
 80018fa:	220c      	movs	r2, #12
 80018fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <MX_USART1_UART_Init+0x58>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001904:	4b09      	ldr	r3, [pc, #36]	; (800192c <MX_USART1_UART_Init+0x58>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800190a:	4b08      	ldr	r3, [pc, #32]	; (800192c <MX_USART1_UART_Init+0x58>)
 800190c:	2200      	movs	r2, #0
 800190e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <MX_USART1_UART_Init+0x58>)
 8001912:	2200      	movs	r2, #0
 8001914:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001916:	4805      	ldr	r0, [pc, #20]	; (800192c <MX_USART1_UART_Init+0x58>)
 8001918:	f003 fc6a 	bl	80051f0 <HAL_UART_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001922:	f7ff fd91 	bl	8001448 <Error_Handler>
  }

}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	2000034c 	.word	0x2000034c
 8001930:	40013800 	.word	0x40013800

08001934 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001938:	4b14      	ldr	r3, [pc, #80]	; (800198c <MX_USART2_UART_Init+0x58>)
 800193a:	4a15      	ldr	r2, [pc, #84]	; (8001990 <MX_USART2_UART_Init+0x5c>)
 800193c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <MX_USART2_UART_Init+0x58>)
 8001940:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001946:	4b11      	ldr	r3, [pc, #68]	; (800198c <MX_USART2_UART_Init+0x58>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800194c:	4b0f      	ldr	r3, [pc, #60]	; (800198c <MX_USART2_UART_Init+0x58>)
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <MX_USART2_UART_Init+0x58>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <MX_USART2_UART_Init+0x58>)
 800195a:	220c      	movs	r2, #12
 800195c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195e:	4b0b      	ldr	r3, [pc, #44]	; (800198c <MX_USART2_UART_Init+0x58>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <MX_USART2_UART_Init+0x58>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <MX_USART2_UART_Init+0x58>)
 800196c:	2200      	movs	r2, #0
 800196e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <MX_USART2_UART_Init+0x58>)
 8001972:	2200      	movs	r2, #0
 8001974:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001976:	4805      	ldr	r0, [pc, #20]	; (800198c <MX_USART2_UART_Init+0x58>)
 8001978:	f003 fc3a 	bl	80051f0 <HAL_UART_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001982:	f7ff fd61 	bl	8001448 <Error_Handler>
  }

}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200003cc 	.word	0x200003cc
 8001990:	40004400 	.word	0x40004400

08001994 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08c      	sub	sp, #48	; 0x30
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 031c 	add.w	r3, r7, #28
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a30      	ldr	r2, [pc, #192]	; (8001a74 <HAL_UART_MspInit+0xe0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d12a      	bne.n	8001a0c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019b6:	4b30      	ldr	r3, [pc, #192]	; (8001a78 <HAL_UART_MspInit+0xe4>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	4a2f      	ldr	r2, [pc, #188]	; (8001a78 <HAL_UART_MspInit+0xe4>)
 80019bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c0:	6193      	str	r3, [r2, #24]
 80019c2:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <HAL_UART_MspInit+0xe4>)
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ca:	61bb      	str	r3, [r7, #24]
 80019cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ce:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <HAL_UART_MspInit+0xe4>)
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	4a29      	ldr	r2, [pc, #164]	; (8001a78 <HAL_UART_MspInit+0xe4>)
 80019d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d8:	6153      	str	r3, [r2, #20]
 80019da:	4b27      	ldr	r3, [pc, #156]	; (8001a78 <HAL_UART_MspInit+0xe4>)
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ec:	2302      	movs	r3, #2
 80019ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019f4:	2303      	movs	r3, #3
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019f8:	2307      	movs	r3, #7
 80019fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fc:	f107 031c 	add.w	r3, r7, #28
 8001a00:	4619      	mov	r1, r3
 8001a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a06:	f000 f9ff 	bl	8001e08 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a0a:	e02e      	b.n	8001a6a <HAL_UART_MspInit+0xd6>
  else if(uartHandle->Instance==USART2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a1a      	ldr	r2, [pc, #104]	; (8001a7c <HAL_UART_MspInit+0xe8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d129      	bne.n	8001a6a <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a16:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <HAL_UART_MspInit+0xe4>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	4a17      	ldr	r2, [pc, #92]	; (8001a78 <HAL_UART_MspInit+0xe4>)
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a20:	61d3      	str	r3, [r2, #28]
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <HAL_UART_MspInit+0xe4>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2e:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_UART_MspInit+0xe4>)
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	4a11      	ldr	r2, [pc, #68]	; (8001a78 <HAL_UART_MspInit+0xe4>)
 8001a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a38:	6153      	str	r3, [r2, #20]
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <HAL_UART_MspInit+0xe4>)
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001a46:	f248 0304 	movw	r3, #32772	; 0x8004
 8001a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a54:	2303      	movs	r3, #3
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a58:	2307      	movs	r3, #7
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5c:	f107 031c 	add.w	r3, r7, #28
 8001a60:	4619      	mov	r1, r3
 8001a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a66:	f000 f9cf 	bl	8001e08 <HAL_GPIO_Init>
}
 8001a6a:	bf00      	nop
 8001a6c:	3730      	adds	r7, #48	; 0x30
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40013800 	.word	0x40013800
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40004400 	.word	0x40004400

08001a80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a86:	e003      	b.n	8001a90 <LoopCopyDataInit>

08001a88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a8e:	3104      	adds	r1, #4

08001a90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a90:	480b      	ldr	r0, [pc, #44]	; (8001ac0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a98:	d3f6      	bcc.n	8001a88 <CopyDataInit>
	ldr	r2, =_sbss
 8001a9a:	4a0b      	ldr	r2, [pc, #44]	; (8001ac8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a9c:	e002      	b.n	8001aa4 <LoopFillZerobss>

08001a9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001aa0:	f842 3b04 	str.w	r3, [r2], #4

08001aa4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <LoopForever+0x16>)
	cmp	r2, r3
 8001aa6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001aa8:	d3f9      	bcc.n	8001a9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001aaa:	f7ff fdcb 	bl	8001644 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aae:	f003 ff6b 	bl	8005988 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ab2:	f7ff fafd 	bl	80010b0 <main>

08001ab6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ab6:	e7fe      	b.n	8001ab6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ab8:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001abc:	0800a220 	.word	0x0800a220
	ldr	r0, =_sdata
 8001ac0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ac4:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8001ac8:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8001acc:	20000454 	.word	0x20000454

08001ad0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ad0:	e7fe      	b.n	8001ad0 <ADC1_2_IRQHandler>
	...

08001ad4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <HAL_Init+0x28>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a07      	ldr	r2, [pc, #28]	; (8001afc <HAL_Init+0x28>)
 8001ade:	f043 0310 	orr.w	r3, r3, #16
 8001ae2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae4:	2003      	movs	r0, #3
 8001ae6:	f000 f94d 	bl	8001d84 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aea:	2000      	movs	r0, #0
 8001aec:	f000 f808 	bl	8001b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af0:	f7ff fcb2 	bl	8001458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40022000 	.word	0x40022000

08001b00 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_InitTick+0x54>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_InitTick+0x58>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	4619      	mov	r1, r3
 8001b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 f965 	bl	8001dee <HAL_SYSTICK_Config>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00e      	b.n	8001b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b0f      	cmp	r3, #15
 8001b32:	d80a      	bhi.n	8001b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b34:	2200      	movs	r2, #0
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b3c:	f000 f92d 	bl	8001d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b40:	4a06      	ldr	r2, [pc, #24]	; (8001b5c <HAL_InitTick+0x5c>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e000      	b.n	8001b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000004 	.word	0x20000004
 8001b58:	2000000c 	.word	0x2000000c
 8001b5c:	20000008 	.word	0x20000008

08001b60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_IncTick+0x20>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_IncTick+0x24>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <HAL_IncTick+0x24>)
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	2000000c 	.word	0x2000000c
 8001b84:	2000044c 	.word	0x2000044c

08001b88 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <HAL_GetTick+0x14>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	2000044c 	.word	0x2000044c

08001ba0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba8:	f7ff ffee 	bl	8001b88 <HAL_GetTick>
 8001bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bb8:	d005      	beq.n	8001bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_Delay+0x40>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001bc6:	bf00      	nop
 8001bc8:	f7ff ffde 	bl	8001b88 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d8f7      	bhi.n	8001bc8 <HAL_Delay+0x28>
  {
  }
}
 8001bd8:	bf00      	nop
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	2000000c 	.word	0x2000000c

08001be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c00:	4013      	ands	r3, r2
 8001c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c16:	4a04      	ldr	r2, [pc, #16]	; (8001c28 <__NVIC_SetPriorityGrouping+0x44>)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	60d3      	str	r3, [r2, #12]
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c30:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <__NVIC_GetPriorityGrouping+0x18>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	0a1b      	lsrs	r3, r3, #8
 8001c36:	f003 0307 	and.w	r3, r3, #7
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	db0b      	blt.n	8001c72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	f003 021f 	and.w	r2, r3, #31
 8001c60:	4907      	ldr	r1, [pc, #28]	; (8001c80 <__NVIC_EnableIRQ+0x38>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	095b      	lsrs	r3, r3, #5
 8001c68:	2001      	movs	r0, #1
 8001c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000e100 	.word	0xe000e100

08001c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	db0a      	blt.n	8001cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	490c      	ldr	r1, [pc, #48]	; (8001cd0 <__NVIC_SetPriority+0x4c>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	0112      	lsls	r2, r2, #4
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cac:	e00a      	b.n	8001cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4908      	ldr	r1, [pc, #32]	; (8001cd4 <__NVIC_SetPriority+0x50>)
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	3b04      	subs	r3, #4
 8001cbc:	0112      	lsls	r2, r2, #4
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	761a      	strb	r2, [r3, #24]
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000e100 	.word	0xe000e100
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f1c3 0307 	rsb	r3, r3, #7
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	bf28      	it	cs
 8001cf6:	2304      	movcs	r3, #4
 8001cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d902      	bls.n	8001d08 <NVIC_EncodePriority+0x30>
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3b03      	subs	r3, #3
 8001d06:	e000      	b.n	8001d0a <NVIC_EncodePriority+0x32>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43da      	mvns	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	43d9      	mvns	r1, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	4313      	orrs	r3, r2
         );
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3724      	adds	r7, #36	; 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d50:	d301      	bcc.n	8001d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d52:	2301      	movs	r3, #1
 8001d54:	e00f      	b.n	8001d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <SysTick_Config+0x40>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d5e:	210f      	movs	r1, #15
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d64:	f7ff ff8e 	bl	8001c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <SysTick_Config+0x40>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d6e:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <SysTick_Config+0x40>)
 8001d70:	2207      	movs	r2, #7
 8001d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	e000e010 	.word	0xe000e010

08001d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ff29 	bl	8001be4 <__NVIC_SetPriorityGrouping>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dac:	f7ff ff3e 	bl	8001c2c <__NVIC_GetPriorityGrouping>
 8001db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68b9      	ldr	r1, [r7, #8]
 8001db6:	6978      	ldr	r0, [r7, #20]
 8001db8:	f7ff ff8e 	bl	8001cd8 <NVIC_EncodePriority>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff5d 	bl	8001c84 <__NVIC_SetPriority>
}
 8001dca:	bf00      	nop
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4603      	mov	r3, r0
 8001dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff31 	bl	8001c48 <__NVIC_EnableIRQ>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff ffa2 	bl	8001d40 <SysTick_Config>
 8001dfc:	4603      	mov	r3, r0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e16:	e14e      	b.n	80020b6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	fa01 f303 	lsl.w	r3, r1, r3
 8001e24:	4013      	ands	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 8140 	beq.w	80020b0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x38>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b12      	cmp	r3, #18
 8001e3e:	d123      	bne.n	8001e88 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	08da      	lsrs	r2, r3, #3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3208      	adds	r2, #8
 8001e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	220f      	movs	r2, #15
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	08da      	lsrs	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3208      	adds	r2, #8
 8001e82:	6939      	ldr	r1, [r7, #16]
 8001e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	2203      	movs	r2, #3
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0203 	and.w	r2, r3, #3
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d00b      	beq.n	8001edc <HAL_GPIO_Init+0xd4>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d007      	beq.n	8001edc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ed0:	2b11      	cmp	r3, #17
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b12      	cmp	r3, #18
 8001eda:	d130      	bne.n	8001f3e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f12:	2201      	movs	r2, #1
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	091b      	lsrs	r3, r3, #4
 8001f28:	f003 0201 	and.w	r2, r3, #1
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	2203      	movs	r2, #3
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4013      	ands	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 809a 	beq.w	80020b0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7c:	4b55      	ldr	r3, [pc, #340]	; (80020d4 <HAL_GPIO_Init+0x2cc>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	4a54      	ldr	r2, [pc, #336]	; (80020d4 <HAL_GPIO_Init+0x2cc>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	6193      	str	r3, [r2, #24]
 8001f88:	4b52      	ldr	r3, [pc, #328]	; (80020d4 <HAL_GPIO_Init+0x2cc>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f94:	4a50      	ldr	r2, [pc, #320]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	089b      	lsrs	r3, r3, #2
 8001f9a:	3302      	adds	r3, #2
 8001f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	220f      	movs	r2, #15
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fbe:	d013      	beq.n	8001fe8 <HAL_GPIO_Init+0x1e0>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a46      	ldr	r2, [pc, #280]	; (80020dc <HAL_GPIO_Init+0x2d4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d00d      	beq.n	8001fe4 <HAL_GPIO_Init+0x1dc>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a45      	ldr	r2, [pc, #276]	; (80020e0 <HAL_GPIO_Init+0x2d8>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d007      	beq.n	8001fe0 <HAL_GPIO_Init+0x1d8>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a44      	ldr	r2, [pc, #272]	; (80020e4 <HAL_GPIO_Init+0x2dc>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d101      	bne.n	8001fdc <HAL_GPIO_Init+0x1d4>
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e006      	b.n	8001fea <HAL_GPIO_Init+0x1e2>
 8001fdc:	2305      	movs	r3, #5
 8001fde:	e004      	b.n	8001fea <HAL_GPIO_Init+0x1e2>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e002      	b.n	8001fea <HAL_GPIO_Init+0x1e2>
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e000      	b.n	8001fea <HAL_GPIO_Init+0x1e2>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	f002 0203 	and.w	r2, r2, #3
 8001ff0:	0092      	lsls	r2, r2, #2
 8001ff2:	4093      	lsls	r3, r2
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ffa:	4937      	ldr	r1, [pc, #220]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	3302      	adds	r3, #2
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002008:	4b37      	ldr	r3, [pc, #220]	; (80020e8 <HAL_GPIO_Init+0x2e0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	43db      	mvns	r3, r3
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4013      	ands	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800202c:	4a2e      	ldr	r2, [pc, #184]	; (80020e8 <HAL_GPIO_Init+0x2e0>)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002032:	4b2d      	ldr	r3, [pc, #180]	; (80020e8 <HAL_GPIO_Init+0x2e0>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	43db      	mvns	r3, r3
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4013      	ands	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002056:	4a24      	ldr	r2, [pc, #144]	; (80020e8 <HAL_GPIO_Init+0x2e0>)
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800205c:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <HAL_GPIO_Init+0x2e0>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	43db      	mvns	r3, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002080:	4a19      	ldr	r2, [pc, #100]	; (80020e8 <HAL_GPIO_Init+0x2e0>)
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002086:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <HAL_GPIO_Init+0x2e0>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	43db      	mvns	r3, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020aa:	4a0f      	ldr	r2, [pc, #60]	; (80020e8 <HAL_GPIO_Init+0x2e0>)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	3301      	adds	r3, #1
 80020b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	fa22 f303 	lsr.w	r3, r2, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f47f aea9 	bne.w	8001e18 <HAL_GPIO_Init+0x10>
  }
}
 80020c6:	bf00      	nop
 80020c8:	371c      	adds	r7, #28
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40010000 	.word	0x40010000
 80020dc:	48000400 	.word	0x48000400
 80020e0:	48000800 	.word	0x48000800
 80020e4:	48000c00 	.word	0x48000c00
 80020e8:	40010400 	.word	0x40010400

080020ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	887b      	ldrh	r3, [r7, #2]
 80020fe:	4013      	ands	r3, r2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002104:	2301      	movs	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
 8002108:	e001      	b.n	800210e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800210e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	807b      	strh	r3, [r7, #2]
 8002128:	4613      	mov	r3, r2
 800212a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800212c:	787b      	ldrb	r3, [r7, #1]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002132:	887a      	ldrh	r2, [r7, #2]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002138:	e002      	b.n	8002140 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800213a:	887a      	ldrh	r2, [r7, #2]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	887b      	ldrh	r3, [r7, #2]
 800215e:	4013      	ands	r3, r2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d004      	beq.n	800216e <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002164:	887b      	ldrh	r3, [r7, #2]
 8002166:	041a      	lsls	r2, r3, #16
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800216c:	e002      	b.n	8002174 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800216e:	887a      	ldrh	r2, [r7, #2]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	619a      	str	r2, [r3, #24]
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e081      	b.n	8002296 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7fe fe06 	bl	8000db8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2224      	movs	r2, #36	; 0x24
 80021b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0201 	bic.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d107      	bne.n	80021fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	e006      	b.n	8002208 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002206:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d104      	bne.n	800221a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002218:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800222c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800223c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691a      	ldr	r2, [r3, #16]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	ea42 0103 	orr.w	r1, r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	021a      	lsls	r2, r3, #8
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69d9      	ldr	r1, [r3, #28]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a1a      	ldr	r2, [r3, #32]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2220      	movs	r2, #32
 8002282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af02      	add	r7, sp, #8
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	4608      	mov	r0, r1
 80022aa:	4611      	mov	r1, r2
 80022ac:	461a      	mov	r2, r3
 80022ae:	4603      	mov	r3, r0
 80022b0:	817b      	strh	r3, [r7, #10]
 80022b2:	460b      	mov	r3, r1
 80022b4:	813b      	strh	r3, [r7, #8]
 80022b6:	4613      	mov	r3, r2
 80022b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	f040 80f9 	bne.w	80024ba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022c8:	6a3b      	ldr	r3, [r7, #32]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <HAL_I2C_Mem_Write+0x34>
 80022ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d105      	bne.n	80022e0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0ed      	b.n	80024bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d101      	bne.n	80022ee <HAL_I2C_Mem_Write+0x4e>
 80022ea:	2302      	movs	r3, #2
 80022ec:	e0e6      	b.n	80024bc <HAL_I2C_Mem_Write+0x21c>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022f6:	f7ff fc47 	bl	8001b88 <HAL_GetTick>
 80022fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	2319      	movs	r3, #25
 8002302:	2201      	movs	r2, #1
 8002304:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 fac3 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0d1      	b.n	80024bc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2221      	movs	r2, #33	; 0x21
 800231c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2240      	movs	r2, #64	; 0x40
 8002324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a3a      	ldr	r2, [r7, #32]
 8002332:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002338:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002340:	88f8      	ldrh	r0, [r7, #6]
 8002342:	893a      	ldrh	r2, [r7, #8]
 8002344:	8979      	ldrh	r1, [r7, #10]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	9301      	str	r3, [sp, #4]
 800234a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	4603      	mov	r3, r0
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f9d3 	bl	80026fc <I2C_RequestMemoryWrite>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0a9      	b.n	80024bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236c:	b29b      	uxth	r3, r3
 800236e:	2bff      	cmp	r3, #255	; 0xff
 8002370:	d90e      	bls.n	8002390 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	22ff      	movs	r2, #255	; 0xff
 8002376:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237c:	b2da      	uxtb	r2, r3
 800237e:	8979      	ldrh	r1, [r7, #10]
 8002380:	2300      	movs	r3, #0
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 fba5 	bl	8002ad8 <I2C_TransferConfig>
 800238e:	e00f      	b.n	80023b0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	8979      	ldrh	r1, [r7, #10]
 80023a2:	2300      	movs	r3, #0
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 fb94 	bl	8002ad8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 faad 	bl	8002914 <I2C_WaitOnTXISFlagUntilTimeout>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e07b      	b.n	80024bc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	781a      	ldrb	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023de:	b29b      	uxth	r3, r3
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d034      	beq.n	8002468 <HAL_I2C_Mem_Write+0x1c8>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002402:	2b00      	cmp	r3, #0
 8002404:	d130      	bne.n	8002468 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240c:	2200      	movs	r2, #0
 800240e:	2180      	movs	r1, #128	; 0x80
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 fa3f 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e04d      	b.n	80024bc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002424:	b29b      	uxth	r3, r3
 8002426:	2bff      	cmp	r3, #255	; 0xff
 8002428:	d90e      	bls.n	8002448 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	22ff      	movs	r2, #255	; 0xff
 800242e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002434:	b2da      	uxtb	r2, r3
 8002436:	8979      	ldrh	r1, [r7, #10]
 8002438:	2300      	movs	r3, #0
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 fb49 	bl	8002ad8 <I2C_TransferConfig>
 8002446:	e00f      	b.n	8002468 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002456:	b2da      	uxtb	r2, r3
 8002458:	8979      	ldrh	r1, [r7, #10]
 800245a:	2300      	movs	r3, #0
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 fb38 	bl	8002ad8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d19e      	bne.n	80023b0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 fa8c 	bl	8002994 <I2C_WaitOnSTOPFlagUntilTimeout>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e01a      	b.n	80024bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2220      	movs	r2, #32
 800248c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6859      	ldr	r1, [r3, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <HAL_I2C_Mem_Write+0x224>)
 800249a:	400b      	ands	r3, r1
 800249c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2220      	movs	r2, #32
 80024a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e000      	b.n	80024bc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80024ba:	2302      	movs	r3, #2
  }
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	fe00e800 	.word	0xfe00e800

080024c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	4608      	mov	r0, r1
 80024d2:	4611      	mov	r1, r2
 80024d4:	461a      	mov	r2, r3
 80024d6:	4603      	mov	r3, r0
 80024d8:	817b      	strh	r3, [r7, #10]
 80024da:	460b      	mov	r3, r1
 80024dc:	813b      	strh	r3, [r7, #8]
 80024de:	4613      	mov	r3, r2
 80024e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	f040 80fd 	bne.w	80026ea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <HAL_I2C_Mem_Read+0x34>
 80024f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d105      	bne.n	8002508 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002502:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0f1      	b.n	80026ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_I2C_Mem_Read+0x4e>
 8002512:	2302      	movs	r3, #2
 8002514:	e0ea      	b.n	80026ec <HAL_I2C_Mem_Read+0x224>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800251e:	f7ff fb33 	bl	8001b88 <HAL_GetTick>
 8002522:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	2319      	movs	r3, #25
 800252a:	2201      	movs	r2, #1
 800252c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 f9af 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0d5      	b.n	80026ec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2222      	movs	r2, #34	; 0x22
 8002544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2240      	movs	r2, #64	; 0x40
 800254c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6a3a      	ldr	r2, [r7, #32]
 800255a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002560:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002568:	88f8      	ldrh	r0, [r7, #6]
 800256a:	893a      	ldrh	r2, [r7, #8]
 800256c:	8979      	ldrh	r1, [r7, #10]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	9301      	str	r3, [sp, #4]
 8002572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	4603      	mov	r3, r0
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 f913 	bl	80027a4 <I2C_RequestMemoryRead>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0ad      	b.n	80026ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002594:	b29b      	uxth	r3, r3
 8002596:	2bff      	cmp	r3, #255	; 0xff
 8002598:	d90e      	bls.n	80025b8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	22ff      	movs	r2, #255	; 0xff
 800259e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	8979      	ldrh	r1, [r7, #10]
 80025a8:	4b52      	ldr	r3, [pc, #328]	; (80026f4 <HAL_I2C_Mem_Read+0x22c>)
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 fa91 	bl	8002ad8 <I2C_TransferConfig>
 80025b6:	e00f      	b.n	80025d8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	8979      	ldrh	r1, [r7, #10]
 80025ca:	4b4a      	ldr	r3, [pc, #296]	; (80026f4 <HAL_I2C_Mem_Read+0x22c>)
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 fa80 	bl	8002ad8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025de:	2200      	movs	r2, #0
 80025e0:	2104      	movs	r1, #4
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 f956 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e07c      	b.n	80026ec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d034      	beq.n	8002698 <HAL_I2C_Mem_Read+0x1d0>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002632:	2b00      	cmp	r3, #0
 8002634:	d130      	bne.n	8002698 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263c:	2200      	movs	r2, #0
 800263e:	2180      	movs	r1, #128	; 0x80
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f927 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e04d      	b.n	80026ec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002654:	b29b      	uxth	r3, r3
 8002656:	2bff      	cmp	r3, #255	; 0xff
 8002658:	d90e      	bls.n	8002678 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	22ff      	movs	r2, #255	; 0xff
 800265e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002664:	b2da      	uxtb	r2, r3
 8002666:	8979      	ldrh	r1, [r7, #10]
 8002668:	2300      	movs	r3, #0
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 fa31 	bl	8002ad8 <I2C_TransferConfig>
 8002676:	e00f      	b.n	8002698 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002686:	b2da      	uxtb	r2, r3
 8002688:	8979      	ldrh	r1, [r7, #10]
 800268a:	2300      	movs	r3, #0
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 fa20 	bl	8002ad8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269c:	b29b      	uxth	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d19a      	bne.n	80025d8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f974 	bl	8002994 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e01a      	b.n	80026ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2220      	movs	r2, #32
 80026bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6859      	ldr	r1, [r3, #4]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <HAL_I2C_Mem_Read+0x230>)
 80026ca:	400b      	ands	r3, r1
 80026cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	e000      	b.n	80026ec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80026ea:	2302      	movs	r3, #2
  }
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	80002400 	.word	0x80002400
 80026f8:	fe00e800 	.word	0xfe00e800

080026fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af02      	add	r7, sp, #8
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	4608      	mov	r0, r1
 8002706:	4611      	mov	r1, r2
 8002708:	461a      	mov	r2, r3
 800270a:	4603      	mov	r3, r0
 800270c:	817b      	strh	r3, [r7, #10]
 800270e:	460b      	mov	r3, r1
 8002710:	813b      	strh	r3, [r7, #8]
 8002712:	4613      	mov	r3, r2
 8002714:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002716:	88fb      	ldrh	r3, [r7, #6]
 8002718:	b2da      	uxtb	r2, r3
 800271a:	8979      	ldrh	r1, [r7, #10]
 800271c:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <I2C_RequestMemoryWrite+0xa4>)
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f9d7 	bl	8002ad8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800272a:	69fa      	ldr	r2, [r7, #28]
 800272c:	69b9      	ldr	r1, [r7, #24]
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 f8f0 	bl	8002914 <I2C_WaitOnTXISFlagUntilTimeout>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e02c      	b.n	8002798 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d105      	bne.n	8002750 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002744:	893b      	ldrh	r3, [r7, #8]
 8002746:	b2da      	uxtb	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	629a      	str	r2, [r3, #40]	; 0x28
 800274e:	e015      	b.n	800277c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002750:	893b      	ldrh	r3, [r7, #8]
 8002752:	0a1b      	lsrs	r3, r3, #8
 8002754:	b29b      	uxth	r3, r3
 8002756:	b2da      	uxtb	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800275e:	69fa      	ldr	r2, [r7, #28]
 8002760:	69b9      	ldr	r1, [r7, #24]
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f8d6 	bl	8002914 <I2C_WaitOnTXISFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e012      	b.n	8002798 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002772:	893b      	ldrh	r3, [r7, #8]
 8002774:	b2da      	uxtb	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2200      	movs	r2, #0
 8002784:	2180      	movs	r1, #128	; 0x80
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f884 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	80002000 	.word	0x80002000

080027a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	4608      	mov	r0, r1
 80027ae:	4611      	mov	r1, r2
 80027b0:	461a      	mov	r2, r3
 80027b2:	4603      	mov	r3, r0
 80027b4:	817b      	strh	r3, [r7, #10]
 80027b6:	460b      	mov	r3, r1
 80027b8:	813b      	strh	r3, [r7, #8]
 80027ba:	4613      	mov	r3, r2
 80027bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	8979      	ldrh	r1, [r7, #10]
 80027c4:	4b20      	ldr	r3, [pc, #128]	; (8002848 <I2C_RequestMemoryRead+0xa4>)
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	2300      	movs	r3, #0
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 f984 	bl	8002ad8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027d0:	69fa      	ldr	r2, [r7, #28]
 80027d2:	69b9      	ldr	r1, [r7, #24]
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 f89d 	bl	8002914 <I2C_WaitOnTXISFlagUntilTimeout>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e02c      	b.n	800283e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d105      	bne.n	80027f6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027ea:	893b      	ldrh	r3, [r7, #8]
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28
 80027f4:	e015      	b.n	8002822 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027f6:	893b      	ldrh	r3, [r7, #8]
 80027f8:	0a1b      	lsrs	r3, r3, #8
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	69b9      	ldr	r1, [r7, #24]
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 f883 	bl	8002914 <I2C_WaitOnTXISFlagUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e012      	b.n	800283e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002818:	893b      	ldrh	r3, [r7, #8]
 800281a:	b2da      	uxtb	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	2200      	movs	r2, #0
 800282a:	2140      	movs	r1, #64	; 0x40
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 f831 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e000      	b.n	800283e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	80002000 	.word	0x80002000

0800284c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b02      	cmp	r3, #2
 8002860:	d103      	bne.n	800286a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2200      	movs	r2, #0
 8002868:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b01      	cmp	r3, #1
 8002876:	d007      	beq.n	8002888 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699a      	ldr	r2, [r3, #24]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0201 	orr.w	r2, r2, #1
 8002886:	619a      	str	r2, [r3, #24]
  }
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	4613      	mov	r3, r2
 80028a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028a4:	e022      	b.n	80028ec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028ac:	d01e      	beq.n	80028ec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ae:	f7ff f96b 	bl	8001b88 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d302      	bcc.n	80028c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d113      	bne.n	80028ec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c8:	f043 0220 	orr.w	r2, r3, #32
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e00f      	b.n	800290c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699a      	ldr	r2, [r3, #24]
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	4013      	ands	r3, r2
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	bf0c      	ite	eq
 80028fc:	2301      	moveq	r3, #1
 80028fe:	2300      	movne	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	429a      	cmp	r2, r3
 8002908:	d0cd      	beq.n	80028a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002920:	e02c      	b.n	800297c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	68b9      	ldr	r1, [r7, #8]
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 f870 	bl	8002a0c <I2C_IsAcknowledgeFailed>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e02a      	b.n	800298c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800293c:	d01e      	beq.n	800297c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800293e:	f7ff f923 	bl	8001b88 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	429a      	cmp	r2, r3
 800294c:	d302      	bcc.n	8002954 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d113      	bne.n	800297c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002958:	f043 0220 	orr.w	r2, r3, #32
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e007      	b.n	800298c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b02      	cmp	r3, #2
 8002988:	d1cb      	bne.n	8002922 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029a0:	e028      	b.n	80029f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f830 	bl	8002a0c <I2C_IsAcknowledgeFailed>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e026      	b.n	8002a04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b6:	f7ff f8e7 	bl	8001b88 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d302      	bcc.n	80029cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d113      	bne.n	80029f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d0:	f043 0220 	orr.w	r2, r3, #32
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e007      	b.n	8002a04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	f003 0320 	and.w	r3, r3, #32
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	d1cf      	bne.n	80029a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2b10      	cmp	r3, #16
 8002a24:	d151      	bne.n	8002aca <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a26:	e022      	b.n	8002a6e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a2e:	d01e      	beq.n	8002a6e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a30:	f7ff f8aa 	bl	8001b88 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d302      	bcc.n	8002a46 <I2C_IsAcknowledgeFailed+0x3a>
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d113      	bne.n	8002a6e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2220      	movs	r2, #32
 8002a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e02e      	b.n	8002acc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	f003 0320 	and.w	r3, r3, #32
 8002a78:	2b20      	cmp	r3, #32
 8002a7a:	d1d5      	bne.n	8002a28 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2210      	movs	r2, #16
 8002a82:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f7ff fedd 	bl	800284c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6859      	ldr	r1, [r3, #4]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <I2C_IsAcknowledgeFailed+0xc8>)
 8002a9e:	400b      	ands	r3, r1
 8002aa0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	f043 0204 	orr.w	r2, r3, #4
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	fe00e800 	.word	0xfe00e800

08002ad8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	607b      	str	r3, [r7, #4]
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	817b      	strh	r3, [r7, #10]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	0d5b      	lsrs	r3, r3, #21
 8002af4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002af8:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <I2C_TransferConfig+0x58>)
 8002afa:	430b      	orrs	r3, r1
 8002afc:	43db      	mvns	r3, r3
 8002afe:	ea02 0103 	and.w	r1, r2, r3
 8002b02:	897b      	ldrh	r3, [r7, #10]
 8002b04:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b08:	7a7b      	ldrb	r3, [r7, #9]
 8002b0a:	041b      	lsls	r3, r3, #16
 8002b0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	431a      	orrs	r2, r3
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002b22:	bf00      	nop
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	03ff63ff 	.word	0x03ff63ff

08002b34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	d138      	bne.n	8002bbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e032      	b.n	8002bbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2224      	movs	r2, #36	; 0x24
 8002b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0201 	bic.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6819      	ldr	r1, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e000      	b.n	8002bbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bbc:	2302      	movs	r3, #2
  }
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b085      	sub	sp, #20
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d139      	bne.n	8002c54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e033      	b.n	8002c56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2224      	movs	r2, #36	; 0x24
 8002bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0201 	bic.w	r2, r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	021b      	lsls	r3, r3, #8
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	e000      	b.n	8002c56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
  }
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	1d3b      	adds	r3, r7, #4
 8002c6e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c70:	1d3b      	adds	r3, r7, #4
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d102      	bne.n	8002c7e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	f000 bef4 	b.w	8003a66 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c7e:	1d3b      	adds	r3, r7, #4
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 816a 	beq.w	8002f62 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c8e:	4bb3      	ldr	r3, [pc, #716]	; (8002f5c <HAL_RCC_OscConfig+0x2f8>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 030c 	and.w	r3, r3, #12
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d00c      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c9a:	4bb0      	ldr	r3, [pc, #704]	; (8002f5c <HAL_RCC_OscConfig+0x2f8>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d159      	bne.n	8002d5a <HAL_RCC_OscConfig+0xf6>
 8002ca6:	4bad      	ldr	r3, [pc, #692]	; (8002f5c <HAL_RCC_OscConfig+0x2f8>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb2:	d152      	bne.n	8002d5a <HAL_RCC_OscConfig+0xf6>
 8002cb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cb8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002cc0:	fa93 f3a3 	rbit	r3, r3
 8002cc4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cc8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ccc:	fab3 f383 	clz	r3, r3
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d102      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x82>
 8002ce0:	4b9e      	ldr	r3, [pc, #632]	; (8002f5c <HAL_RCC_OscConfig+0x2f8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	e015      	b.n	8002d12 <HAL_RCC_OscConfig+0xae>
 8002ce6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cea:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002cf2:	fa93 f3a3 	rbit	r3, r3
 8002cf6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002cfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cfe:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002d02:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002d06:	fa93 f3a3 	rbit	r3, r3
 8002d0a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002d0e:	4b93      	ldr	r3, [pc, #588]	; (8002f5c <HAL_RCC_OscConfig+0x2f8>)
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d16:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002d1a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002d1e:	fa92 f2a2 	rbit	r2, r2
 8002d22:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002d26:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002d2a:	fab2 f282 	clz	r2, r2
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	f042 0220 	orr.w	r2, r2, #32
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	f002 021f 	and.w	r2, r2, #31
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 810c 	beq.w	8002f60 <HAL_RCC_OscConfig+0x2fc>
 8002d48:	1d3b      	adds	r3, r7, #4
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f040 8106 	bne.w	8002f60 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	f000 be86 	b.w	8003a66 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d5a:	1d3b      	adds	r3, r7, #4
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d64:	d106      	bne.n	8002d74 <HAL_RCC_OscConfig+0x110>
 8002d66:	4b7d      	ldr	r3, [pc, #500]	; (8002f5c <HAL_RCC_OscConfig+0x2f8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a7c      	ldr	r2, [pc, #496]	; (8002f5c <HAL_RCC_OscConfig+0x2f8>)
 8002d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	e030      	b.n	8002dd6 <HAL_RCC_OscConfig+0x172>
 8002d74:	1d3b      	adds	r3, r7, #4
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCC_OscConfig+0x134>
 8002d7e:	4b77      	ldr	r3, [pc, #476]	; (8002f5c <HAL_RCC_OscConfig+0x2f8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a76      	ldr	r2, [pc, #472]	; (8002f5c <HAL_RCC_OscConfig+0x2f8>)
 8002d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	4b74      	ldr	r3, [pc, #464]	; (8002f5c <HAL_RCC_OscConfig+0x2f8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a73      	ldr	r2, [pc, #460]	; (8002f5c <HAL_RCC_OscConfig+0x2f8>)
 8002d90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e01e      	b.n	8002dd6 <HAL_RCC_OscConfig+0x172>
 8002d98:	1d3b      	adds	r3, r7, #4
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002da2:	d10c      	bne.n	8002dbe <HAL_RCC_OscConfig+0x15a>
 8002da4:	4b6d      	ldr	r3, [pc, #436]	; (8002f5c <HAL_RCC_OscConfig+0x2f8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a6c      	ldr	r2, [pc, #432]	; (8002f5c <HAL_RCC_OscConfig+0x2f8>)
 8002daa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dae:	6013      	str	r3, [r2, #0]
 8002db0:	4b6a      	ldr	r3, [pc, #424]	; (8002f5c <HAL_RCC_OscConfig+0x2f8>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a69      	ldr	r2, [pc, #420]	; (8002f5c <HAL_RCC_OscConfig+0x2f8>)
 8002db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	e00b      	b.n	8002dd6 <HAL_RCC_OscConfig+0x172>
 8002dbe:	4b67      	ldr	r3, [pc, #412]	; (8002f5c <HAL_RCC_OscConfig+0x2f8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a66      	ldr	r2, [pc, #408]	; (8002f5c <HAL_RCC_OscConfig+0x2f8>)
 8002dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	4b64      	ldr	r3, [pc, #400]	; (8002f5c <HAL_RCC_OscConfig+0x2f8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a63      	ldr	r2, [pc, #396]	; (8002f5c <HAL_RCC_OscConfig+0x2f8>)
 8002dd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dd6:	4b61      	ldr	r3, [pc, #388]	; (8002f5c <HAL_RCC_OscConfig+0x2f8>)
 8002dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dda:	f023 020f 	bic.w	r2, r3, #15
 8002dde:	1d3b      	adds	r3, r7, #4
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	495d      	ldr	r1, [pc, #372]	; (8002f5c <HAL_RCC_OscConfig+0x2f8>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dea:	1d3b      	adds	r3, r7, #4
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d059      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df4:	f7fe fec8 	bl	8001b88 <HAL_GetTick>
 8002df8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfc:	e00a      	b.n	8002e14 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dfe:	f7fe fec3 	bl	8001b88 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b64      	cmp	r3, #100	; 0x64
 8002e0c:	d902      	bls.n	8002e14 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	f000 be29 	b.w	8003a66 <HAL_RCC_OscConfig+0xe02>
 8002e14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e18:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002e20:	fa93 f3a3 	rbit	r3, r3
 8002e24:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002e28:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2c:	fab3 f383 	clz	r3, r3
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d102      	bne.n	8002e46 <HAL_RCC_OscConfig+0x1e2>
 8002e40:	4b46      	ldr	r3, [pc, #280]	; (8002f5c <HAL_RCC_OscConfig+0x2f8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	e015      	b.n	8002e72 <HAL_RCC_OscConfig+0x20e>
 8002e46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e4a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002e52:	fa93 f3a3 	rbit	r3, r3
 8002e56:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002e5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e5e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002e62:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002e66:	fa93 f3a3 	rbit	r3, r3
 8002e6a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002e6e:	4b3b      	ldr	r3, [pc, #236]	; (8002f5c <HAL_RCC_OscConfig+0x2f8>)
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e76:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002e7a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002e7e:	fa92 f2a2 	rbit	r2, r2
 8002e82:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002e86:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002e8a:	fab2 f282 	clz	r2, r2
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	f042 0220 	orr.w	r2, r2, #32
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	f002 021f 	and.w	r2, r2, #31
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0ab      	beq.n	8002dfe <HAL_RCC_OscConfig+0x19a>
 8002ea6:	e05c      	b.n	8002f62 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea8:	f7fe fe6e 	bl	8001b88 <HAL_GetTick>
 8002eac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eb0:	e00a      	b.n	8002ec8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eb2:	f7fe fe69 	bl	8001b88 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	; 0x64
 8002ec0:	d902      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	f000 bdcf 	b.w	8003a66 <HAL_RCC_OscConfig+0xe02>
 8002ec8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ecc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002ed4:	fa93 f3a3 	rbit	r3, r3
 8002ed8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002edc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee0:	fab3 f383 	clz	r3, r3
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d102      	bne.n	8002efa <HAL_RCC_OscConfig+0x296>
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_RCC_OscConfig+0x2f8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	e015      	b.n	8002f26 <HAL_RCC_OscConfig+0x2c2>
 8002efa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002efe:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f06:	fa93 f3a3 	rbit	r3, r3
 8002f0a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002f0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f12:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002f16:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002f22:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <HAL_RCC_OscConfig+0x2f8>)
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f2a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002f2e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002f32:	fa92 f2a2 	rbit	r2, r2
 8002f36:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002f3a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002f3e:	fab2 f282 	clz	r2, r2
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	f042 0220 	orr.w	r2, r2, #32
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	f002 021f 	and.w	r2, r2, #31
 8002f4e:	2101      	movs	r1, #1
 8002f50:	fa01 f202 	lsl.w	r2, r1, r2
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1ab      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x24e>
 8002f5a:	e002      	b.n	8002f62 <HAL_RCC_OscConfig+0x2fe>
 8002f5c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f62:	1d3b      	adds	r3, r7, #4
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 816f 	beq.w	8003250 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f72:	4bd0      	ldr	r3, [pc, #832]	; (80032b4 <HAL_RCC_OscConfig+0x650>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 030c 	and.w	r3, r3, #12
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00b      	beq.n	8002f96 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f7e:	4bcd      	ldr	r3, [pc, #820]	; (80032b4 <HAL_RCC_OscConfig+0x650>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d16c      	bne.n	8003064 <HAL_RCC_OscConfig+0x400>
 8002f8a:	4bca      	ldr	r3, [pc, #808]	; (80032b4 <HAL_RCC_OscConfig+0x650>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d166      	bne.n	8003064 <HAL_RCC_OscConfig+0x400>
 8002f96:	2302      	movs	r3, #2
 8002f98:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002fa0:	fa93 f3a3 	rbit	r3, r3
 8002fa4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002fa8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fac:	fab3 f383 	clz	r3, r3
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d102      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x362>
 8002fc0:	4bbc      	ldr	r3, [pc, #752]	; (80032b4 <HAL_RCC_OscConfig+0x650>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	e013      	b.n	8002fee <HAL_RCC_OscConfig+0x38a>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002fd0:	fa93 f3a3 	rbit	r3, r3
 8002fd4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002fd8:	2302      	movs	r3, #2
 8002fda:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002fde:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fe2:	fa93 f3a3 	rbit	r3, r3
 8002fe6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002fea:	4bb2      	ldr	r3, [pc, #712]	; (80032b4 <HAL_RCC_OscConfig+0x650>)
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	2202      	movs	r2, #2
 8002ff0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002ff4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002ff8:	fa92 f2a2 	rbit	r2, r2
 8002ffc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003000:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003004:	fab2 f282 	clz	r2, r2
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	f042 0220 	orr.w	r2, r2, #32
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	f002 021f 	and.w	r2, r2, #31
 8003014:	2101      	movs	r1, #1
 8003016:	fa01 f202 	lsl.w	r2, r1, r2
 800301a:	4013      	ands	r3, r2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d007      	beq.n	8003030 <HAL_RCC_OscConfig+0x3cc>
 8003020:	1d3b      	adds	r3, r7, #4
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d002      	beq.n	8003030 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	f000 bd1b 	b.w	8003a66 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003030:	4ba0      	ldr	r3, [pc, #640]	; (80032b4 <HAL_RCC_OscConfig+0x650>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003038:	1d3b      	adds	r3, r7, #4
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	21f8      	movs	r1, #248	; 0xf8
 8003040:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003048:	fa91 f1a1 	rbit	r1, r1
 800304c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003050:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003054:	fab1 f181 	clz	r1, r1
 8003058:	b2c9      	uxtb	r1, r1
 800305a:	408b      	lsls	r3, r1
 800305c:	4995      	ldr	r1, [pc, #596]	; (80032b4 <HAL_RCC_OscConfig+0x650>)
 800305e:	4313      	orrs	r3, r2
 8003060:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003062:	e0f5      	b.n	8003250 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003064:	1d3b      	adds	r3, r7, #4
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 8085 	beq.w	800317a <HAL_RCC_OscConfig+0x516>
 8003070:	2301      	movs	r3, #1
 8003072:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003082:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003086:	fab3 f383 	clz	r3, r3
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003090:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	461a      	mov	r2, r3
 8003098:	2301      	movs	r3, #1
 800309a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7fe fd74 	bl	8001b88 <HAL_GetTick>
 80030a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a4:	e00a      	b.n	80030bc <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a6:	f7fe fd6f 	bl	8001b88 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d902      	bls.n	80030bc <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	f000 bcd5 	b.w	8003a66 <HAL_RCC_OscConfig+0xe02>
 80030bc:	2302      	movs	r3, #2
 80030be:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80030c6:	fa93 f3a3 	rbit	r3, r3
 80030ca:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80030ce:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d2:	fab3 f383 	clz	r3, r3
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	095b      	lsrs	r3, r3, #5
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d102      	bne.n	80030ec <HAL_RCC_OscConfig+0x488>
 80030e6:	4b73      	ldr	r3, [pc, #460]	; (80032b4 <HAL_RCC_OscConfig+0x650>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	e013      	b.n	8003114 <HAL_RCC_OscConfig+0x4b0>
 80030ec:	2302      	movs	r3, #2
 80030ee:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80030f6:	fa93 f3a3 	rbit	r3, r3
 80030fa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80030fe:	2302      	movs	r3, #2
 8003100:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003104:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003110:	4b68      	ldr	r3, [pc, #416]	; (80032b4 <HAL_RCC_OscConfig+0x650>)
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	2202      	movs	r2, #2
 8003116:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800311a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800311e:	fa92 f2a2 	rbit	r2, r2
 8003122:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003126:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800312a:	fab2 f282 	clz	r2, r2
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	f042 0220 	orr.w	r2, r2, #32
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	f002 021f 	and.w	r2, r2, #31
 800313a:	2101      	movs	r1, #1
 800313c:	fa01 f202 	lsl.w	r2, r1, r2
 8003140:	4013      	ands	r3, r2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0af      	beq.n	80030a6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003146:	4b5b      	ldr	r3, [pc, #364]	; (80032b4 <HAL_RCC_OscConfig+0x650>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800314e:	1d3b      	adds	r3, r7, #4
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	21f8      	movs	r1, #248	; 0xf8
 8003156:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800315e:	fa91 f1a1 	rbit	r1, r1
 8003162:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003166:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800316a:	fab1 f181 	clz	r1, r1
 800316e:	b2c9      	uxtb	r1, r1
 8003170:	408b      	lsls	r3, r1
 8003172:	4950      	ldr	r1, [pc, #320]	; (80032b4 <HAL_RCC_OscConfig+0x650>)
 8003174:	4313      	orrs	r3, r2
 8003176:	600b      	str	r3, [r1, #0]
 8003178:	e06a      	b.n	8003250 <HAL_RCC_OscConfig+0x5ec>
 800317a:	2301      	movs	r3, #1
 800317c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003180:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003184:	fa93 f3a3 	rbit	r3, r3
 8003188:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800318c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003190:	fab3 f383 	clz	r3, r3
 8003194:	b2db      	uxtb	r3, r3
 8003196:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800319a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	461a      	mov	r2, r3
 80031a2:	2300      	movs	r3, #0
 80031a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a6:	f7fe fcef 	bl	8001b88 <HAL_GetTick>
 80031aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b0:	f7fe fcea 	bl	8001b88 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d902      	bls.n	80031c6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	f000 bc50 	b.w	8003a66 <HAL_RCC_OscConfig+0xe02>
 80031c6:	2302      	movs	r3, #2
 80031c8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80031d0:	fa93 f3a3 	rbit	r3, r3
 80031d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80031d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031dc:	fab3 f383 	clz	r3, r3
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	095b      	lsrs	r3, r3, #5
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d102      	bne.n	80031f6 <HAL_RCC_OscConfig+0x592>
 80031f0:	4b30      	ldr	r3, [pc, #192]	; (80032b4 <HAL_RCC_OscConfig+0x650>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	e013      	b.n	800321e <HAL_RCC_OscConfig+0x5ba>
 80031f6:	2302      	movs	r3, #2
 80031f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003200:	fa93 f3a3 	rbit	r3, r3
 8003204:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003208:	2302      	movs	r3, #2
 800320a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800320e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003212:	fa93 f3a3 	rbit	r3, r3
 8003216:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800321a:	4b26      	ldr	r3, [pc, #152]	; (80032b4 <HAL_RCC_OscConfig+0x650>)
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	2202      	movs	r2, #2
 8003220:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003224:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003228:	fa92 f2a2 	rbit	r2, r2
 800322c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003230:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003234:	fab2 f282 	clz	r2, r2
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	f042 0220 	orr.w	r2, r2, #32
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	f002 021f 	and.w	r2, r2, #31
 8003244:	2101      	movs	r1, #1
 8003246:	fa01 f202 	lsl.w	r2, r1, r2
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1af      	bne.n	80031b0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003250:	1d3b      	adds	r3, r7, #4
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 80da 	beq.w	8003414 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003260:	1d3b      	adds	r3, r7, #4
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d069      	beq.n	800333e <HAL_RCC_OscConfig+0x6da>
 800326a:	2301      	movs	r3, #1
 800326c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003270:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003274:	fa93 f3a3 	rbit	r3, r3
 8003278:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800327c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003280:	fab3 f383 	clz	r3, r3
 8003284:	b2db      	uxtb	r3, r3
 8003286:	461a      	mov	r2, r3
 8003288:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <HAL_RCC_OscConfig+0x654>)
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	461a      	mov	r2, r3
 8003290:	2301      	movs	r3, #1
 8003292:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003294:	f7fe fc78 	bl	8001b88 <HAL_GetTick>
 8003298:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329c:	e00e      	b.n	80032bc <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800329e:	f7fe fc73 	bl	8001b88 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d906      	bls.n	80032bc <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e3d9      	b.n	8003a66 <HAL_RCC_OscConfig+0xe02>
 80032b2:	bf00      	nop
 80032b4:	40021000 	.word	0x40021000
 80032b8:	10908120 	.word	0x10908120
 80032bc:	2302      	movs	r3, #2
 80032be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80032c6:	fa93 f3a3 	rbit	r3, r3
 80032ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80032ce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80032d2:	2202      	movs	r2, #2
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	fa93 f2a3 	rbit	r2, r3
 80032e0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80032ea:	2202      	movs	r2, #2
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	fa93 f2a3 	rbit	r2, r3
 80032f8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80032fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032fe:	4ba5      	ldr	r3, [pc, #660]	; (8003594 <HAL_RCC_OscConfig+0x930>)
 8003300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003302:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003306:	2102      	movs	r1, #2
 8003308:	6019      	str	r1, [r3, #0]
 800330a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	fa93 f1a3 	rbit	r1, r3
 8003314:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003318:	6019      	str	r1, [r3, #0]
  return result;
 800331a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	fab3 f383 	clz	r3, r3
 8003324:	b2db      	uxtb	r3, r3
 8003326:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800332a:	b2db      	uxtb	r3, r3
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	2101      	movs	r1, #1
 8003332:	fa01 f303 	lsl.w	r3, r1, r3
 8003336:	4013      	ands	r3, r2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0b0      	beq.n	800329e <HAL_RCC_OscConfig+0x63a>
 800333c:	e06a      	b.n	8003414 <HAL_RCC_OscConfig+0x7b0>
 800333e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003342:	2201      	movs	r2, #1
 8003344:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003346:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	fa93 f2a3 	rbit	r2, r3
 8003350:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003354:	601a      	str	r2, [r3, #0]
  return result;
 8003356:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800335a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800335c:	fab3 f383 	clz	r3, r3
 8003360:	b2db      	uxtb	r3, r3
 8003362:	461a      	mov	r2, r3
 8003364:	4b8c      	ldr	r3, [pc, #560]	; (8003598 <HAL_RCC_OscConfig+0x934>)
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	461a      	mov	r2, r3
 800336c:	2300      	movs	r3, #0
 800336e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003370:	f7fe fc0a 	bl	8001b88 <HAL_GetTick>
 8003374:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003378:	e009      	b.n	800338e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800337a:	f7fe fc05 	bl	8001b88 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e36b      	b.n	8003a66 <HAL_RCC_OscConfig+0xe02>
 800338e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003392:	2202      	movs	r2, #2
 8003394:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003396:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	fa93 f2a3 	rbit	r2, r3
 80033a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80033aa:	2202      	movs	r2, #2
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	fa93 f2a3 	rbit	r2, r3
 80033b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80033c2:	2202      	movs	r2, #2
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	fa93 f2a3 	rbit	r2, r3
 80033d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80033d4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d6:	4b6f      	ldr	r3, [pc, #444]	; (8003594 <HAL_RCC_OscConfig+0x930>)
 80033d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033da:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80033de:	2102      	movs	r1, #2
 80033e0:	6019      	str	r1, [r3, #0]
 80033e2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	fa93 f1a3 	rbit	r1, r3
 80033ec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80033f0:	6019      	str	r1, [r3, #0]
  return result;
 80033f2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	fab3 f383 	clz	r3, r3
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003402:	b2db      	uxtb	r3, r3
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	2101      	movs	r1, #1
 800340a:	fa01 f303 	lsl.w	r3, r1, r3
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1b2      	bne.n	800337a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003414:	1d3b      	adds	r3, r7, #4
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 8158 	beq.w	80036d4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003424:	2300      	movs	r3, #0
 8003426:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800342a:	4b5a      	ldr	r3, [pc, #360]	; (8003594 <HAL_RCC_OscConfig+0x930>)
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d112      	bne.n	800345c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003436:	4b57      	ldr	r3, [pc, #348]	; (8003594 <HAL_RCC_OscConfig+0x930>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	4a56      	ldr	r2, [pc, #344]	; (8003594 <HAL_RCC_OscConfig+0x930>)
 800343c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003440:	61d3      	str	r3, [r2, #28]
 8003442:	4b54      	ldr	r3, [pc, #336]	; (8003594 <HAL_RCC_OscConfig+0x930>)
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800344a:	f107 0308 	add.w	r3, r7, #8
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	f107 0308 	add.w	r3, r7, #8
 8003454:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003456:	2301      	movs	r3, #1
 8003458:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345c:	4b4f      	ldr	r3, [pc, #316]	; (800359c <HAL_RCC_OscConfig+0x938>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003464:	2b00      	cmp	r3, #0
 8003466:	d11a      	bne.n	800349e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003468:	4b4c      	ldr	r3, [pc, #304]	; (800359c <HAL_RCC_OscConfig+0x938>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a4b      	ldr	r2, [pc, #300]	; (800359c <HAL_RCC_OscConfig+0x938>)
 800346e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003472:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003474:	f7fe fb88 	bl	8001b88 <HAL_GetTick>
 8003478:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347c:	e009      	b.n	8003492 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347e:	f7fe fb83 	bl	8001b88 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b64      	cmp	r3, #100	; 0x64
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e2e9      	b.n	8003a66 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003492:	4b42      	ldr	r3, [pc, #264]	; (800359c <HAL_RCC_OscConfig+0x938>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0ef      	beq.n	800347e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800349e:	1d3b      	adds	r3, r7, #4
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d106      	bne.n	80034b6 <HAL_RCC_OscConfig+0x852>
 80034a8:	4b3a      	ldr	r3, [pc, #232]	; (8003594 <HAL_RCC_OscConfig+0x930>)
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	4a39      	ldr	r2, [pc, #228]	; (8003594 <HAL_RCC_OscConfig+0x930>)
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	6213      	str	r3, [r2, #32]
 80034b4:	e02f      	b.n	8003516 <HAL_RCC_OscConfig+0x8b2>
 80034b6:	1d3b      	adds	r3, r7, #4
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10c      	bne.n	80034da <HAL_RCC_OscConfig+0x876>
 80034c0:	4b34      	ldr	r3, [pc, #208]	; (8003594 <HAL_RCC_OscConfig+0x930>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	4a33      	ldr	r2, [pc, #204]	; (8003594 <HAL_RCC_OscConfig+0x930>)
 80034c6:	f023 0301 	bic.w	r3, r3, #1
 80034ca:	6213      	str	r3, [r2, #32]
 80034cc:	4b31      	ldr	r3, [pc, #196]	; (8003594 <HAL_RCC_OscConfig+0x930>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	4a30      	ldr	r2, [pc, #192]	; (8003594 <HAL_RCC_OscConfig+0x930>)
 80034d2:	f023 0304 	bic.w	r3, r3, #4
 80034d6:	6213      	str	r3, [r2, #32]
 80034d8:	e01d      	b.n	8003516 <HAL_RCC_OscConfig+0x8b2>
 80034da:	1d3b      	adds	r3, r7, #4
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2b05      	cmp	r3, #5
 80034e2:	d10c      	bne.n	80034fe <HAL_RCC_OscConfig+0x89a>
 80034e4:	4b2b      	ldr	r3, [pc, #172]	; (8003594 <HAL_RCC_OscConfig+0x930>)
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	4a2a      	ldr	r2, [pc, #168]	; (8003594 <HAL_RCC_OscConfig+0x930>)
 80034ea:	f043 0304 	orr.w	r3, r3, #4
 80034ee:	6213      	str	r3, [r2, #32]
 80034f0:	4b28      	ldr	r3, [pc, #160]	; (8003594 <HAL_RCC_OscConfig+0x930>)
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	4a27      	ldr	r2, [pc, #156]	; (8003594 <HAL_RCC_OscConfig+0x930>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	6213      	str	r3, [r2, #32]
 80034fc:	e00b      	b.n	8003516 <HAL_RCC_OscConfig+0x8b2>
 80034fe:	4b25      	ldr	r3, [pc, #148]	; (8003594 <HAL_RCC_OscConfig+0x930>)
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	4a24      	ldr	r2, [pc, #144]	; (8003594 <HAL_RCC_OscConfig+0x930>)
 8003504:	f023 0301 	bic.w	r3, r3, #1
 8003508:	6213      	str	r3, [r2, #32]
 800350a:	4b22      	ldr	r3, [pc, #136]	; (8003594 <HAL_RCC_OscConfig+0x930>)
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	4a21      	ldr	r2, [pc, #132]	; (8003594 <HAL_RCC_OscConfig+0x930>)
 8003510:	f023 0304 	bic.w	r3, r3, #4
 8003514:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003516:	1d3b      	adds	r3, r7, #4
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d06b      	beq.n	80035f8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003520:	f7fe fb32 	bl	8001b88 <HAL_GetTick>
 8003524:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003528:	e00b      	b.n	8003542 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800352a:	f7fe fb2d 	bl	8001b88 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	f241 3288 	movw	r2, #5000	; 0x1388
 800353a:	4293      	cmp	r3, r2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e291      	b.n	8003a66 <HAL_RCC_OscConfig+0xe02>
 8003542:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003546:	2202      	movs	r2, #2
 8003548:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	fa93 f2a3 	rbit	r2, r3
 8003554:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800355e:	2202      	movs	r2, #2
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	fa93 f2a3 	rbit	r2, r3
 800356c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003570:	601a      	str	r2, [r3, #0]
  return result;
 8003572:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003576:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003578:	fab3 f383 	clz	r3, r3
 800357c:	b2db      	uxtb	r3, r3
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	b2db      	uxtb	r3, r3
 8003582:	f043 0302 	orr.w	r3, r3, #2
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d109      	bne.n	80035a0 <HAL_RCC_OscConfig+0x93c>
 800358c:	4b01      	ldr	r3, [pc, #4]	; (8003594 <HAL_RCC_OscConfig+0x930>)
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	e014      	b.n	80035bc <HAL_RCC_OscConfig+0x958>
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000
 8003598:	10908120 	.word	0x10908120
 800359c:	40007000 	.word	0x40007000
 80035a0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80035a4:	2202      	movs	r2, #2
 80035a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	fa93 f2a3 	rbit	r2, r3
 80035b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	4bbb      	ldr	r3, [pc, #748]	; (80038a8 <HAL_RCC_OscConfig+0xc44>)
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80035c0:	2102      	movs	r1, #2
 80035c2:	6011      	str	r1, [r2, #0]
 80035c4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80035c8:	6812      	ldr	r2, [r2, #0]
 80035ca:	fa92 f1a2 	rbit	r1, r2
 80035ce:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80035d2:	6011      	str	r1, [r2, #0]
  return result;
 80035d4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80035d8:	6812      	ldr	r2, [r2, #0]
 80035da:	fab2 f282 	clz	r2, r2
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	f002 021f 	and.w	r2, r2, #31
 80035ea:	2101      	movs	r1, #1
 80035ec:	fa01 f202 	lsl.w	r2, r1, r2
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d099      	beq.n	800352a <HAL_RCC_OscConfig+0x8c6>
 80035f6:	e063      	b.n	80036c0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f8:	f7fe fac6 	bl	8001b88 <HAL_GetTick>
 80035fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003600:	e00b      	b.n	800361a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003602:	f7fe fac1 	bl	8001b88 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003612:	4293      	cmp	r3, r2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e225      	b.n	8003a66 <HAL_RCC_OscConfig+0xe02>
 800361a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800361e:	2202      	movs	r2, #2
 8003620:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	fa93 f2a3 	rbit	r2, r3
 800362c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003636:	2202      	movs	r2, #2
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	fa93 f2a3 	rbit	r2, r3
 8003644:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003648:	601a      	str	r2, [r3, #0]
  return result;
 800364a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800364e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003650:	fab3 f383 	clz	r3, r3
 8003654:	b2db      	uxtb	r3, r3
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	b2db      	uxtb	r3, r3
 800365a:	f043 0302 	orr.w	r3, r3, #2
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d102      	bne.n	800366a <HAL_RCC_OscConfig+0xa06>
 8003664:	4b90      	ldr	r3, [pc, #576]	; (80038a8 <HAL_RCC_OscConfig+0xc44>)
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	e00d      	b.n	8003686 <HAL_RCC_OscConfig+0xa22>
 800366a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800366e:	2202      	movs	r2, #2
 8003670:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	fa93 f2a3 	rbit	r2, r3
 800367c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	4b89      	ldr	r3, [pc, #548]	; (80038a8 <HAL_RCC_OscConfig+0xc44>)
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800368a:	2102      	movs	r1, #2
 800368c:	6011      	str	r1, [r2, #0]
 800368e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	fa92 f1a2 	rbit	r1, r2
 8003698:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800369c:	6011      	str	r1, [r2, #0]
  return result;
 800369e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80036a2:	6812      	ldr	r2, [r2, #0]
 80036a4:	fab2 f282 	clz	r2, r2
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	f002 021f 	and.w	r2, r2, #31
 80036b4:	2101      	movs	r1, #1
 80036b6:	fa01 f202 	lsl.w	r2, r1, r2
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1a0      	bne.n	8003602 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036c0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d105      	bne.n	80036d4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c8:	4b77      	ldr	r3, [pc, #476]	; (80038a8 <HAL_RCC_OscConfig+0xc44>)
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	4a76      	ldr	r2, [pc, #472]	; (80038a8 <HAL_RCC_OscConfig+0xc44>)
 80036ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036d4:	1d3b      	adds	r3, r7, #4
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 81c2 	beq.w	8003a64 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036e0:	4b71      	ldr	r3, [pc, #452]	; (80038a8 <HAL_RCC_OscConfig+0xc44>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f003 030c 	and.w	r3, r3, #12
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	f000 819c 	beq.w	8003a26 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036ee:	1d3b      	adds	r3, r7, #4
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	f040 8114 	bne.w	8003922 <HAL_RCC_OscConfig+0xcbe>
 80036fa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80036fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003702:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	fa93 f2a3 	rbit	r2, r3
 800370e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003712:	601a      	str	r2, [r3, #0]
  return result;
 8003714:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003718:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371a:	fab3 f383 	clz	r3, r3
 800371e:	b2db      	uxtb	r3, r3
 8003720:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003724:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	461a      	mov	r2, r3
 800372c:	2300      	movs	r3, #0
 800372e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003730:	f7fe fa2a 	bl	8001b88 <HAL_GetTick>
 8003734:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003738:	e009      	b.n	800374e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800373a:	f7fe fa25 	bl	8001b88 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e18b      	b.n	8003a66 <HAL_RCC_OscConfig+0xe02>
 800374e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003752:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003756:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003758:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	fa93 f2a3 	rbit	r2, r3
 8003762:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003766:	601a      	str	r2, [r3, #0]
  return result;
 8003768:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800376c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800376e:	fab3 f383 	clz	r3, r3
 8003772:	b2db      	uxtb	r3, r3
 8003774:	095b      	lsrs	r3, r3, #5
 8003776:	b2db      	uxtb	r3, r3
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b01      	cmp	r3, #1
 8003780:	d102      	bne.n	8003788 <HAL_RCC_OscConfig+0xb24>
 8003782:	4b49      	ldr	r3, [pc, #292]	; (80038a8 <HAL_RCC_OscConfig+0xc44>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	e01b      	b.n	80037c0 <HAL_RCC_OscConfig+0xb5c>
 8003788:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800378c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003790:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	fa93 f2a3 	rbit	r2, r3
 800379c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80037a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	fa93 f2a3 	rbit	r2, r3
 80037b6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	4b3a      	ldr	r3, [pc, #232]	; (80038a8 <HAL_RCC_OscConfig+0xc44>)
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80037c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037c8:	6011      	str	r1, [r2, #0]
 80037ca:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	fa92 f1a2 	rbit	r1, r2
 80037d4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80037d8:	6011      	str	r1, [r2, #0]
  return result;
 80037da:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80037de:	6812      	ldr	r2, [r2, #0]
 80037e0:	fab2 f282 	clz	r2, r2
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	f042 0220 	orr.w	r2, r2, #32
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	f002 021f 	and.w	r2, r2, #31
 80037f0:	2101      	movs	r1, #1
 80037f2:	fa01 f202 	lsl.w	r2, r1, r2
 80037f6:	4013      	ands	r3, r2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d19e      	bne.n	800373a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037fc:	4b2a      	ldr	r3, [pc, #168]	; (80038a8 <HAL_RCC_OscConfig+0xc44>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003804:	1d3b      	adds	r3, r7, #4
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800380a:	1d3b      	adds	r3, r7, #4
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	430b      	orrs	r3, r1
 8003812:	4925      	ldr	r1, [pc, #148]	; (80038a8 <HAL_RCC_OscConfig+0xc44>)
 8003814:	4313      	orrs	r3, r2
 8003816:	604b      	str	r3, [r1, #4]
 8003818:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800381c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003820:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003822:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	fa93 f2a3 	rbit	r2, r3
 800382c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003830:	601a      	str	r2, [r3, #0]
  return result;
 8003832:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003836:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003838:	fab3 f383 	clz	r3, r3
 800383c:	b2db      	uxtb	r3, r3
 800383e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003842:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	461a      	mov	r2, r3
 800384a:	2301      	movs	r3, #1
 800384c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384e:	f7fe f99b 	bl	8001b88 <HAL_GetTick>
 8003852:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003856:	e009      	b.n	800386c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003858:	f7fe f996 	bl	8001b88 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e0fc      	b.n	8003a66 <HAL_RCC_OscConfig+0xe02>
 800386c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003870:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003874:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003876:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	fa93 f2a3 	rbit	r2, r3
 8003880:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003884:	601a      	str	r2, [r3, #0]
  return result;
 8003886:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800388a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800388c:	fab3 f383 	clz	r3, r3
 8003890:	b2db      	uxtb	r3, r3
 8003892:	095b      	lsrs	r3, r3, #5
 8003894:	b2db      	uxtb	r3, r3
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b01      	cmp	r3, #1
 800389e:	d105      	bne.n	80038ac <HAL_RCC_OscConfig+0xc48>
 80038a0:	4b01      	ldr	r3, [pc, #4]	; (80038a8 <HAL_RCC_OscConfig+0xc44>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	e01e      	b.n	80038e4 <HAL_RCC_OscConfig+0xc80>
 80038a6:	bf00      	nop
 80038a8:	40021000 	.word	0x40021000
 80038ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	fa93 f2a3 	rbit	r2, r3
 80038c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	fa93 f2a3 	rbit	r2, r3
 80038da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	4b63      	ldr	r3, [pc, #396]	; (8003a70 <HAL_RCC_OscConfig+0xe0c>)
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80038e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80038ec:	6011      	str	r1, [r2, #0]
 80038ee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80038f2:	6812      	ldr	r2, [r2, #0]
 80038f4:	fa92 f1a2 	rbit	r1, r2
 80038f8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80038fc:	6011      	str	r1, [r2, #0]
  return result;
 80038fe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	fab2 f282 	clz	r2, r2
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	f042 0220 	orr.w	r2, r2, #32
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	f002 021f 	and.w	r2, r2, #31
 8003914:	2101      	movs	r1, #1
 8003916:	fa01 f202 	lsl.w	r2, r1, r2
 800391a:	4013      	ands	r3, r2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d09b      	beq.n	8003858 <HAL_RCC_OscConfig+0xbf4>
 8003920:	e0a0      	b.n	8003a64 <HAL_RCC_OscConfig+0xe00>
 8003922:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003926:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800392a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	fa93 f2a3 	rbit	r2, r3
 8003936:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800393a:	601a      	str	r2, [r3, #0]
  return result;
 800393c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003940:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003942:	fab3 f383 	clz	r3, r3
 8003946:	b2db      	uxtb	r3, r3
 8003948:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800394c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	461a      	mov	r2, r3
 8003954:	2300      	movs	r3, #0
 8003956:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003958:	f7fe f916 	bl	8001b88 <HAL_GetTick>
 800395c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003960:	e009      	b.n	8003976 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003962:	f7fe f911 	bl	8001b88 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e077      	b.n	8003a66 <HAL_RCC_OscConfig+0xe02>
 8003976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800397a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800397e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003980:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	fa93 f2a3 	rbit	r2, r3
 800398a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800398e:	601a      	str	r2, [r3, #0]
  return result;
 8003990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003994:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003996:	fab3 f383 	clz	r3, r3
 800399a:	b2db      	uxtb	r3, r3
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d102      	bne.n	80039b0 <HAL_RCC_OscConfig+0xd4c>
 80039aa:	4b31      	ldr	r3, [pc, #196]	; (8003a70 <HAL_RCC_OscConfig+0xe0c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	e01b      	b.n	80039e8 <HAL_RCC_OscConfig+0xd84>
 80039b0:	f107 0320 	add.w	r3, r7, #32
 80039b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ba:	f107 0320 	add.w	r3, r7, #32
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	fa93 f2a3 	rbit	r2, r3
 80039c4:	f107 031c 	add.w	r3, r7, #28
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	f107 0318 	add.w	r3, r7, #24
 80039ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	f107 0318 	add.w	r3, r7, #24
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	fa93 f2a3 	rbit	r2, r3
 80039de:	f107 0314 	add.w	r3, r7, #20
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	4b22      	ldr	r3, [pc, #136]	; (8003a70 <HAL_RCC_OscConfig+0xe0c>)
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	f107 0210 	add.w	r2, r7, #16
 80039ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80039f0:	6011      	str	r1, [r2, #0]
 80039f2:	f107 0210 	add.w	r2, r7, #16
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	fa92 f1a2 	rbit	r1, r2
 80039fc:	f107 020c 	add.w	r2, r7, #12
 8003a00:	6011      	str	r1, [r2, #0]
  return result;
 8003a02:	f107 020c 	add.w	r2, r7, #12
 8003a06:	6812      	ldr	r2, [r2, #0]
 8003a08:	fab2 f282 	clz	r2, r2
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	f042 0220 	orr.w	r2, r2, #32
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	f002 021f 	and.w	r2, r2, #31
 8003a18:	2101      	movs	r1, #1
 8003a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d19e      	bne.n	8003962 <HAL_RCC_OscConfig+0xcfe>
 8003a24:	e01e      	b.n	8003a64 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a26:	1d3b      	adds	r3, r7, #4
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e018      	b.n	8003a66 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a34:	4b0e      	ldr	r3, [pc, #56]	; (8003a70 <HAL_RCC_OscConfig+0xe0c>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a3c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a44:	1d3b      	adds	r3, r7, #4
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d108      	bne.n	8003a60 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003a4e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a56:	1d3b      	adds	r3, r7, #4
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e000      	b.n	8003a66 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40021000 	.word	0x40021000

08003a74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b09e      	sub	sp, #120	; 0x78
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e162      	b.n	8003d52 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a8c:	4b90      	ldr	r3, [pc, #576]	; (8003cd0 <HAL_RCC_ClockConfig+0x25c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d910      	bls.n	8003abc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9a:	4b8d      	ldr	r3, [pc, #564]	; (8003cd0 <HAL_RCC_ClockConfig+0x25c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 0207 	bic.w	r2, r3, #7
 8003aa2:	498b      	ldr	r1, [pc, #556]	; (8003cd0 <HAL_RCC_ClockConfig+0x25c>)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aaa:	4b89      	ldr	r3, [pc, #548]	; (8003cd0 <HAL_RCC_ClockConfig+0x25c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d001      	beq.n	8003abc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e14a      	b.n	8003d52 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d008      	beq.n	8003ada <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac8:	4b82      	ldr	r3, [pc, #520]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	497f      	ldr	r1, [pc, #508]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 80dc 	beq.w	8003ca0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d13c      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xf6>
 8003af0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003af4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003af8:	fa93 f3a3 	rbit	r3, r3
 8003afc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b00:	fab3 f383 	clz	r3, r3
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d102      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xa6>
 8003b14:	4b6f      	ldr	r3, [pc, #444]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	e00f      	b.n	8003b3a <HAL_RCC_ClockConfig+0xc6>
 8003b1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b22:	fa93 f3a3 	rbit	r3, r3
 8003b26:	667b      	str	r3, [r7, #100]	; 0x64
 8003b28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b2c:	663b      	str	r3, [r7, #96]	; 0x60
 8003b2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b30:	fa93 f3a3 	rbit	r3, r3
 8003b34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b36:	4b67      	ldr	r3, [pc, #412]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b3e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b42:	fa92 f2a2 	rbit	r2, r2
 8003b46:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003b48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b4a:	fab2 f282 	clz	r2, r2
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	f042 0220 	orr.w	r2, r2, #32
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	f002 021f 	and.w	r2, r2, #31
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b60:	4013      	ands	r3, r2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d17b      	bne.n	8003c5e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e0f3      	b.n	8003d52 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d13c      	bne.n	8003bec <HAL_RCC_ClockConfig+0x178>
 8003b72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b76:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b7a:	fa93 f3a3 	rbit	r3, r3
 8003b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b82:	fab3 f383 	clz	r3, r3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	095b      	lsrs	r3, r3, #5
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	f043 0301 	orr.w	r3, r3, #1
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d102      	bne.n	8003b9c <HAL_RCC_ClockConfig+0x128>
 8003b96:	4b4f      	ldr	r3, [pc, #316]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	e00f      	b.n	8003bbc <HAL_RCC_ClockConfig+0x148>
 8003b9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ba0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ba4:	fa93 f3a3 	rbit	r3, r3
 8003ba8:	647b      	str	r3, [r7, #68]	; 0x44
 8003baa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bae:	643b      	str	r3, [r7, #64]	; 0x40
 8003bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bb2:	fa93 f3a3 	rbit	r3, r3
 8003bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bb8:	4b46      	ldr	r3, [pc, #280]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bc0:	63ba      	str	r2, [r7, #56]	; 0x38
 8003bc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bc4:	fa92 f2a2 	rbit	r2, r2
 8003bc8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003bca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bcc:	fab2 f282 	clz	r2, r2
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	f042 0220 	orr.w	r2, r2, #32
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	f002 021f 	and.w	r2, r2, #31
 8003bdc:	2101      	movs	r1, #1
 8003bde:	fa01 f202 	lsl.w	r2, r1, r2
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d13a      	bne.n	8003c5e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0b2      	b.n	8003d52 <HAL_RCC_ClockConfig+0x2de>
 8003bec:	2302      	movs	r3, #2
 8003bee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf2:	fa93 f3a3 	rbit	r3, r3
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfa:	fab3 f383 	clz	r3, r3
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	f043 0301 	orr.w	r3, r3, #1
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d102      	bne.n	8003c14 <HAL_RCC_ClockConfig+0x1a0>
 8003c0e:	4b31      	ldr	r3, [pc, #196]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	e00d      	b.n	8003c30 <HAL_RCC_ClockConfig+0x1bc>
 8003c14:	2302      	movs	r3, #2
 8003c16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1a:	fa93 f3a3 	rbit	r3, r3
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c20:	2302      	movs	r3, #2
 8003c22:	623b      	str	r3, [r7, #32]
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	fa93 f3a3 	rbit	r3, r3
 8003c2a:	61fb      	str	r3, [r7, #28]
 8003c2c:	4b29      	ldr	r3, [pc, #164]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	2202      	movs	r2, #2
 8003c32:	61ba      	str	r2, [r7, #24]
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	fa92 f2a2 	rbit	r2, r2
 8003c3a:	617a      	str	r2, [r7, #20]
  return result;
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	fab2 f282 	clz	r2, r2
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	f042 0220 	orr.w	r2, r2, #32
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	f002 021f 	and.w	r2, r2, #31
 8003c4e:	2101      	movs	r1, #1
 8003c50:	fa01 f202 	lsl.w	r2, r1, r2
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e079      	b.n	8003d52 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c5e:	4b1d      	ldr	r3, [pc, #116]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f023 0203 	bic.w	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	491a      	ldr	r1, [pc, #104]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c70:	f7fd ff8a 	bl	8001b88 <HAL_GetTick>
 8003c74:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c76:	e00a      	b.n	8003c8e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c78:	f7fd ff86 	bl	8001b88 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e061      	b.n	8003d52 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8e:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f003 020c 	and.w	r2, r3, #12
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d1eb      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <HAL_RCC_ClockConfig+0x25c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d214      	bcs.n	8003cd8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cae:	4b08      	ldr	r3, [pc, #32]	; (8003cd0 <HAL_RCC_ClockConfig+0x25c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f023 0207 	bic.w	r2, r3, #7
 8003cb6:	4906      	ldr	r1, [pc, #24]	; (8003cd0 <HAL_RCC_ClockConfig+0x25c>)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cbe:	4b04      	ldr	r3, [pc, #16]	; (8003cd0 <HAL_RCC_ClockConfig+0x25c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d005      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e040      	b.n	8003d52 <HAL_RCC_ClockConfig+0x2de>
 8003cd0:	40022000 	.word	0x40022000
 8003cd4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d008      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce4:	4b1d      	ldr	r3, [pc, #116]	; (8003d5c <HAL_RCC_ClockConfig+0x2e8>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	491a      	ldr	r1, [pc, #104]	; (8003d5c <HAL_RCC_ClockConfig+0x2e8>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d02:	4b16      	ldr	r3, [pc, #88]	; (8003d5c <HAL_RCC_ClockConfig+0x2e8>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4912      	ldr	r1, [pc, #72]	; (8003d5c <HAL_RCC_ClockConfig+0x2e8>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d16:	f000 f829 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 8003d1a:	4601      	mov	r1, r0
 8003d1c:	4b0f      	ldr	r3, [pc, #60]	; (8003d5c <HAL_RCC_ClockConfig+0x2e8>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d24:	22f0      	movs	r2, #240	; 0xf0
 8003d26:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	fa92 f2a2 	rbit	r2, r2
 8003d2e:	60fa      	str	r2, [r7, #12]
  return result;
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	fab2 f282 	clz	r2, r2
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	40d3      	lsrs	r3, r2
 8003d3a:	4a09      	ldr	r2, [pc, #36]	; (8003d60 <HAL_RCC_ClockConfig+0x2ec>)
 8003d3c:	5cd3      	ldrb	r3, [r2, r3]
 8003d3e:	fa21 f303 	lsr.w	r3, r1, r3
 8003d42:	4a08      	ldr	r2, [pc, #32]	; (8003d64 <HAL_RCC_ClockConfig+0x2f0>)
 8003d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003d46:	4b08      	ldr	r3, [pc, #32]	; (8003d68 <HAL_RCC_ClockConfig+0x2f4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fd fed8 	bl	8001b00 <HAL_InitTick>
  
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3778      	adds	r7, #120	; 0x78
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	08009ebc 	.word	0x08009ebc
 8003d64:	20000004 	.word	0x20000004
 8003d68:	20000008 	.word	0x20000008

08003d6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b08b      	sub	sp, #44	; 0x2c
 8003d70:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	61fb      	str	r3, [r7, #28]
 8003d76:	2300      	movs	r3, #0
 8003d78:	61bb      	str	r3, [r7, #24]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d7e:	2300      	movs	r3, #0
 8003d80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003d86:	4b29      	ldr	r3, [pc, #164]	; (8003e2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d002      	beq.n	8003d9c <HAL_RCC_GetSysClockFreq+0x30>
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d003      	beq.n	8003da2 <HAL_RCC_GetSysClockFreq+0x36>
 8003d9a:	e03c      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d9c:	4b24      	ldr	r3, [pc, #144]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d9e:	623b      	str	r3, [r7, #32]
      break;
 8003da0:	e03c      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003da8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003dac:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	fa92 f2a2 	rbit	r2, r2
 8003db4:	607a      	str	r2, [r7, #4]
  return result;
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	fab2 f282 	clz	r2, r2
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	40d3      	lsrs	r3, r2
 8003dc0:	4a1c      	ldr	r2, [pc, #112]	; (8003e34 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003dc2:	5cd3      	ldrb	r3, [r2, r3]
 8003dc4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003dc6:	4b19      	ldr	r3, [pc, #100]	; (8003e2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	220f      	movs	r2, #15
 8003dd0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	fa92 f2a2 	rbit	r2, r2
 8003dd8:	60fa      	str	r2, [r7, #12]
  return result;
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	fab2 f282 	clz	r2, r2
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	40d3      	lsrs	r3, r2
 8003de4:	4a14      	ldr	r2, [pc, #80]	; (8003e38 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003de6:	5cd3      	ldrb	r3, [r2, r3]
 8003de8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003df4:	4a0e      	ldr	r2, [pc, #56]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	fb02 f303 	mul.w	r3, r2, r3
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
 8003e04:	e004      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	4a0c      	ldr	r2, [pc, #48]	; (8003e3c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e0a:	fb02 f303 	mul.w	r3, r2, r3
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	623b      	str	r3, [r7, #32]
      break;
 8003e14:	e002      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e16:	4b06      	ldr	r3, [pc, #24]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e18:	623b      	str	r3, [r7, #32]
      break;
 8003e1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	372c      	adds	r7, #44	; 0x2c
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	007a1200 	.word	0x007a1200
 8003e34:	08009ed4 	.word	0x08009ed4
 8003e38:	08009ee4 	.word	0x08009ee4
 8003e3c:	003d0900 	.word	0x003d0900

08003e40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e44:	4b03      	ldr	r3, [pc, #12]	; (8003e54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e46:	681b      	ldr	r3, [r3, #0]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	20000004 	.word	0x20000004

08003e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003e5e:	f7ff ffef 	bl	8003e40 <HAL_RCC_GetHCLKFreq>
 8003e62:	4601      	mov	r1, r0
 8003e64:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e6c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003e70:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	fa92 f2a2 	rbit	r2, r2
 8003e78:	603a      	str	r2, [r7, #0]
  return result;
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	fab2 f282 	clz	r2, r2
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	40d3      	lsrs	r3, r2
 8003e84:	4a04      	ldr	r2, [pc, #16]	; (8003e98 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003e86:	5cd3      	ldrb	r3, [r2, r3]
 8003e88:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40021000 	.word	0x40021000
 8003e98:	08009ecc 	.word	0x08009ecc

08003e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003ea2:	f7ff ffcd 	bl	8003e40 <HAL_RCC_GetHCLKFreq>
 8003ea6:	4601      	mov	r1, r0
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003eb0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003eb4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	fa92 f2a2 	rbit	r2, r2
 8003ebc:	603a      	str	r2, [r7, #0]
  return result;
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	fab2 f282 	clz	r2, r2
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	40d3      	lsrs	r3, r2
 8003ec8:	4a04      	ldr	r2, [pc, #16]	; (8003edc <HAL_RCC_GetPCLK2Freq+0x40>)
 8003eca:	5cd3      	ldrb	r3, [r2, r3]
 8003ecc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	08009ecc 	.word	0x08009ecc

08003ee0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b092      	sub	sp, #72	; 0x48
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 80d0 	beq.w	800409e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003efe:	2300      	movs	r3, #0
 8003f00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f04:	4b86      	ldr	r3, [pc, #536]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10e      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f10:	4b83      	ldr	r3, [pc, #524]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	4a82      	ldr	r2, [pc, #520]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	61d3      	str	r3, [r2, #28]
 8003f1c:	4b80      	ldr	r3, [pc, #512]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2e:	4b7d      	ldr	r3, [pc, #500]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d118      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f3a:	4b7a      	ldr	r3, [pc, #488]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a79      	ldr	r2, [pc, #484]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f44:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f46:	f7fd fe1f 	bl	8001b88 <HAL_GetTick>
 8003f4a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4c:	e008      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f4e:	f7fd fe1b 	bl	8001b88 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b64      	cmp	r3, #100	; 0x64
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e0db      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f60:	4b70      	ldr	r3, [pc, #448]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f6c:	4b6c      	ldr	r3, [pc, #432]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f74:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d07d      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d076      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f8a:	4b65      	ldr	r3, [pc, #404]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f98:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9c:	fa93 f3a3 	rbit	r3, r3
 8003fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fa4:	fab3 f383 	clz	r3, r3
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	461a      	mov	r2, r3
 8003fac:	4b5e      	ldr	r3, [pc, #376]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003fae:	4413      	add	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	6013      	str	r3, [r2, #0]
 8003fb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc0:	fa93 f3a3 	rbit	r3, r3
 8003fc4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fc8:	fab3 f383 	clz	r3, r3
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	4b55      	ldr	r3, [pc, #340]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003fd2:	4413      	add	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	2300      	movs	r3, #0
 8003fda:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fdc:	4a50      	ldr	r2, [pc, #320]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d045      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fec:	f7fd fdcc 	bl	8001b88 <HAL_GetTick>
 8003ff0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff2:	e00a      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff4:	f7fd fdc8 	bl	8001b88 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e086      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800400a:	2302      	movs	r3, #2
 800400c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004010:	fa93 f3a3 	rbit	r3, r3
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
 8004016:	2302      	movs	r3, #2
 8004018:	623b      	str	r3, [r7, #32]
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	fa93 f3a3 	rbit	r3, r3
 8004020:	61fb      	str	r3, [r7, #28]
  return result;
 8004022:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004024:	fab3 f383 	clz	r3, r3
 8004028:	b2db      	uxtb	r3, r3
 800402a:	095b      	lsrs	r3, r3, #5
 800402c:	b2db      	uxtb	r3, r3
 800402e:	f043 0302 	orr.w	r3, r3, #2
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d102      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004038:	4b39      	ldr	r3, [pc, #228]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	e007      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800403e:	2302      	movs	r3, #2
 8004040:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	fa93 f3a3 	rbit	r3, r3
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	4b35      	ldr	r3, [pc, #212]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	2202      	movs	r2, #2
 8004050:	613a      	str	r2, [r7, #16]
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	fa92 f2a2 	rbit	r2, r2
 8004058:	60fa      	str	r2, [r7, #12]
  return result;
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	fab2 f282 	clz	r2, r2
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	f002 021f 	and.w	r2, r2, #31
 800406c:	2101      	movs	r1, #1
 800406e:	fa01 f202 	lsl.w	r2, r1, r2
 8004072:	4013      	ands	r3, r2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0bd      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004078:	4b29      	ldr	r3, [pc, #164]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	4926      	ldr	r1, [pc, #152]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004086:	4313      	orrs	r3, r2
 8004088:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800408a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800408e:	2b01      	cmp	r3, #1
 8004090:	d105      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004092:	4b23      	ldr	r3, [pc, #140]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	4a22      	ldr	r2, [pc, #136]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800409c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d008      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040aa:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	f023 0203 	bic.w	r2, r3, #3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	491a      	ldr	r1, [pc, #104]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d008      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040c8:	4b15      	ldr	r3, [pc, #84]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	f023 0210 	bic.w	r2, r3, #16
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	4912      	ldr	r1, [pc, #72]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d008      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040e6:	4b0e      	ldr	r3, [pc, #56]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ea:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	490b      	ldr	r1, [pc, #44]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d008      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004104:	4b06      	ldr	r3, [pc, #24]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	4903      	ldr	r1, [pc, #12]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004112:	4313      	orrs	r3, r2
 8004114:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3748      	adds	r7, #72	; 0x48
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40021000 	.word	0x40021000
 8004124:	40007000 	.word	0x40007000
 8004128:	10908100 	.word	0x10908100

0800412c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e01d      	b.n	800417a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d106      	bne.n	8004158 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7fd fb50 	bl	80017f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3304      	adds	r3, #4
 8004168:	4619      	mov	r1, r3
 800416a:	4610      	mov	r0, r2
 800416c:	f000 fbd6 	bl	800491c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
	...

08004184 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <HAL_TIM_Base_Start_IT+0x50>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2b06      	cmp	r3, #6
 80041ac:	d00b      	beq.n	80041c6 <HAL_TIM_Base_Start_IT+0x42>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b4:	d007      	beq.n	80041c6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f042 0201 	orr.w	r2, r2, #1
 80041c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	00010007 	.word	0x00010007

080041d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e01d      	b.n	8004226 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d106      	bne.n	8004204 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f815 	bl	800422e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3304      	adds	r3, #4
 8004214:	4619      	mov	r1, r3
 8004216:	4610      	mov	r0, r2
 8004218:	f000 fb80 	bl	800491c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
	...

08004244 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2201      	movs	r2, #1
 8004254:	6839      	ldr	r1, [r7, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f000 ff18 	bl	800508c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1c      	ldr	r2, [pc, #112]	; (80042d4 <HAL_TIM_PWM_Start+0x90>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00e      	beq.n	8004284 <HAL_TIM_PWM_Start+0x40>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a1b      	ldr	r2, [pc, #108]	; (80042d8 <HAL_TIM_PWM_Start+0x94>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d009      	beq.n	8004284 <HAL_TIM_PWM_Start+0x40>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a19      	ldr	r2, [pc, #100]	; (80042dc <HAL_TIM_PWM_Start+0x98>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d004      	beq.n	8004284 <HAL_TIM_PWM_Start+0x40>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a18      	ldr	r2, [pc, #96]	; (80042e0 <HAL_TIM_PWM_Start+0x9c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d101      	bne.n	8004288 <HAL_TIM_PWM_Start+0x44>
 8004284:	2301      	movs	r3, #1
 8004286:	e000      	b.n	800428a <HAL_TIM_PWM_Start+0x46>
 8004288:	2300      	movs	r3, #0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d007      	beq.n	800429e <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800429c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	4b0f      	ldr	r3, [pc, #60]	; (80042e4 <HAL_TIM_PWM_Start+0xa0>)
 80042a6:	4013      	ands	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2b06      	cmp	r3, #6
 80042ae:	d00b      	beq.n	80042c8 <HAL_TIM_PWM_Start+0x84>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b6:	d007      	beq.n	80042c8 <HAL_TIM_PWM_Start+0x84>
  {
    __HAL_TIM_ENABLE(htim);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40012c00 	.word	0x40012c00
 80042d8:	40014000 	.word	0x40014000
 80042dc:	40014400 	.word	0x40014400
 80042e0:	40014800 	.word	0x40014800
 80042e4:	00010007 	.word	0x00010007

080042e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d122      	bne.n	8004344 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b02      	cmp	r3, #2
 800430a:	d11b      	bne.n	8004344 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f06f 0202 	mvn.w	r2, #2
 8004314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fad7 	bl	80048de <HAL_TIM_IC_CaptureCallback>
 8004330:	e005      	b.n	800433e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fac9 	bl	80048ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 fada 	bl	80048f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f003 0304 	and.w	r3, r3, #4
 800434e:	2b04      	cmp	r3, #4
 8004350:	d122      	bne.n	8004398 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b04      	cmp	r3, #4
 800435e:	d11b      	bne.n	8004398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0204 	mvn.w	r2, #4
 8004368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2202      	movs	r2, #2
 800436e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 faad 	bl	80048de <HAL_TIM_IC_CaptureCallback>
 8004384:	e005      	b.n	8004392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fa9f 	bl	80048ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fab0 	bl	80048f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d122      	bne.n	80043ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d11b      	bne.n	80043ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 0208 	mvn.w	r2, #8
 80043bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2204      	movs	r2, #4
 80043c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 fa83 	bl	80048de <HAL_TIM_IC_CaptureCallback>
 80043d8:	e005      	b.n	80043e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 fa75 	bl	80048ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 fa86 	bl	80048f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f003 0310 	and.w	r3, r3, #16
 80043f6:	2b10      	cmp	r3, #16
 80043f8:	d122      	bne.n	8004440 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f003 0310 	and.w	r3, r3, #16
 8004404:	2b10      	cmp	r3, #16
 8004406:	d11b      	bne.n	8004440 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0210 	mvn.w	r2, #16
 8004410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2208      	movs	r2, #8
 8004416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fa59 	bl	80048de <HAL_TIM_IC_CaptureCallback>
 800442c:	e005      	b.n	800443a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fa4b 	bl	80048ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 fa5c 	bl	80048f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b01      	cmp	r3, #1
 800444c:	d10e      	bne.n	800446c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b01      	cmp	r3, #1
 800445a:	d107      	bne.n	800446c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f06f 0201 	mvn.w	r2, #1
 8004464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fc ff88 	bl	800137c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004476:	2b80      	cmp	r3, #128	; 0x80
 8004478:	d10e      	bne.n	8004498 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004484:	2b80      	cmp	r3, #128	; 0x80
 8004486:	d107      	bne.n	8004498 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fe98 	bl	80051c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044a6:	d10e      	bne.n	80044c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b2:	2b80      	cmp	r3, #128	; 0x80
 80044b4:	d107      	bne.n	80044c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fe8b 	bl	80051dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d0:	2b40      	cmp	r3, #64	; 0x40
 80044d2:	d10e      	bne.n	80044f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044de:	2b40      	cmp	r3, #64	; 0x40
 80044e0:	d107      	bne.n	80044f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fa0a 	bl	8004906 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	d10e      	bne.n	800451e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b20      	cmp	r3, #32
 800450c:	d107      	bne.n	800451e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f06f 0220 	mvn.w	r2, #32
 8004516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fe4b 	bl	80051b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800451e:	bf00      	nop
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800453a:	2b01      	cmp	r3, #1
 800453c:	d101      	bne.n	8004542 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800453e:	2302      	movs	r3, #2
 8004540:	e105      	b.n	800474e <HAL_TIM_PWM_ConfigChannel+0x226>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2202      	movs	r2, #2
 800454e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b14      	cmp	r3, #20
 8004556:	f200 80f0 	bhi.w	800473a <HAL_TIM_PWM_ConfigChannel+0x212>
 800455a:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800455c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004560:	080045b5 	.word	0x080045b5
 8004564:	0800473b 	.word	0x0800473b
 8004568:	0800473b 	.word	0x0800473b
 800456c:	0800473b 	.word	0x0800473b
 8004570:	080045f5 	.word	0x080045f5
 8004574:	0800473b 	.word	0x0800473b
 8004578:	0800473b 	.word	0x0800473b
 800457c:	0800473b 	.word	0x0800473b
 8004580:	08004637 	.word	0x08004637
 8004584:	0800473b 	.word	0x0800473b
 8004588:	0800473b 	.word	0x0800473b
 800458c:	0800473b 	.word	0x0800473b
 8004590:	08004677 	.word	0x08004677
 8004594:	0800473b 	.word	0x0800473b
 8004598:	0800473b 	.word	0x0800473b
 800459c:	0800473b 	.word	0x0800473b
 80045a0:	080046b9 	.word	0x080046b9
 80045a4:	0800473b 	.word	0x0800473b
 80045a8:	0800473b 	.word	0x0800473b
 80045ac:	0800473b 	.word	0x0800473b
 80045b0:	080046f9 	.word	0x080046f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68b9      	ldr	r1, [r7, #8]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fa26 	bl	8004a0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699a      	ldr	r2, [r3, #24]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0208 	orr.w	r2, r2, #8
 80045ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0204 	bic.w	r2, r2, #4
 80045de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6999      	ldr	r1, [r3, #24]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	619a      	str	r2, [r3, #24]
      break;
 80045f2:	e0a3      	b.n	800473c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68b9      	ldr	r1, [r7, #8]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 fa8c 	bl	8004b18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699a      	ldr	r2, [r3, #24]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800460e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800461e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6999      	ldr	r1, [r3, #24]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	021a      	lsls	r2, r3, #8
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	619a      	str	r2, [r3, #24]
      break;
 8004634:	e082      	b.n	800473c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68b9      	ldr	r1, [r7, #8]
 800463c:	4618      	mov	r0, r3
 800463e:	f000 faeb 	bl	8004c18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69da      	ldr	r2, [r3, #28]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f042 0208 	orr.w	r2, r2, #8
 8004650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69da      	ldr	r2, [r3, #28]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0204 	bic.w	r2, r2, #4
 8004660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69d9      	ldr	r1, [r3, #28]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	61da      	str	r2, [r3, #28]
      break;
 8004674:	e062      	b.n	800473c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68b9      	ldr	r1, [r7, #8]
 800467c:	4618      	mov	r0, r3
 800467e:	f000 fb49 	bl	8004d14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69da      	ldr	r2, [r3, #28]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69da      	ldr	r2, [r3, #28]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69d9      	ldr	r1, [r3, #28]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	021a      	lsls	r2, r3, #8
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	61da      	str	r2, [r3, #28]
      break;
 80046b6:	e041      	b.n	800473c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68b9      	ldr	r1, [r7, #8]
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 fb8c 	bl	8004ddc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0208 	orr.w	r2, r2, #8
 80046d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0204 	bic.w	r2, r2, #4
 80046e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	691a      	ldr	r2, [r3, #16]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046f6:	e021      	b.n	800473c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fbca 	bl	8004e98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004712:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004722:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	021a      	lsls	r2, r3, #8
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004738:	e000      	b.n	800473c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 800473a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop

08004758 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_TIM_ConfigClockSource+0x18>
 800476c:	2302      	movs	r3, #2
 800476e:	e0a8      	b.n	80048c2 <HAL_TIM_ConfigClockSource+0x16a>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800478e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004792:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800479a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b40      	cmp	r3, #64	; 0x40
 80047aa:	d067      	beq.n	800487c <HAL_TIM_ConfigClockSource+0x124>
 80047ac:	2b40      	cmp	r3, #64	; 0x40
 80047ae:	d80b      	bhi.n	80047c8 <HAL_TIM_ConfigClockSource+0x70>
 80047b0:	2b10      	cmp	r3, #16
 80047b2:	d073      	beq.n	800489c <HAL_TIM_ConfigClockSource+0x144>
 80047b4:	2b10      	cmp	r3, #16
 80047b6:	d802      	bhi.n	80047be <HAL_TIM_ConfigClockSource+0x66>
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d06f      	beq.n	800489c <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80047bc:	e078      	b.n	80048b0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80047be:	2b20      	cmp	r3, #32
 80047c0:	d06c      	beq.n	800489c <HAL_TIM_ConfigClockSource+0x144>
 80047c2:	2b30      	cmp	r3, #48	; 0x30
 80047c4:	d06a      	beq.n	800489c <HAL_TIM_ConfigClockSource+0x144>
      break;
 80047c6:	e073      	b.n	80048b0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80047c8:	2b70      	cmp	r3, #112	; 0x70
 80047ca:	d00d      	beq.n	80047e8 <HAL_TIM_ConfigClockSource+0x90>
 80047cc:	2b70      	cmp	r3, #112	; 0x70
 80047ce:	d804      	bhi.n	80047da <HAL_TIM_ConfigClockSource+0x82>
 80047d0:	2b50      	cmp	r3, #80	; 0x50
 80047d2:	d033      	beq.n	800483c <HAL_TIM_ConfigClockSource+0xe4>
 80047d4:	2b60      	cmp	r3, #96	; 0x60
 80047d6:	d041      	beq.n	800485c <HAL_TIM_ConfigClockSource+0x104>
      break;
 80047d8:	e06a      	b.n	80048b0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80047da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047de:	d066      	beq.n	80048ae <HAL_TIM_ConfigClockSource+0x156>
 80047e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047e4:	d017      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80047e6:	e063      	b.n	80048b0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6818      	ldr	r0, [r3, #0]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	6899      	ldr	r1, [r3, #8]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f000 fc28 	bl	800504c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800480a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	609a      	str	r2, [r3, #8]
      break;
 8004814:	e04c      	b.n	80048b0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6899      	ldr	r1, [r3, #8]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f000 fc11 	bl	800504c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004838:	609a      	str	r2, [r3, #8]
      break;
 800483a:	e039      	b.n	80048b0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6818      	ldr	r0, [r3, #0]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	6859      	ldr	r1, [r3, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	461a      	mov	r2, r3
 800484a:	f000 fb85 	bl	8004f58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2150      	movs	r1, #80	; 0x50
 8004854:	4618      	mov	r0, r3
 8004856:	f000 fbde 	bl	8005016 <TIM_ITRx_SetConfig>
      break;
 800485a:	e029      	b.n	80048b0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	6859      	ldr	r1, [r3, #4]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	461a      	mov	r2, r3
 800486a:	f000 fba4 	bl	8004fb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2160      	movs	r1, #96	; 0x60
 8004874:	4618      	mov	r0, r3
 8004876:	f000 fbce 	bl	8005016 <TIM_ITRx_SetConfig>
      break;
 800487a:	e019      	b.n	80048b0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	6859      	ldr	r1, [r3, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	461a      	mov	r2, r3
 800488a:	f000 fb65 	bl	8004f58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2140      	movs	r1, #64	; 0x40
 8004894:	4618      	mov	r0, r3
 8004896:	f000 fbbe 	bl	8005016 <TIM_ITRx_SetConfig>
      break;
 800489a:	e009      	b.n	80048b0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4619      	mov	r1, r3
 80048a6:	4610      	mov	r0, r2
 80048a8:	f000 fbb5 	bl	8005016 <TIM_ITRx_SetConfig>
      break;
 80048ac:	e000      	b.n	80048b0 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80048ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
	...

0800491c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a32      	ldr	r2, [pc, #200]	; (80049f8 <TIM_Base_SetConfig+0xdc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d007      	beq.n	8004944 <TIM_Base_SetConfig+0x28>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493a:	d003      	beq.n	8004944 <TIM_Base_SetConfig+0x28>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a2f      	ldr	r2, [pc, #188]	; (80049fc <TIM_Base_SetConfig+0xe0>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d108      	bne.n	8004956 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a27      	ldr	r2, [pc, #156]	; (80049f8 <TIM_Base_SetConfig+0xdc>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d013      	beq.n	8004986 <TIM_Base_SetConfig+0x6a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004964:	d00f      	beq.n	8004986 <TIM_Base_SetConfig+0x6a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a24      	ldr	r2, [pc, #144]	; (80049fc <TIM_Base_SetConfig+0xe0>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d00b      	beq.n	8004986 <TIM_Base_SetConfig+0x6a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a23      	ldr	r2, [pc, #140]	; (8004a00 <TIM_Base_SetConfig+0xe4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d007      	beq.n	8004986 <TIM_Base_SetConfig+0x6a>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a22      	ldr	r2, [pc, #136]	; (8004a04 <TIM_Base_SetConfig+0xe8>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d003      	beq.n	8004986 <TIM_Base_SetConfig+0x6a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a21      	ldr	r2, [pc, #132]	; (8004a08 <TIM_Base_SetConfig+0xec>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d108      	bne.n	8004998 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800498c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	4313      	orrs	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	689a      	ldr	r2, [r3, #8]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a0e      	ldr	r2, [pc, #56]	; (80049f8 <TIM_Base_SetConfig+0xdc>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00b      	beq.n	80049dc <TIM_Base_SetConfig+0xc0>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a0e      	ldr	r2, [pc, #56]	; (8004a00 <TIM_Base_SetConfig+0xe4>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d007      	beq.n	80049dc <TIM_Base_SetConfig+0xc0>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a0d      	ldr	r2, [pc, #52]	; (8004a04 <TIM_Base_SetConfig+0xe8>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d003      	beq.n	80049dc <TIM_Base_SetConfig+0xc0>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a0c      	ldr	r2, [pc, #48]	; (8004a08 <TIM_Base_SetConfig+0xec>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d103      	bne.n	80049e4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	615a      	str	r2, [r3, #20]
}
 80049ea:	bf00      	nop
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40012c00 	.word	0x40012c00
 80049fc:	40000400 	.word	0x40000400
 8004a00:	40014000 	.word	0x40014000
 8004a04:	40014400 	.word	0x40014400
 8004a08:	40014800 	.word	0x40014800

08004a0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	f023 0201 	bic.w	r2, r3, #1
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0303 	bic.w	r3, r3, #3
 8004a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f023 0302 	bic.w	r3, r3, #2
 8004a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a28      	ldr	r2, [pc, #160]	; (8004b08 <TIM_OC1_SetConfig+0xfc>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00b      	beq.n	8004a84 <TIM_OC1_SetConfig+0x78>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a27      	ldr	r2, [pc, #156]	; (8004b0c <TIM_OC1_SetConfig+0x100>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d007      	beq.n	8004a84 <TIM_OC1_SetConfig+0x78>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a26      	ldr	r2, [pc, #152]	; (8004b10 <TIM_OC1_SetConfig+0x104>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d003      	beq.n	8004a84 <TIM_OC1_SetConfig+0x78>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a25      	ldr	r2, [pc, #148]	; (8004b14 <TIM_OC1_SetConfig+0x108>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d10c      	bne.n	8004a9e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f023 0308 	bic.w	r3, r3, #8
 8004a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f023 0304 	bic.w	r3, r3, #4
 8004a9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a19      	ldr	r2, [pc, #100]	; (8004b08 <TIM_OC1_SetConfig+0xfc>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d00b      	beq.n	8004abe <TIM_OC1_SetConfig+0xb2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a18      	ldr	r2, [pc, #96]	; (8004b0c <TIM_OC1_SetConfig+0x100>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d007      	beq.n	8004abe <TIM_OC1_SetConfig+0xb2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a17      	ldr	r2, [pc, #92]	; (8004b10 <TIM_OC1_SetConfig+0x104>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d003      	beq.n	8004abe <TIM_OC1_SetConfig+0xb2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a16      	ldr	r2, [pc, #88]	; (8004b14 <TIM_OC1_SetConfig+0x108>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d111      	bne.n	8004ae2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	621a      	str	r2, [r3, #32]
}
 8004afc:	bf00      	nop
 8004afe:	371c      	adds	r7, #28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	40012c00 	.word	0x40012c00
 8004b0c:	40014000 	.word	0x40014000
 8004b10:	40014400 	.word	0x40014400
 8004b14:	40014800 	.word	0x40014800

08004b18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	f023 0210 	bic.w	r2, r3, #16
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	021b      	lsls	r3, r3, #8
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f023 0320 	bic.w	r3, r3, #32
 8004b66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a24      	ldr	r2, [pc, #144]	; (8004c08 <TIM_OC2_SetConfig+0xf0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d10d      	bne.n	8004b98 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	011b      	lsls	r3, r3, #4
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a1b      	ldr	r2, [pc, #108]	; (8004c08 <TIM_OC2_SetConfig+0xf0>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00b      	beq.n	8004bb8 <TIM_OC2_SetConfig+0xa0>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a1a      	ldr	r2, [pc, #104]	; (8004c0c <TIM_OC2_SetConfig+0xf4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d007      	beq.n	8004bb8 <TIM_OC2_SetConfig+0xa0>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a19      	ldr	r2, [pc, #100]	; (8004c10 <TIM_OC2_SetConfig+0xf8>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d003      	beq.n	8004bb8 <TIM_OC2_SetConfig+0xa0>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a18      	ldr	r2, [pc, #96]	; (8004c14 <TIM_OC2_SetConfig+0xfc>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d113      	bne.n	8004be0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bbe:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bc6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	621a      	str	r2, [r3, #32]
}
 8004bfa:	bf00      	nop
 8004bfc:	371c      	adds	r7, #28
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	40012c00 	.word	0x40012c00
 8004c0c:	40014000 	.word	0x40014000
 8004c10:	40014400 	.word	0x40014400
 8004c14:	40014800 	.word	0x40014800

08004c18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f023 0303 	bic.w	r3, r3, #3
 8004c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	021b      	lsls	r3, r3, #8
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a23      	ldr	r2, [pc, #140]	; (8004d04 <TIM_OC3_SetConfig+0xec>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d10d      	bne.n	8004c96 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	021b      	lsls	r3, r3, #8
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c94:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a1a      	ldr	r2, [pc, #104]	; (8004d04 <TIM_OC3_SetConfig+0xec>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00b      	beq.n	8004cb6 <TIM_OC3_SetConfig+0x9e>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a19      	ldr	r2, [pc, #100]	; (8004d08 <TIM_OC3_SetConfig+0xf0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d007      	beq.n	8004cb6 <TIM_OC3_SetConfig+0x9e>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a18      	ldr	r2, [pc, #96]	; (8004d0c <TIM_OC3_SetConfig+0xf4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d003      	beq.n	8004cb6 <TIM_OC3_SetConfig+0x9e>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a17      	ldr	r2, [pc, #92]	; (8004d10 <TIM_OC3_SetConfig+0xf8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d113      	bne.n	8004cde <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	011b      	lsls	r3, r3, #4
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	621a      	str	r2, [r3, #32]
}
 8004cf8:	bf00      	nop
 8004cfa:	371c      	adds	r7, #28
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	40012c00 	.word	0x40012c00
 8004d08:	40014000 	.word	0x40014000
 8004d0c:	40014400 	.word	0x40014400
 8004d10:	40014800 	.word	0x40014800

08004d14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	021b      	lsls	r3, r3, #8
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	031b      	lsls	r3, r3, #12
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a16      	ldr	r2, [pc, #88]	; (8004dcc <TIM_OC4_SetConfig+0xb8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00b      	beq.n	8004d90 <TIM_OC4_SetConfig+0x7c>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a15      	ldr	r2, [pc, #84]	; (8004dd0 <TIM_OC4_SetConfig+0xbc>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d007      	beq.n	8004d90 <TIM_OC4_SetConfig+0x7c>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a14      	ldr	r2, [pc, #80]	; (8004dd4 <TIM_OC4_SetConfig+0xc0>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d003      	beq.n	8004d90 <TIM_OC4_SetConfig+0x7c>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a13      	ldr	r2, [pc, #76]	; (8004dd8 <TIM_OC4_SetConfig+0xc4>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d109      	bne.n	8004da4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	019b      	lsls	r3, r3, #6
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	621a      	str	r2, [r3, #32]
}
 8004dbe:	bf00      	nop
 8004dc0:	371c      	adds	r7, #28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	40012c00 	.word	0x40012c00
 8004dd0:	40014000 	.word	0x40014000
 8004dd4:	40014400 	.word	0x40014400
 8004dd8:	40014800 	.word	0x40014800

08004ddc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b087      	sub	sp, #28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	041b      	lsls	r3, r3, #16
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a15      	ldr	r2, [pc, #84]	; (8004e88 <TIM_OC5_SetConfig+0xac>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00b      	beq.n	8004e4e <TIM_OC5_SetConfig+0x72>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a14      	ldr	r2, [pc, #80]	; (8004e8c <TIM_OC5_SetConfig+0xb0>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d007      	beq.n	8004e4e <TIM_OC5_SetConfig+0x72>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a13      	ldr	r2, [pc, #76]	; (8004e90 <TIM_OC5_SetConfig+0xb4>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d003      	beq.n	8004e4e <TIM_OC5_SetConfig+0x72>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a12      	ldr	r2, [pc, #72]	; (8004e94 <TIM_OC5_SetConfig+0xb8>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d109      	bne.n	8004e62 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	021b      	lsls	r3, r3, #8
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	621a      	str	r2, [r3, #32]
}
 8004e7c:	bf00      	nop
 8004e7e:	371c      	adds	r7, #28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	40012c00 	.word	0x40012c00
 8004e8c:	40014000 	.word	0x40014000
 8004e90:	40014400 	.word	0x40014400
 8004e94:	40014800 	.word	0x40014800

08004e98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	021b      	lsls	r3, r3, #8
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ede:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	051b      	lsls	r3, r3, #20
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a16      	ldr	r2, [pc, #88]	; (8004f48 <TIM_OC6_SetConfig+0xb0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d00b      	beq.n	8004f0c <TIM_OC6_SetConfig+0x74>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a15      	ldr	r2, [pc, #84]	; (8004f4c <TIM_OC6_SetConfig+0xb4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d007      	beq.n	8004f0c <TIM_OC6_SetConfig+0x74>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a14      	ldr	r2, [pc, #80]	; (8004f50 <TIM_OC6_SetConfig+0xb8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d003      	beq.n	8004f0c <TIM_OC6_SetConfig+0x74>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a13      	ldr	r2, [pc, #76]	; (8004f54 <TIM_OC6_SetConfig+0xbc>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d109      	bne.n	8004f20 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	029b      	lsls	r3, r3, #10
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	621a      	str	r2, [r3, #32]
}
 8004f3a:	bf00      	nop
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40012c00 	.word	0x40012c00
 8004f4c:	40014000 	.word	0x40014000
 8004f50:	40014400 	.word	0x40014400
 8004f54:	40014800 	.word	0x40014800

08004f58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	f023 0201 	bic.w	r2, r3, #1
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f023 030a 	bic.w	r3, r3, #10
 8004f94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	621a      	str	r2, [r3, #32]
}
 8004faa:	bf00      	nop
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b087      	sub	sp, #28
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	f023 0210 	bic.w	r2, r3, #16
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fe0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	031b      	lsls	r3, r3, #12
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ff2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	621a      	str	r2, [r3, #32]
}
 800500a:	bf00      	nop
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005016:	b480      	push	{r7}
 8005018:	b085      	sub	sp, #20
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	f043 0307 	orr.w	r3, r3, #7
 8005038:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	609a      	str	r2, [r3, #8]
}
 8005040:	bf00      	nop
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005066:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	021a      	lsls	r2, r3, #8
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	431a      	orrs	r2, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4313      	orrs	r3, r2
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	609a      	str	r2, [r3, #8]
}
 8005080:	bf00      	nop
 8005082:	371c      	adds	r7, #28
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f003 031f 	and.w	r3, r3, #31
 800509e:	2201      	movs	r2, #1
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a1a      	ldr	r2, [r3, #32]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	43db      	mvns	r3, r3
 80050ae:	401a      	ands	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6a1a      	ldr	r2, [r3, #32]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f003 031f 	and.w	r3, r3, #31
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	fa01 f303 	lsl.w	r3, r1, r3
 80050c4:	431a      	orrs	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	621a      	str	r2, [r3, #32]
}
 80050ca:	bf00      	nop
 80050cc:	371c      	adds	r7, #28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
	...

080050d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e054      	b.n	800519a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a24      	ldr	r2, [pc, #144]	; (80051a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d108      	bne.n	800512c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005120:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	4313      	orrs	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005132:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a17      	ldr	r2, [pc, #92]	; (80051a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d00e      	beq.n	800516e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005158:	d009      	beq.n	800516e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a13      	ldr	r2, [pc, #76]	; (80051ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d004      	beq.n	800516e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a11      	ldr	r2, [pc, #68]	; (80051b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d10c      	bne.n	8005188 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005174:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	4313      	orrs	r3, r2
 800517e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	40012c00 	.word	0x40012c00
 80051ac:	40000400 	.word	0x40000400
 80051b0:	40014000 	.word	0x40014000

080051b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e040      	b.n	8005284 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005206:	2b00      	cmp	r3, #0
 8005208:	d106      	bne.n	8005218 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7fc fbbe 	bl	8001994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2224      	movs	r2, #36	; 0x24
 800521c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0201 	bic.w	r2, r2, #1
 800522c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f8c0 	bl	80053b4 <UART_SetConfig>
 8005234:	4603      	mov	r3, r0
 8005236:	2b01      	cmp	r3, #1
 8005238:	d101      	bne.n	800523e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e022      	b.n	8005284 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fa36 	bl	80056b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800525a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800526a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0201 	orr.w	r2, r2, #1
 800527a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 fabd 	bl	80057fc <UART_CheckIdleState>
 8005282:	4603      	mov	r3, r0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08a      	sub	sp, #40	; 0x28
 8005290:	af02      	add	r7, sp, #8
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	603b      	str	r3, [r7, #0]
 8005298:	4613      	mov	r3, r2
 800529a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a0:	2b20      	cmp	r3, #32
 80052a2:	f040 8081 	bne.w	80053a8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d002      	beq.n	80052b2 <HAL_UART_Transmit+0x26>
 80052ac:	88fb      	ldrh	r3, [r7, #6]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e079      	b.n	80053aa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <HAL_UART_Transmit+0x38>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e072      	b.n	80053aa <HAL_UART_Transmit+0x11e>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2221      	movs	r2, #33	; 0x21
 80052d6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80052d8:	f7fc fc56 	bl	8001b88 <HAL_GetTick>
 80052dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	88fa      	ldrh	r2, [r7, #6]
 80052e2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	88fa      	ldrh	r2, [r7, #6]
 80052ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052f6:	d108      	bne.n	800530a <HAL_UART_Transmit+0x7e>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d104      	bne.n	800530a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005300:	2300      	movs	r3, #0
 8005302:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	61bb      	str	r3, [r7, #24]
 8005308:	e003      	b.n	8005312 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800530e:	2300      	movs	r3, #0
 8005310:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005312:	e02d      	b.n	8005370 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	2200      	movs	r2, #0
 800531c:	2180      	movs	r1, #128	; 0x80
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 fab1 	bl	8005886 <UART_WaitOnFlagUntilTimeout>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e03d      	b.n	80053aa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10b      	bne.n	800534c <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	881a      	ldrh	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005340:	b292      	uxth	r2, r2
 8005342:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	3302      	adds	r3, #2
 8005348:	61bb      	str	r3, [r7, #24]
 800534a:	e008      	b.n	800535e <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	781a      	ldrb	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	b292      	uxth	r2, r2
 8005356:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	3301      	adds	r3, #1
 800535c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005364:	b29b      	uxth	r3, r3
 8005366:	3b01      	subs	r3, #1
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005376:	b29b      	uxth	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1cb      	bne.n	8005314 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2200      	movs	r2, #0
 8005384:	2140      	movs	r1, #64	; 0x40
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f000 fa7d 	bl	8005886 <UART_WaitOnFlagUntilTimeout>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e009      	b.n	80053aa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2220      	movs	r2, #32
 800539a:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80053a4:	2300      	movs	r3, #0
 80053a6:	e000      	b.n	80053aa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80053a8:	2302      	movs	r3, #2
  }
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3720      	adds	r7, #32
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80053bc:	2300      	movs	r3, #0
 80053be:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80053c0:	2300      	movs	r3, #0
 80053c2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	431a      	orrs	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	4313      	orrs	r3, r2
 80053da:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	4ba2      	ldr	r3, [pc, #648]	; (800566c <UART_SetConfig+0x2b8>)
 80053e4:	4013      	ands	r3, r2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6812      	ldr	r2, [r2, #0]
 80053ea:	6939      	ldr	r1, [r7, #16]
 80053ec:	430b      	orrs	r3, r1
 80053ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	4313      	orrs	r3, r2
 8005414:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	430a      	orrs	r2, r1
 8005428:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a90      	ldr	r2, [pc, #576]	; (8005670 <UART_SetConfig+0x2bc>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d121      	bne.n	8005478 <UART_SetConfig+0xc4>
 8005434:	4b8f      	ldr	r3, [pc, #572]	; (8005674 <UART_SetConfig+0x2c0>)
 8005436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005438:	f003 0303 	and.w	r3, r3, #3
 800543c:	2b03      	cmp	r3, #3
 800543e:	d817      	bhi.n	8005470 <UART_SetConfig+0xbc>
 8005440:	a201      	add	r2, pc, #4	; (adr r2, 8005448 <UART_SetConfig+0x94>)
 8005442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005446:	bf00      	nop
 8005448:	08005459 	.word	0x08005459
 800544c:	08005465 	.word	0x08005465
 8005450:	0800546b 	.word	0x0800546b
 8005454:	0800545f 	.word	0x0800545f
 8005458:	2300      	movs	r3, #0
 800545a:	77fb      	strb	r3, [r7, #31]
 800545c:	e01e      	b.n	800549c <UART_SetConfig+0xe8>
 800545e:	2302      	movs	r3, #2
 8005460:	77fb      	strb	r3, [r7, #31]
 8005462:	e01b      	b.n	800549c <UART_SetConfig+0xe8>
 8005464:	2304      	movs	r3, #4
 8005466:	77fb      	strb	r3, [r7, #31]
 8005468:	e018      	b.n	800549c <UART_SetConfig+0xe8>
 800546a:	2308      	movs	r3, #8
 800546c:	77fb      	strb	r3, [r7, #31]
 800546e:	e015      	b.n	800549c <UART_SetConfig+0xe8>
 8005470:	2310      	movs	r3, #16
 8005472:	77fb      	strb	r3, [r7, #31]
 8005474:	bf00      	nop
 8005476:	e011      	b.n	800549c <UART_SetConfig+0xe8>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a7e      	ldr	r2, [pc, #504]	; (8005678 <UART_SetConfig+0x2c4>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d102      	bne.n	8005488 <UART_SetConfig+0xd4>
 8005482:	2300      	movs	r3, #0
 8005484:	77fb      	strb	r3, [r7, #31]
 8005486:	e009      	b.n	800549c <UART_SetConfig+0xe8>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a7b      	ldr	r2, [pc, #492]	; (800567c <UART_SetConfig+0x2c8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d102      	bne.n	8005498 <UART_SetConfig+0xe4>
 8005492:	2300      	movs	r3, #0
 8005494:	77fb      	strb	r3, [r7, #31]
 8005496:	e001      	b.n	800549c <UART_SetConfig+0xe8>
 8005498:	2310      	movs	r3, #16
 800549a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	69db      	ldr	r3, [r3, #28]
 80054a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a4:	f040 8082 	bne.w	80055ac <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80054a8:	7ffb      	ldrb	r3, [r7, #31]
 80054aa:	2b08      	cmp	r3, #8
 80054ac:	d85e      	bhi.n	800556c <UART_SetConfig+0x1b8>
 80054ae:	a201      	add	r2, pc, #4	; (adr r2, 80054b4 <UART_SetConfig+0x100>)
 80054b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b4:	080054d9 	.word	0x080054d9
 80054b8:	080054f9 	.word	0x080054f9
 80054bc:	08005519 	.word	0x08005519
 80054c0:	0800556d 	.word	0x0800556d
 80054c4:	08005535 	.word	0x08005535
 80054c8:	0800556d 	.word	0x0800556d
 80054cc:	0800556d 	.word	0x0800556d
 80054d0:	0800556d 	.word	0x0800556d
 80054d4:	08005555 	.word	0x08005555
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054d8:	f7fe fcbe 	bl	8003e58 <HAL_RCC_GetPCLK1Freq>
 80054dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	005a      	lsls	r2, r3, #1
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	085b      	lsrs	r3, r3, #1
 80054e8:	441a      	add	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	61bb      	str	r3, [r7, #24]
        break;
 80054f6:	e03c      	b.n	8005572 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054f8:	f7fe fcd0 	bl	8003e9c <HAL_RCC_GetPCLK2Freq>
 80054fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	005a      	lsls	r2, r3, #1
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	085b      	lsrs	r3, r3, #1
 8005508:	441a      	add	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005512:	b29b      	uxth	r3, r3
 8005514:	61bb      	str	r3, [r7, #24]
        break;
 8005516:	e02c      	b.n	8005572 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	085b      	lsrs	r3, r3, #1
 800551e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005522:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6852      	ldr	r2, [r2, #4]
 800552a:	fbb3 f3f2 	udiv	r3, r3, r2
 800552e:	b29b      	uxth	r3, r3
 8005530:	61bb      	str	r3, [r7, #24]
        break;
 8005532:	e01e      	b.n	8005572 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005534:	f7fe fc1a 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 8005538:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	005a      	lsls	r2, r3, #1
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	085b      	lsrs	r3, r3, #1
 8005544:	441a      	add	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	fbb2 f3f3 	udiv	r3, r2, r3
 800554e:	b29b      	uxth	r3, r3
 8005550:	61bb      	str	r3, [r7, #24]
        break;
 8005552:	e00e      	b.n	8005572 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	085b      	lsrs	r3, r3, #1
 800555a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	fbb2 f3f3 	udiv	r3, r2, r3
 8005566:	b29b      	uxth	r3, r3
 8005568:	61bb      	str	r3, [r7, #24]
        break;
 800556a:	e002      	b.n	8005572 <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	75fb      	strb	r3, [r7, #23]
        break;
 8005570:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	2b0f      	cmp	r3, #15
 8005576:	d916      	bls.n	80055a6 <UART_SetConfig+0x1f2>
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800557e:	d212      	bcs.n	80055a6 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	b29b      	uxth	r3, r3
 8005584:	f023 030f 	bic.w	r3, r3, #15
 8005588:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	085b      	lsrs	r3, r3, #1
 800558e:	b29b      	uxth	r3, r3
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	b29a      	uxth	r2, r3
 8005596:	897b      	ldrh	r3, [r7, #10]
 8005598:	4313      	orrs	r3, r2
 800559a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	897a      	ldrh	r2, [r7, #10]
 80055a2:	60da      	str	r2, [r3, #12]
 80055a4:	e07d      	b.n	80056a2 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	75fb      	strb	r3, [r7, #23]
 80055aa:	e07a      	b.n	80056a2 <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 80055ac:	7ffb      	ldrb	r3, [r7, #31]
 80055ae:	2b08      	cmp	r3, #8
 80055b0:	d866      	bhi.n	8005680 <UART_SetConfig+0x2cc>
 80055b2:	a201      	add	r2, pc, #4	; (adr r2, 80055b8 <UART_SetConfig+0x204>)
 80055b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b8:	080055dd 	.word	0x080055dd
 80055bc:	080055fb 	.word	0x080055fb
 80055c0:	08005619 	.word	0x08005619
 80055c4:	08005681 	.word	0x08005681
 80055c8:	08005635 	.word	0x08005635
 80055cc:	08005681 	.word	0x08005681
 80055d0:	08005681 	.word	0x08005681
 80055d4:	08005681 	.word	0x08005681
 80055d8:	08005653 	.word	0x08005653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055dc:	f7fe fc3c 	bl	8003e58 <HAL_RCC_GetPCLK1Freq>
 80055e0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	085a      	lsrs	r2, r3, #1
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	441a      	add	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	61bb      	str	r3, [r7, #24]
        break;
 80055f8:	e045      	b.n	8005686 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055fa:	f7fe fc4f 	bl	8003e9c <HAL_RCC_GetPCLK2Freq>
 80055fe:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	085a      	lsrs	r2, r3, #1
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	441a      	add	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005612:	b29b      	uxth	r3, r3
 8005614:	61bb      	str	r3, [r7, #24]
        break;
 8005616:	e036      	b.n	8005686 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	085b      	lsrs	r3, r3, #1
 800561e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8005622:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6852      	ldr	r2, [r2, #4]
 800562a:	fbb3 f3f2 	udiv	r3, r3, r2
 800562e:	b29b      	uxth	r3, r3
 8005630:	61bb      	str	r3, [r7, #24]
        break;
 8005632:	e028      	b.n	8005686 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005634:	f7fe fb9a 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 8005638:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	085a      	lsrs	r2, r3, #1
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	441a      	add	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	fbb2 f3f3 	udiv	r3, r2, r3
 800564c:	b29b      	uxth	r3, r3
 800564e:	61bb      	str	r3, [r7, #24]
        break;
 8005650:	e019      	b.n	8005686 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	085b      	lsrs	r3, r3, #1
 8005658:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	fbb2 f3f3 	udiv	r3, r2, r3
 8005664:	b29b      	uxth	r3, r3
 8005666:	61bb      	str	r3, [r7, #24]
        break;
 8005668:	e00d      	b.n	8005686 <UART_SetConfig+0x2d2>
 800566a:	bf00      	nop
 800566c:	efff69f3 	.word	0xefff69f3
 8005670:	40013800 	.word	0x40013800
 8005674:	40021000 	.word	0x40021000
 8005678:	40004400 	.word	0x40004400
 800567c:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	75fb      	strb	r3, [r7, #23]
        break;
 8005684:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	2b0f      	cmp	r3, #15
 800568a:	d908      	bls.n	800569e <UART_SetConfig+0x2ea>
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005692:	d204      	bcs.n	800569e <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	60da      	str	r2, [r3, #12]
 800569c:	e001      	b.n	80056a2 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80056ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3720      	adds	r7, #32
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00a      	beq.n	80056e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00a      	beq.n	8005704 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00a      	beq.n	8005726 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	f003 0308 	and.w	r3, r3, #8
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00a      	beq.n	8005748 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00a      	beq.n	800576a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	f003 0320 	and.w	r3, r3, #32
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00a      	beq.n	800578c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01a      	beq.n	80057ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057b6:	d10a      	bne.n	80057ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	605a      	str	r2, [r3, #4]
  }
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af02      	add	r7, sp, #8
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800580a:	f7fc f9bd 	bl	8001b88 <HAL_GetTick>
 800580e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0308 	and.w	r3, r3, #8
 800581a:	2b08      	cmp	r3, #8
 800581c:	d10e      	bne.n	800583c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800581e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f82a 	bl	8005886 <UART_WaitOnFlagUntilTimeout>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d001      	beq.n	800583c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e020      	b.n	800587e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b04      	cmp	r3, #4
 8005848:	d10e      	bne.n	8005868 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800584a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f814 	bl	8005886 <UART_WaitOnFlagUntilTimeout>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e00a      	b.n	800587e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2220      	movs	r2, #32
 800586c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2220      	movs	r2, #32
 8005872:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b084      	sub	sp, #16
 800588a:	af00      	add	r7, sp, #0
 800588c:	60f8      	str	r0, [r7, #12]
 800588e:	60b9      	str	r1, [r7, #8]
 8005890:	603b      	str	r3, [r7, #0]
 8005892:	4613      	mov	r3, r2
 8005894:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005896:	e05d      	b.n	8005954 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800589e:	d059      	beq.n	8005954 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058a0:	f7fc f972 	bl	8001b88 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d302      	bcc.n	80058b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d11b      	bne.n	80058ee <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058c4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 0201 	bic.w	r2, r2, #1
 80058d4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2220      	movs	r2, #32
 80058da:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2220      	movs	r2, #32
 80058e0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e042      	b.n	8005974 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d02b      	beq.n	8005954 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005906:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800590a:	d123      	bne.n	8005954 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005914:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005924:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0201 	bic.w	r2, r2, #1
 8005934:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2220      	movs	r2, #32
 800593a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2220      	movs	r2, #32
 8005940:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2220      	movs	r2, #32
 8005946:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e00f      	b.n	8005974 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	69da      	ldr	r2, [r3, #28]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	4013      	ands	r3, r2
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	429a      	cmp	r2, r3
 8005962:	bf0c      	ite	eq
 8005964:	2301      	moveq	r3, #1
 8005966:	2300      	movne	r3, #0
 8005968:	b2db      	uxtb	r3, r3
 800596a:	461a      	mov	r2, r3
 800596c:	79fb      	ldrb	r3, [r7, #7]
 800596e:	429a      	cmp	r2, r3
 8005970:	d092      	beq.n	8005898 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <__errno>:
 800597c:	4b01      	ldr	r3, [pc, #4]	; (8005984 <__errno+0x8>)
 800597e:	6818      	ldr	r0, [r3, #0]
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	20000010 	.word	0x20000010

08005988 <__libc_init_array>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	4e0d      	ldr	r6, [pc, #52]	; (80059c0 <__libc_init_array+0x38>)
 800598c:	4c0d      	ldr	r4, [pc, #52]	; (80059c4 <__libc_init_array+0x3c>)
 800598e:	1ba4      	subs	r4, r4, r6
 8005990:	10a4      	asrs	r4, r4, #2
 8005992:	2500      	movs	r5, #0
 8005994:	42a5      	cmp	r5, r4
 8005996:	d109      	bne.n	80059ac <__libc_init_array+0x24>
 8005998:	4e0b      	ldr	r6, [pc, #44]	; (80059c8 <__libc_init_array+0x40>)
 800599a:	4c0c      	ldr	r4, [pc, #48]	; (80059cc <__libc_init_array+0x44>)
 800599c:	f004 fa5e 	bl	8009e5c <_init>
 80059a0:	1ba4      	subs	r4, r4, r6
 80059a2:	10a4      	asrs	r4, r4, #2
 80059a4:	2500      	movs	r5, #0
 80059a6:	42a5      	cmp	r5, r4
 80059a8:	d105      	bne.n	80059b6 <__libc_init_array+0x2e>
 80059aa:	bd70      	pop	{r4, r5, r6, pc}
 80059ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059b0:	4798      	blx	r3
 80059b2:	3501      	adds	r5, #1
 80059b4:	e7ee      	b.n	8005994 <__libc_init_array+0xc>
 80059b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059ba:	4798      	blx	r3
 80059bc:	3501      	adds	r5, #1
 80059be:	e7f2      	b.n	80059a6 <__libc_init_array+0x1e>
 80059c0:	0800a218 	.word	0x0800a218
 80059c4:	0800a218 	.word	0x0800a218
 80059c8:	0800a218 	.word	0x0800a218
 80059cc:	0800a21c 	.word	0x0800a21c

080059d0 <memcpy>:
 80059d0:	b510      	push	{r4, lr}
 80059d2:	1e43      	subs	r3, r0, #1
 80059d4:	440a      	add	r2, r1
 80059d6:	4291      	cmp	r1, r2
 80059d8:	d100      	bne.n	80059dc <memcpy+0xc>
 80059da:	bd10      	pop	{r4, pc}
 80059dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059e4:	e7f7      	b.n	80059d6 <memcpy+0x6>

080059e6 <memset>:
 80059e6:	4402      	add	r2, r0
 80059e8:	4603      	mov	r3, r0
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d100      	bne.n	80059f0 <memset+0xa>
 80059ee:	4770      	bx	lr
 80059f0:	f803 1b01 	strb.w	r1, [r3], #1
 80059f4:	e7f9      	b.n	80059ea <memset+0x4>

080059f6 <__cvt>:
 80059f6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059fa:	ec55 4b10 	vmov	r4, r5, d0
 80059fe:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005a00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005a04:	2d00      	cmp	r5, #0
 8005a06:	460e      	mov	r6, r1
 8005a08:	4691      	mov	r9, r2
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	bfb8      	it	lt
 8005a0e:	4622      	movlt	r2, r4
 8005a10:	462b      	mov	r3, r5
 8005a12:	f027 0720 	bic.w	r7, r7, #32
 8005a16:	bfbb      	ittet	lt
 8005a18:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005a1c:	461d      	movlt	r5, r3
 8005a1e:	2300      	movge	r3, #0
 8005a20:	232d      	movlt	r3, #45	; 0x2d
 8005a22:	bfb8      	it	lt
 8005a24:	4614      	movlt	r4, r2
 8005a26:	2f46      	cmp	r7, #70	; 0x46
 8005a28:	700b      	strb	r3, [r1, #0]
 8005a2a:	d004      	beq.n	8005a36 <__cvt+0x40>
 8005a2c:	2f45      	cmp	r7, #69	; 0x45
 8005a2e:	d100      	bne.n	8005a32 <__cvt+0x3c>
 8005a30:	3601      	adds	r6, #1
 8005a32:	2102      	movs	r1, #2
 8005a34:	e000      	b.n	8005a38 <__cvt+0x42>
 8005a36:	2103      	movs	r1, #3
 8005a38:	ab03      	add	r3, sp, #12
 8005a3a:	9301      	str	r3, [sp, #4]
 8005a3c:	ab02      	add	r3, sp, #8
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	4632      	mov	r2, r6
 8005a42:	4653      	mov	r3, sl
 8005a44:	ec45 4b10 	vmov	d0, r4, r5
 8005a48:	f001 feb2 	bl	80077b0 <_dtoa_r>
 8005a4c:	2f47      	cmp	r7, #71	; 0x47
 8005a4e:	4680      	mov	r8, r0
 8005a50:	d102      	bne.n	8005a58 <__cvt+0x62>
 8005a52:	f019 0f01 	tst.w	r9, #1
 8005a56:	d026      	beq.n	8005aa6 <__cvt+0xb0>
 8005a58:	2f46      	cmp	r7, #70	; 0x46
 8005a5a:	eb08 0906 	add.w	r9, r8, r6
 8005a5e:	d111      	bne.n	8005a84 <__cvt+0x8e>
 8005a60:	f898 3000 	ldrb.w	r3, [r8]
 8005a64:	2b30      	cmp	r3, #48	; 0x30
 8005a66:	d10a      	bne.n	8005a7e <__cvt+0x88>
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	4629      	mov	r1, r5
 8005a70:	f7fb f82a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a74:	b918      	cbnz	r0, 8005a7e <__cvt+0x88>
 8005a76:	f1c6 0601 	rsb	r6, r6, #1
 8005a7a:	f8ca 6000 	str.w	r6, [sl]
 8005a7e:	f8da 3000 	ldr.w	r3, [sl]
 8005a82:	4499      	add	r9, r3
 8005a84:	2200      	movs	r2, #0
 8005a86:	2300      	movs	r3, #0
 8005a88:	4620      	mov	r0, r4
 8005a8a:	4629      	mov	r1, r5
 8005a8c:	f7fb f81c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a90:	b938      	cbnz	r0, 8005aa2 <__cvt+0xac>
 8005a92:	2230      	movs	r2, #48	; 0x30
 8005a94:	9b03      	ldr	r3, [sp, #12]
 8005a96:	454b      	cmp	r3, r9
 8005a98:	d205      	bcs.n	8005aa6 <__cvt+0xb0>
 8005a9a:	1c59      	adds	r1, r3, #1
 8005a9c:	9103      	str	r1, [sp, #12]
 8005a9e:	701a      	strb	r2, [r3, #0]
 8005aa0:	e7f8      	b.n	8005a94 <__cvt+0x9e>
 8005aa2:	f8cd 900c 	str.w	r9, [sp, #12]
 8005aa6:	9b03      	ldr	r3, [sp, #12]
 8005aa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005aaa:	eba3 0308 	sub.w	r3, r3, r8
 8005aae:	4640      	mov	r0, r8
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	b004      	add	sp, #16
 8005ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005ab8 <__exponent>:
 8005ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005aba:	2900      	cmp	r1, #0
 8005abc:	4604      	mov	r4, r0
 8005abe:	bfba      	itte	lt
 8005ac0:	4249      	neglt	r1, r1
 8005ac2:	232d      	movlt	r3, #45	; 0x2d
 8005ac4:	232b      	movge	r3, #43	; 0x2b
 8005ac6:	2909      	cmp	r1, #9
 8005ac8:	f804 2b02 	strb.w	r2, [r4], #2
 8005acc:	7043      	strb	r3, [r0, #1]
 8005ace:	dd20      	ble.n	8005b12 <__exponent+0x5a>
 8005ad0:	f10d 0307 	add.w	r3, sp, #7
 8005ad4:	461f      	mov	r7, r3
 8005ad6:	260a      	movs	r6, #10
 8005ad8:	fb91 f5f6 	sdiv	r5, r1, r6
 8005adc:	fb06 1115 	mls	r1, r6, r5, r1
 8005ae0:	3130      	adds	r1, #48	; 0x30
 8005ae2:	2d09      	cmp	r5, #9
 8005ae4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005ae8:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8005aec:	4629      	mov	r1, r5
 8005aee:	dc09      	bgt.n	8005b04 <__exponent+0x4c>
 8005af0:	3130      	adds	r1, #48	; 0x30
 8005af2:	3b02      	subs	r3, #2
 8005af4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005af8:	42bb      	cmp	r3, r7
 8005afa:	4622      	mov	r2, r4
 8005afc:	d304      	bcc.n	8005b08 <__exponent+0x50>
 8005afe:	1a10      	subs	r0, r2, r0
 8005b00:	b003      	add	sp, #12
 8005b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b04:	4613      	mov	r3, r2
 8005b06:	e7e7      	b.n	8005ad8 <__exponent+0x20>
 8005b08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b0c:	f804 2b01 	strb.w	r2, [r4], #1
 8005b10:	e7f2      	b.n	8005af8 <__exponent+0x40>
 8005b12:	2330      	movs	r3, #48	; 0x30
 8005b14:	4419      	add	r1, r3
 8005b16:	7083      	strb	r3, [r0, #2]
 8005b18:	1d02      	adds	r2, r0, #4
 8005b1a:	70c1      	strb	r1, [r0, #3]
 8005b1c:	e7ef      	b.n	8005afe <__exponent+0x46>
	...

08005b20 <_printf_float>:
 8005b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b24:	b08d      	sub	sp, #52	; 0x34
 8005b26:	460c      	mov	r4, r1
 8005b28:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005b2c:	4616      	mov	r6, r2
 8005b2e:	461f      	mov	r7, r3
 8005b30:	4605      	mov	r5, r0
 8005b32:	f003 f89b 	bl	8008c6c <_localeconv_r>
 8005b36:	6803      	ldr	r3, [r0, #0]
 8005b38:	9304      	str	r3, [sp, #16]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fa fb48 	bl	80001d0 <strlen>
 8005b40:	2300      	movs	r3, #0
 8005b42:	930a      	str	r3, [sp, #40]	; 0x28
 8005b44:	f8d8 3000 	ldr.w	r3, [r8]
 8005b48:	9005      	str	r0, [sp, #20]
 8005b4a:	3307      	adds	r3, #7
 8005b4c:	f023 0307 	bic.w	r3, r3, #7
 8005b50:	f103 0208 	add.w	r2, r3, #8
 8005b54:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005b58:	f8d4 b000 	ldr.w	fp, [r4]
 8005b5c:	f8c8 2000 	str.w	r2, [r8]
 8005b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b64:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005b68:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005b6c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005b70:	9307      	str	r3, [sp, #28]
 8005b72:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b7a:	4ba7      	ldr	r3, [pc, #668]	; (8005e18 <_printf_float+0x2f8>)
 8005b7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b80:	f7fa ffd4 	bl	8000b2c <__aeabi_dcmpun>
 8005b84:	bb70      	cbnz	r0, 8005be4 <_printf_float+0xc4>
 8005b86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b8a:	4ba3      	ldr	r3, [pc, #652]	; (8005e18 <_printf_float+0x2f8>)
 8005b8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b90:	f7fa ffae 	bl	8000af0 <__aeabi_dcmple>
 8005b94:	bb30      	cbnz	r0, 8005be4 <_printf_float+0xc4>
 8005b96:	2200      	movs	r2, #0
 8005b98:	2300      	movs	r3, #0
 8005b9a:	4640      	mov	r0, r8
 8005b9c:	4649      	mov	r1, r9
 8005b9e:	f7fa ff9d 	bl	8000adc <__aeabi_dcmplt>
 8005ba2:	b110      	cbz	r0, 8005baa <_printf_float+0x8a>
 8005ba4:	232d      	movs	r3, #45	; 0x2d
 8005ba6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005baa:	4a9c      	ldr	r2, [pc, #624]	; (8005e1c <_printf_float+0x2fc>)
 8005bac:	4b9c      	ldr	r3, [pc, #624]	; (8005e20 <_printf_float+0x300>)
 8005bae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005bb2:	bf8c      	ite	hi
 8005bb4:	4690      	movhi	r8, r2
 8005bb6:	4698      	movls	r8, r3
 8005bb8:	2303      	movs	r3, #3
 8005bba:	f02b 0204 	bic.w	r2, fp, #4
 8005bbe:	6123      	str	r3, [r4, #16]
 8005bc0:	6022      	str	r2, [r4, #0]
 8005bc2:	f04f 0900 	mov.w	r9, #0
 8005bc6:	9700      	str	r7, [sp, #0]
 8005bc8:	4633      	mov	r3, r6
 8005bca:	aa0b      	add	r2, sp, #44	; 0x2c
 8005bcc:	4621      	mov	r1, r4
 8005bce:	4628      	mov	r0, r5
 8005bd0:	f000 f9e6 	bl	8005fa0 <_printf_common>
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	f040 808d 	bne.w	8005cf4 <_printf_float+0x1d4>
 8005bda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bde:	b00d      	add	sp, #52	; 0x34
 8005be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be4:	4642      	mov	r2, r8
 8005be6:	464b      	mov	r3, r9
 8005be8:	4640      	mov	r0, r8
 8005bea:	4649      	mov	r1, r9
 8005bec:	f7fa ff9e 	bl	8000b2c <__aeabi_dcmpun>
 8005bf0:	b110      	cbz	r0, 8005bf8 <_printf_float+0xd8>
 8005bf2:	4a8c      	ldr	r2, [pc, #560]	; (8005e24 <_printf_float+0x304>)
 8005bf4:	4b8c      	ldr	r3, [pc, #560]	; (8005e28 <_printf_float+0x308>)
 8005bf6:	e7da      	b.n	8005bae <_printf_float+0x8e>
 8005bf8:	6861      	ldr	r1, [r4, #4]
 8005bfa:	1c4b      	adds	r3, r1, #1
 8005bfc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005c00:	a80a      	add	r0, sp, #40	; 0x28
 8005c02:	d13e      	bne.n	8005c82 <_printf_float+0x162>
 8005c04:	2306      	movs	r3, #6
 8005c06:	6063      	str	r3, [r4, #4]
 8005c08:	2300      	movs	r3, #0
 8005c0a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005c0e:	ab09      	add	r3, sp, #36	; 0x24
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	ec49 8b10 	vmov	d0, r8, r9
 8005c16:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005c1a:	6022      	str	r2, [r4, #0]
 8005c1c:	f8cd a004 	str.w	sl, [sp, #4]
 8005c20:	6861      	ldr	r1, [r4, #4]
 8005c22:	4628      	mov	r0, r5
 8005c24:	f7ff fee7 	bl	80059f6 <__cvt>
 8005c28:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005c2c:	2b47      	cmp	r3, #71	; 0x47
 8005c2e:	4680      	mov	r8, r0
 8005c30:	d109      	bne.n	8005c46 <_printf_float+0x126>
 8005c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c34:	1cd8      	adds	r0, r3, #3
 8005c36:	db02      	blt.n	8005c3e <_printf_float+0x11e>
 8005c38:	6862      	ldr	r2, [r4, #4]
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	dd47      	ble.n	8005cce <_printf_float+0x1ae>
 8005c3e:	f1aa 0a02 	sub.w	sl, sl, #2
 8005c42:	fa5f fa8a 	uxtb.w	sl, sl
 8005c46:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005c4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c4c:	d824      	bhi.n	8005c98 <_printf_float+0x178>
 8005c4e:	3901      	subs	r1, #1
 8005c50:	4652      	mov	r2, sl
 8005c52:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005c56:	9109      	str	r1, [sp, #36]	; 0x24
 8005c58:	f7ff ff2e 	bl	8005ab8 <__exponent>
 8005c5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c5e:	1813      	adds	r3, r2, r0
 8005c60:	2a01      	cmp	r2, #1
 8005c62:	4681      	mov	r9, r0
 8005c64:	6123      	str	r3, [r4, #16]
 8005c66:	dc02      	bgt.n	8005c6e <_printf_float+0x14e>
 8005c68:	6822      	ldr	r2, [r4, #0]
 8005c6a:	07d1      	lsls	r1, r2, #31
 8005c6c:	d501      	bpl.n	8005c72 <_printf_float+0x152>
 8005c6e:	3301      	adds	r3, #1
 8005c70:	6123      	str	r3, [r4, #16]
 8005c72:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d0a5      	beq.n	8005bc6 <_printf_float+0xa6>
 8005c7a:	232d      	movs	r3, #45	; 0x2d
 8005c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c80:	e7a1      	b.n	8005bc6 <_printf_float+0xa6>
 8005c82:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005c86:	f000 8177 	beq.w	8005f78 <_printf_float+0x458>
 8005c8a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005c8e:	d1bb      	bne.n	8005c08 <_printf_float+0xe8>
 8005c90:	2900      	cmp	r1, #0
 8005c92:	d1b9      	bne.n	8005c08 <_printf_float+0xe8>
 8005c94:	2301      	movs	r3, #1
 8005c96:	e7b6      	b.n	8005c06 <_printf_float+0xe6>
 8005c98:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005c9c:	d119      	bne.n	8005cd2 <_printf_float+0x1b2>
 8005c9e:	2900      	cmp	r1, #0
 8005ca0:	6863      	ldr	r3, [r4, #4]
 8005ca2:	dd0c      	ble.n	8005cbe <_printf_float+0x19e>
 8005ca4:	6121      	str	r1, [r4, #16]
 8005ca6:	b913      	cbnz	r3, 8005cae <_printf_float+0x18e>
 8005ca8:	6822      	ldr	r2, [r4, #0]
 8005caa:	07d2      	lsls	r2, r2, #31
 8005cac:	d502      	bpl.n	8005cb4 <_printf_float+0x194>
 8005cae:	3301      	adds	r3, #1
 8005cb0:	440b      	add	r3, r1
 8005cb2:	6123      	str	r3, [r4, #16]
 8005cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cb6:	65a3      	str	r3, [r4, #88]	; 0x58
 8005cb8:	f04f 0900 	mov.w	r9, #0
 8005cbc:	e7d9      	b.n	8005c72 <_printf_float+0x152>
 8005cbe:	b913      	cbnz	r3, 8005cc6 <_printf_float+0x1a6>
 8005cc0:	6822      	ldr	r2, [r4, #0]
 8005cc2:	07d0      	lsls	r0, r2, #31
 8005cc4:	d501      	bpl.n	8005cca <_printf_float+0x1aa>
 8005cc6:	3302      	adds	r3, #2
 8005cc8:	e7f3      	b.n	8005cb2 <_printf_float+0x192>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e7f1      	b.n	8005cb2 <_printf_float+0x192>
 8005cce:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005cd2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	db05      	blt.n	8005ce6 <_printf_float+0x1c6>
 8005cda:	6822      	ldr	r2, [r4, #0]
 8005cdc:	6123      	str	r3, [r4, #16]
 8005cde:	07d1      	lsls	r1, r2, #31
 8005ce0:	d5e8      	bpl.n	8005cb4 <_printf_float+0x194>
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	e7e5      	b.n	8005cb2 <_printf_float+0x192>
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	bfd4      	ite	le
 8005cea:	f1c3 0302 	rsble	r3, r3, #2
 8005cee:	2301      	movgt	r3, #1
 8005cf0:	4413      	add	r3, r2
 8005cf2:	e7de      	b.n	8005cb2 <_printf_float+0x192>
 8005cf4:	6823      	ldr	r3, [r4, #0]
 8005cf6:	055a      	lsls	r2, r3, #21
 8005cf8:	d407      	bmi.n	8005d0a <_printf_float+0x1ea>
 8005cfa:	6923      	ldr	r3, [r4, #16]
 8005cfc:	4642      	mov	r2, r8
 8005cfe:	4631      	mov	r1, r6
 8005d00:	4628      	mov	r0, r5
 8005d02:	47b8      	blx	r7
 8005d04:	3001      	adds	r0, #1
 8005d06:	d12b      	bne.n	8005d60 <_printf_float+0x240>
 8005d08:	e767      	b.n	8005bda <_printf_float+0xba>
 8005d0a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005d0e:	f240 80dc 	bls.w	8005eca <_printf_float+0x3aa>
 8005d12:	2200      	movs	r2, #0
 8005d14:	2300      	movs	r3, #0
 8005d16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d1a:	f7fa fed5 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	d033      	beq.n	8005d8a <_printf_float+0x26a>
 8005d22:	2301      	movs	r3, #1
 8005d24:	4a41      	ldr	r2, [pc, #260]	; (8005e2c <_printf_float+0x30c>)
 8005d26:	4631      	mov	r1, r6
 8005d28:	4628      	mov	r0, r5
 8005d2a:	47b8      	blx	r7
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	f43f af54 	beq.w	8005bda <_printf_float+0xba>
 8005d32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d36:	429a      	cmp	r2, r3
 8005d38:	db02      	blt.n	8005d40 <_printf_float+0x220>
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	07d8      	lsls	r0, r3, #31
 8005d3e:	d50f      	bpl.n	8005d60 <_printf_float+0x240>
 8005d40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d44:	4631      	mov	r1, r6
 8005d46:	4628      	mov	r0, r5
 8005d48:	47b8      	blx	r7
 8005d4a:	3001      	adds	r0, #1
 8005d4c:	f43f af45 	beq.w	8005bda <_printf_float+0xba>
 8005d50:	f04f 0800 	mov.w	r8, #0
 8005d54:	f104 091a 	add.w	r9, r4, #26
 8005d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	4543      	cmp	r3, r8
 8005d5e:	dc09      	bgt.n	8005d74 <_printf_float+0x254>
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	079b      	lsls	r3, r3, #30
 8005d64:	f100 8103 	bmi.w	8005f6e <_printf_float+0x44e>
 8005d68:	68e0      	ldr	r0, [r4, #12]
 8005d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d6c:	4298      	cmp	r0, r3
 8005d6e:	bfb8      	it	lt
 8005d70:	4618      	movlt	r0, r3
 8005d72:	e734      	b.n	8005bde <_printf_float+0xbe>
 8005d74:	2301      	movs	r3, #1
 8005d76:	464a      	mov	r2, r9
 8005d78:	4631      	mov	r1, r6
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	47b8      	blx	r7
 8005d7e:	3001      	adds	r0, #1
 8005d80:	f43f af2b 	beq.w	8005bda <_printf_float+0xba>
 8005d84:	f108 0801 	add.w	r8, r8, #1
 8005d88:	e7e6      	b.n	8005d58 <_printf_float+0x238>
 8005d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	dc2b      	bgt.n	8005de8 <_printf_float+0x2c8>
 8005d90:	2301      	movs	r3, #1
 8005d92:	4a26      	ldr	r2, [pc, #152]	; (8005e2c <_printf_float+0x30c>)
 8005d94:	4631      	mov	r1, r6
 8005d96:	4628      	mov	r0, r5
 8005d98:	47b8      	blx	r7
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	f43f af1d 	beq.w	8005bda <_printf_float+0xba>
 8005da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005da2:	b923      	cbnz	r3, 8005dae <_printf_float+0x28e>
 8005da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005da6:	b913      	cbnz	r3, 8005dae <_printf_float+0x28e>
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	07d9      	lsls	r1, r3, #31
 8005dac:	d5d8      	bpl.n	8005d60 <_printf_float+0x240>
 8005dae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005db2:	4631      	mov	r1, r6
 8005db4:	4628      	mov	r0, r5
 8005db6:	47b8      	blx	r7
 8005db8:	3001      	adds	r0, #1
 8005dba:	f43f af0e 	beq.w	8005bda <_printf_float+0xba>
 8005dbe:	f04f 0900 	mov.w	r9, #0
 8005dc2:	f104 0a1a 	add.w	sl, r4, #26
 8005dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dc8:	425b      	negs	r3, r3
 8005dca:	454b      	cmp	r3, r9
 8005dcc:	dc01      	bgt.n	8005dd2 <_printf_float+0x2b2>
 8005dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dd0:	e794      	b.n	8005cfc <_printf_float+0x1dc>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	4652      	mov	r2, sl
 8005dd6:	4631      	mov	r1, r6
 8005dd8:	4628      	mov	r0, r5
 8005dda:	47b8      	blx	r7
 8005ddc:	3001      	adds	r0, #1
 8005dde:	f43f aefc 	beq.w	8005bda <_printf_float+0xba>
 8005de2:	f109 0901 	add.w	r9, r9, #1
 8005de6:	e7ee      	b.n	8005dc6 <_printf_float+0x2a6>
 8005de8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005dec:	429a      	cmp	r2, r3
 8005dee:	bfa8      	it	ge
 8005df0:	461a      	movge	r2, r3
 8005df2:	2a00      	cmp	r2, #0
 8005df4:	4691      	mov	r9, r2
 8005df6:	dd07      	ble.n	8005e08 <_printf_float+0x2e8>
 8005df8:	4613      	mov	r3, r2
 8005dfa:	4631      	mov	r1, r6
 8005dfc:	4642      	mov	r2, r8
 8005dfe:	4628      	mov	r0, r5
 8005e00:	47b8      	blx	r7
 8005e02:	3001      	adds	r0, #1
 8005e04:	f43f aee9 	beq.w	8005bda <_printf_float+0xba>
 8005e08:	f104 031a 	add.w	r3, r4, #26
 8005e0c:	f04f 0b00 	mov.w	fp, #0
 8005e10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e14:	9306      	str	r3, [sp, #24]
 8005e16:	e015      	b.n	8005e44 <_printf_float+0x324>
 8005e18:	7fefffff 	.word	0x7fefffff
 8005e1c:	08009efc 	.word	0x08009efc
 8005e20:	08009ef8 	.word	0x08009ef8
 8005e24:	08009f04 	.word	0x08009f04
 8005e28:	08009f00 	.word	0x08009f00
 8005e2c:	08009f08 	.word	0x08009f08
 8005e30:	2301      	movs	r3, #1
 8005e32:	9a06      	ldr	r2, [sp, #24]
 8005e34:	4631      	mov	r1, r6
 8005e36:	4628      	mov	r0, r5
 8005e38:	47b8      	blx	r7
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	f43f aecd 	beq.w	8005bda <_printf_float+0xba>
 8005e40:	f10b 0b01 	add.w	fp, fp, #1
 8005e44:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005e48:	ebaa 0309 	sub.w	r3, sl, r9
 8005e4c:	455b      	cmp	r3, fp
 8005e4e:	dcef      	bgt.n	8005e30 <_printf_float+0x310>
 8005e50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e54:	429a      	cmp	r2, r3
 8005e56:	44d0      	add	r8, sl
 8005e58:	db15      	blt.n	8005e86 <_printf_float+0x366>
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	07da      	lsls	r2, r3, #31
 8005e5e:	d412      	bmi.n	8005e86 <_printf_float+0x366>
 8005e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e64:	eba3 020a 	sub.w	r2, r3, sl
 8005e68:	eba3 0a01 	sub.w	sl, r3, r1
 8005e6c:	4592      	cmp	sl, r2
 8005e6e:	bfa8      	it	ge
 8005e70:	4692      	movge	sl, r2
 8005e72:	f1ba 0f00 	cmp.w	sl, #0
 8005e76:	dc0e      	bgt.n	8005e96 <_printf_float+0x376>
 8005e78:	f04f 0800 	mov.w	r8, #0
 8005e7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e80:	f104 091a 	add.w	r9, r4, #26
 8005e84:	e019      	b.n	8005eba <_printf_float+0x39a>
 8005e86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e8a:	4631      	mov	r1, r6
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	47b8      	blx	r7
 8005e90:	3001      	adds	r0, #1
 8005e92:	d1e5      	bne.n	8005e60 <_printf_float+0x340>
 8005e94:	e6a1      	b.n	8005bda <_printf_float+0xba>
 8005e96:	4653      	mov	r3, sl
 8005e98:	4642      	mov	r2, r8
 8005e9a:	4631      	mov	r1, r6
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	47b8      	blx	r7
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	d1e9      	bne.n	8005e78 <_printf_float+0x358>
 8005ea4:	e699      	b.n	8005bda <_printf_float+0xba>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	464a      	mov	r2, r9
 8005eaa:	4631      	mov	r1, r6
 8005eac:	4628      	mov	r0, r5
 8005eae:	47b8      	blx	r7
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	f43f ae92 	beq.w	8005bda <_printf_float+0xba>
 8005eb6:	f108 0801 	add.w	r8, r8, #1
 8005eba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ebe:	1a9b      	subs	r3, r3, r2
 8005ec0:	eba3 030a 	sub.w	r3, r3, sl
 8005ec4:	4543      	cmp	r3, r8
 8005ec6:	dcee      	bgt.n	8005ea6 <_printf_float+0x386>
 8005ec8:	e74a      	b.n	8005d60 <_printf_float+0x240>
 8005eca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ecc:	2a01      	cmp	r2, #1
 8005ece:	dc01      	bgt.n	8005ed4 <_printf_float+0x3b4>
 8005ed0:	07db      	lsls	r3, r3, #31
 8005ed2:	d53a      	bpl.n	8005f4a <_printf_float+0x42a>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	4642      	mov	r2, r8
 8005ed8:	4631      	mov	r1, r6
 8005eda:	4628      	mov	r0, r5
 8005edc:	47b8      	blx	r7
 8005ede:	3001      	adds	r0, #1
 8005ee0:	f43f ae7b 	beq.w	8005bda <_printf_float+0xba>
 8005ee4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ee8:	4631      	mov	r1, r6
 8005eea:	4628      	mov	r0, r5
 8005eec:	47b8      	blx	r7
 8005eee:	3001      	adds	r0, #1
 8005ef0:	f108 0801 	add.w	r8, r8, #1
 8005ef4:	f43f ae71 	beq.w	8005bda <_printf_float+0xba>
 8005ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005efa:	2200      	movs	r2, #0
 8005efc:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8005f00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f04:	2300      	movs	r3, #0
 8005f06:	f7fa fddf 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f0a:	b9c8      	cbnz	r0, 8005f40 <_printf_float+0x420>
 8005f0c:	4653      	mov	r3, sl
 8005f0e:	4642      	mov	r2, r8
 8005f10:	4631      	mov	r1, r6
 8005f12:	4628      	mov	r0, r5
 8005f14:	47b8      	blx	r7
 8005f16:	3001      	adds	r0, #1
 8005f18:	d10e      	bne.n	8005f38 <_printf_float+0x418>
 8005f1a:	e65e      	b.n	8005bda <_printf_float+0xba>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	4652      	mov	r2, sl
 8005f20:	4631      	mov	r1, r6
 8005f22:	4628      	mov	r0, r5
 8005f24:	47b8      	blx	r7
 8005f26:	3001      	adds	r0, #1
 8005f28:	f43f ae57 	beq.w	8005bda <_printf_float+0xba>
 8005f2c:	f108 0801 	add.w	r8, r8, #1
 8005f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f32:	3b01      	subs	r3, #1
 8005f34:	4543      	cmp	r3, r8
 8005f36:	dcf1      	bgt.n	8005f1c <_printf_float+0x3fc>
 8005f38:	464b      	mov	r3, r9
 8005f3a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005f3e:	e6de      	b.n	8005cfe <_printf_float+0x1de>
 8005f40:	f04f 0800 	mov.w	r8, #0
 8005f44:	f104 0a1a 	add.w	sl, r4, #26
 8005f48:	e7f2      	b.n	8005f30 <_printf_float+0x410>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e7df      	b.n	8005f0e <_printf_float+0x3ee>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	464a      	mov	r2, r9
 8005f52:	4631      	mov	r1, r6
 8005f54:	4628      	mov	r0, r5
 8005f56:	47b8      	blx	r7
 8005f58:	3001      	adds	r0, #1
 8005f5a:	f43f ae3e 	beq.w	8005bda <_printf_float+0xba>
 8005f5e:	f108 0801 	add.w	r8, r8, #1
 8005f62:	68e3      	ldr	r3, [r4, #12]
 8005f64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f66:	1a9b      	subs	r3, r3, r2
 8005f68:	4543      	cmp	r3, r8
 8005f6a:	dcf0      	bgt.n	8005f4e <_printf_float+0x42e>
 8005f6c:	e6fc      	b.n	8005d68 <_printf_float+0x248>
 8005f6e:	f04f 0800 	mov.w	r8, #0
 8005f72:	f104 0919 	add.w	r9, r4, #25
 8005f76:	e7f4      	b.n	8005f62 <_printf_float+0x442>
 8005f78:	2900      	cmp	r1, #0
 8005f7a:	f43f ae8b 	beq.w	8005c94 <_printf_float+0x174>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005f84:	ab09      	add	r3, sp, #36	; 0x24
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	ec49 8b10 	vmov	d0, r8, r9
 8005f8c:	6022      	str	r2, [r4, #0]
 8005f8e:	f8cd a004 	str.w	sl, [sp, #4]
 8005f92:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f96:	4628      	mov	r0, r5
 8005f98:	f7ff fd2d 	bl	80059f6 <__cvt>
 8005f9c:	4680      	mov	r8, r0
 8005f9e:	e648      	b.n	8005c32 <_printf_float+0x112>

08005fa0 <_printf_common>:
 8005fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa4:	4691      	mov	r9, r2
 8005fa6:	461f      	mov	r7, r3
 8005fa8:	688a      	ldr	r2, [r1, #8]
 8005faa:	690b      	ldr	r3, [r1, #16]
 8005fac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	bfb8      	it	lt
 8005fb4:	4613      	movlt	r3, r2
 8005fb6:	f8c9 3000 	str.w	r3, [r9]
 8005fba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fbe:	4606      	mov	r6, r0
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	b112      	cbz	r2, 8005fca <_printf_common+0x2a>
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	f8c9 3000 	str.w	r3, [r9]
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	0699      	lsls	r1, r3, #26
 8005fce:	bf42      	ittt	mi
 8005fd0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005fd4:	3302      	addmi	r3, #2
 8005fd6:	f8c9 3000 	strmi.w	r3, [r9]
 8005fda:	6825      	ldr	r5, [r4, #0]
 8005fdc:	f015 0506 	ands.w	r5, r5, #6
 8005fe0:	d107      	bne.n	8005ff2 <_printf_common+0x52>
 8005fe2:	f104 0a19 	add.w	sl, r4, #25
 8005fe6:	68e3      	ldr	r3, [r4, #12]
 8005fe8:	f8d9 2000 	ldr.w	r2, [r9]
 8005fec:	1a9b      	subs	r3, r3, r2
 8005fee:	42ab      	cmp	r3, r5
 8005ff0:	dc28      	bgt.n	8006044 <_printf_common+0xa4>
 8005ff2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005ff6:	6822      	ldr	r2, [r4, #0]
 8005ff8:	3300      	adds	r3, #0
 8005ffa:	bf18      	it	ne
 8005ffc:	2301      	movne	r3, #1
 8005ffe:	0692      	lsls	r2, r2, #26
 8006000:	d42d      	bmi.n	800605e <_printf_common+0xbe>
 8006002:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006006:	4639      	mov	r1, r7
 8006008:	4630      	mov	r0, r6
 800600a:	47c0      	blx	r8
 800600c:	3001      	adds	r0, #1
 800600e:	d020      	beq.n	8006052 <_printf_common+0xb2>
 8006010:	6823      	ldr	r3, [r4, #0]
 8006012:	68e5      	ldr	r5, [r4, #12]
 8006014:	f8d9 2000 	ldr.w	r2, [r9]
 8006018:	f003 0306 	and.w	r3, r3, #6
 800601c:	2b04      	cmp	r3, #4
 800601e:	bf08      	it	eq
 8006020:	1aad      	subeq	r5, r5, r2
 8006022:	68a3      	ldr	r3, [r4, #8]
 8006024:	6922      	ldr	r2, [r4, #16]
 8006026:	bf0c      	ite	eq
 8006028:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800602c:	2500      	movne	r5, #0
 800602e:	4293      	cmp	r3, r2
 8006030:	bfc4      	itt	gt
 8006032:	1a9b      	subgt	r3, r3, r2
 8006034:	18ed      	addgt	r5, r5, r3
 8006036:	f04f 0900 	mov.w	r9, #0
 800603a:	341a      	adds	r4, #26
 800603c:	454d      	cmp	r5, r9
 800603e:	d11a      	bne.n	8006076 <_printf_common+0xd6>
 8006040:	2000      	movs	r0, #0
 8006042:	e008      	b.n	8006056 <_printf_common+0xb6>
 8006044:	2301      	movs	r3, #1
 8006046:	4652      	mov	r2, sl
 8006048:	4639      	mov	r1, r7
 800604a:	4630      	mov	r0, r6
 800604c:	47c0      	blx	r8
 800604e:	3001      	adds	r0, #1
 8006050:	d103      	bne.n	800605a <_printf_common+0xba>
 8006052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800605a:	3501      	adds	r5, #1
 800605c:	e7c3      	b.n	8005fe6 <_printf_common+0x46>
 800605e:	18e1      	adds	r1, r4, r3
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	2030      	movs	r0, #48	; 0x30
 8006064:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006068:	4422      	add	r2, r4
 800606a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800606e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006072:	3302      	adds	r3, #2
 8006074:	e7c5      	b.n	8006002 <_printf_common+0x62>
 8006076:	2301      	movs	r3, #1
 8006078:	4622      	mov	r2, r4
 800607a:	4639      	mov	r1, r7
 800607c:	4630      	mov	r0, r6
 800607e:	47c0      	blx	r8
 8006080:	3001      	adds	r0, #1
 8006082:	d0e6      	beq.n	8006052 <_printf_common+0xb2>
 8006084:	f109 0901 	add.w	r9, r9, #1
 8006088:	e7d8      	b.n	800603c <_printf_common+0x9c>
	...

0800608c <_printf_i>:
 800608c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006090:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006094:	460c      	mov	r4, r1
 8006096:	7e09      	ldrb	r1, [r1, #24]
 8006098:	b085      	sub	sp, #20
 800609a:	296e      	cmp	r1, #110	; 0x6e
 800609c:	4617      	mov	r7, r2
 800609e:	4606      	mov	r6, r0
 80060a0:	4698      	mov	r8, r3
 80060a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060a4:	f000 80b3 	beq.w	800620e <_printf_i+0x182>
 80060a8:	d822      	bhi.n	80060f0 <_printf_i+0x64>
 80060aa:	2963      	cmp	r1, #99	; 0x63
 80060ac:	d036      	beq.n	800611c <_printf_i+0x90>
 80060ae:	d80a      	bhi.n	80060c6 <_printf_i+0x3a>
 80060b0:	2900      	cmp	r1, #0
 80060b2:	f000 80b9 	beq.w	8006228 <_printf_i+0x19c>
 80060b6:	2958      	cmp	r1, #88	; 0x58
 80060b8:	f000 8083 	beq.w	80061c2 <_printf_i+0x136>
 80060bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80060c4:	e032      	b.n	800612c <_printf_i+0xa0>
 80060c6:	2964      	cmp	r1, #100	; 0x64
 80060c8:	d001      	beq.n	80060ce <_printf_i+0x42>
 80060ca:	2969      	cmp	r1, #105	; 0x69
 80060cc:	d1f6      	bne.n	80060bc <_printf_i+0x30>
 80060ce:	6820      	ldr	r0, [r4, #0]
 80060d0:	6813      	ldr	r3, [r2, #0]
 80060d2:	0605      	lsls	r5, r0, #24
 80060d4:	f103 0104 	add.w	r1, r3, #4
 80060d8:	d52a      	bpl.n	8006130 <_printf_i+0xa4>
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6011      	str	r1, [r2, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	da03      	bge.n	80060ea <_printf_i+0x5e>
 80060e2:	222d      	movs	r2, #45	; 0x2d
 80060e4:	425b      	negs	r3, r3
 80060e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80060ea:	486f      	ldr	r0, [pc, #444]	; (80062a8 <_printf_i+0x21c>)
 80060ec:	220a      	movs	r2, #10
 80060ee:	e039      	b.n	8006164 <_printf_i+0xd8>
 80060f0:	2973      	cmp	r1, #115	; 0x73
 80060f2:	f000 809d 	beq.w	8006230 <_printf_i+0x1a4>
 80060f6:	d808      	bhi.n	800610a <_printf_i+0x7e>
 80060f8:	296f      	cmp	r1, #111	; 0x6f
 80060fa:	d020      	beq.n	800613e <_printf_i+0xb2>
 80060fc:	2970      	cmp	r1, #112	; 0x70
 80060fe:	d1dd      	bne.n	80060bc <_printf_i+0x30>
 8006100:	6823      	ldr	r3, [r4, #0]
 8006102:	f043 0320 	orr.w	r3, r3, #32
 8006106:	6023      	str	r3, [r4, #0]
 8006108:	e003      	b.n	8006112 <_printf_i+0x86>
 800610a:	2975      	cmp	r1, #117	; 0x75
 800610c:	d017      	beq.n	800613e <_printf_i+0xb2>
 800610e:	2978      	cmp	r1, #120	; 0x78
 8006110:	d1d4      	bne.n	80060bc <_printf_i+0x30>
 8006112:	2378      	movs	r3, #120	; 0x78
 8006114:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006118:	4864      	ldr	r0, [pc, #400]	; (80062ac <_printf_i+0x220>)
 800611a:	e055      	b.n	80061c8 <_printf_i+0x13c>
 800611c:	6813      	ldr	r3, [r2, #0]
 800611e:	1d19      	adds	r1, r3, #4
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6011      	str	r1, [r2, #0]
 8006124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006128:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800612c:	2301      	movs	r3, #1
 800612e:	e08c      	b.n	800624a <_printf_i+0x1be>
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6011      	str	r1, [r2, #0]
 8006134:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006138:	bf18      	it	ne
 800613a:	b21b      	sxthne	r3, r3
 800613c:	e7cf      	b.n	80060de <_printf_i+0x52>
 800613e:	6813      	ldr	r3, [r2, #0]
 8006140:	6825      	ldr	r5, [r4, #0]
 8006142:	1d18      	adds	r0, r3, #4
 8006144:	6010      	str	r0, [r2, #0]
 8006146:	0628      	lsls	r0, r5, #24
 8006148:	d501      	bpl.n	800614e <_printf_i+0xc2>
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	e002      	b.n	8006154 <_printf_i+0xc8>
 800614e:	0668      	lsls	r0, r5, #25
 8006150:	d5fb      	bpl.n	800614a <_printf_i+0xbe>
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	4854      	ldr	r0, [pc, #336]	; (80062a8 <_printf_i+0x21c>)
 8006156:	296f      	cmp	r1, #111	; 0x6f
 8006158:	bf14      	ite	ne
 800615a:	220a      	movne	r2, #10
 800615c:	2208      	moveq	r2, #8
 800615e:	2100      	movs	r1, #0
 8006160:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006164:	6865      	ldr	r5, [r4, #4]
 8006166:	60a5      	str	r5, [r4, #8]
 8006168:	2d00      	cmp	r5, #0
 800616a:	f2c0 8095 	blt.w	8006298 <_printf_i+0x20c>
 800616e:	6821      	ldr	r1, [r4, #0]
 8006170:	f021 0104 	bic.w	r1, r1, #4
 8006174:	6021      	str	r1, [r4, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d13d      	bne.n	80061f6 <_printf_i+0x16a>
 800617a:	2d00      	cmp	r5, #0
 800617c:	f040 808e 	bne.w	800629c <_printf_i+0x210>
 8006180:	4665      	mov	r5, ip
 8006182:	2a08      	cmp	r2, #8
 8006184:	d10b      	bne.n	800619e <_printf_i+0x112>
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	07db      	lsls	r3, r3, #31
 800618a:	d508      	bpl.n	800619e <_printf_i+0x112>
 800618c:	6923      	ldr	r3, [r4, #16]
 800618e:	6862      	ldr	r2, [r4, #4]
 8006190:	429a      	cmp	r2, r3
 8006192:	bfde      	ittt	le
 8006194:	2330      	movle	r3, #48	; 0x30
 8006196:	f805 3c01 	strble.w	r3, [r5, #-1]
 800619a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800619e:	ebac 0305 	sub.w	r3, ip, r5
 80061a2:	6123      	str	r3, [r4, #16]
 80061a4:	f8cd 8000 	str.w	r8, [sp]
 80061a8:	463b      	mov	r3, r7
 80061aa:	aa03      	add	r2, sp, #12
 80061ac:	4621      	mov	r1, r4
 80061ae:	4630      	mov	r0, r6
 80061b0:	f7ff fef6 	bl	8005fa0 <_printf_common>
 80061b4:	3001      	adds	r0, #1
 80061b6:	d14d      	bne.n	8006254 <_printf_i+0x1c8>
 80061b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061bc:	b005      	add	sp, #20
 80061be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061c2:	4839      	ldr	r0, [pc, #228]	; (80062a8 <_printf_i+0x21c>)
 80061c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80061c8:	6813      	ldr	r3, [r2, #0]
 80061ca:	6821      	ldr	r1, [r4, #0]
 80061cc:	1d1d      	adds	r5, r3, #4
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6015      	str	r5, [r2, #0]
 80061d2:	060a      	lsls	r2, r1, #24
 80061d4:	d50b      	bpl.n	80061ee <_printf_i+0x162>
 80061d6:	07ca      	lsls	r2, r1, #31
 80061d8:	bf44      	itt	mi
 80061da:	f041 0120 	orrmi.w	r1, r1, #32
 80061de:	6021      	strmi	r1, [r4, #0]
 80061e0:	b91b      	cbnz	r3, 80061ea <_printf_i+0x15e>
 80061e2:	6822      	ldr	r2, [r4, #0]
 80061e4:	f022 0220 	bic.w	r2, r2, #32
 80061e8:	6022      	str	r2, [r4, #0]
 80061ea:	2210      	movs	r2, #16
 80061ec:	e7b7      	b.n	800615e <_printf_i+0xd2>
 80061ee:	064d      	lsls	r5, r1, #25
 80061f0:	bf48      	it	mi
 80061f2:	b29b      	uxthmi	r3, r3
 80061f4:	e7ef      	b.n	80061d6 <_printf_i+0x14a>
 80061f6:	4665      	mov	r5, ip
 80061f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80061fc:	fb02 3311 	mls	r3, r2, r1, r3
 8006200:	5cc3      	ldrb	r3, [r0, r3]
 8006202:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006206:	460b      	mov	r3, r1
 8006208:	2900      	cmp	r1, #0
 800620a:	d1f5      	bne.n	80061f8 <_printf_i+0x16c>
 800620c:	e7b9      	b.n	8006182 <_printf_i+0xf6>
 800620e:	6813      	ldr	r3, [r2, #0]
 8006210:	6825      	ldr	r5, [r4, #0]
 8006212:	6961      	ldr	r1, [r4, #20]
 8006214:	1d18      	adds	r0, r3, #4
 8006216:	6010      	str	r0, [r2, #0]
 8006218:	0628      	lsls	r0, r5, #24
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	d501      	bpl.n	8006222 <_printf_i+0x196>
 800621e:	6019      	str	r1, [r3, #0]
 8006220:	e002      	b.n	8006228 <_printf_i+0x19c>
 8006222:	066a      	lsls	r2, r5, #25
 8006224:	d5fb      	bpl.n	800621e <_printf_i+0x192>
 8006226:	8019      	strh	r1, [r3, #0]
 8006228:	2300      	movs	r3, #0
 800622a:	6123      	str	r3, [r4, #16]
 800622c:	4665      	mov	r5, ip
 800622e:	e7b9      	b.n	80061a4 <_printf_i+0x118>
 8006230:	6813      	ldr	r3, [r2, #0]
 8006232:	1d19      	adds	r1, r3, #4
 8006234:	6011      	str	r1, [r2, #0]
 8006236:	681d      	ldr	r5, [r3, #0]
 8006238:	6862      	ldr	r2, [r4, #4]
 800623a:	2100      	movs	r1, #0
 800623c:	4628      	mov	r0, r5
 800623e:	f7f9 ffcf 	bl	80001e0 <memchr>
 8006242:	b108      	cbz	r0, 8006248 <_printf_i+0x1bc>
 8006244:	1b40      	subs	r0, r0, r5
 8006246:	6060      	str	r0, [r4, #4]
 8006248:	6863      	ldr	r3, [r4, #4]
 800624a:	6123      	str	r3, [r4, #16]
 800624c:	2300      	movs	r3, #0
 800624e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006252:	e7a7      	b.n	80061a4 <_printf_i+0x118>
 8006254:	6923      	ldr	r3, [r4, #16]
 8006256:	462a      	mov	r2, r5
 8006258:	4639      	mov	r1, r7
 800625a:	4630      	mov	r0, r6
 800625c:	47c0      	blx	r8
 800625e:	3001      	adds	r0, #1
 8006260:	d0aa      	beq.n	80061b8 <_printf_i+0x12c>
 8006262:	6823      	ldr	r3, [r4, #0]
 8006264:	079b      	lsls	r3, r3, #30
 8006266:	d413      	bmi.n	8006290 <_printf_i+0x204>
 8006268:	68e0      	ldr	r0, [r4, #12]
 800626a:	9b03      	ldr	r3, [sp, #12]
 800626c:	4298      	cmp	r0, r3
 800626e:	bfb8      	it	lt
 8006270:	4618      	movlt	r0, r3
 8006272:	e7a3      	b.n	80061bc <_printf_i+0x130>
 8006274:	2301      	movs	r3, #1
 8006276:	464a      	mov	r2, r9
 8006278:	4639      	mov	r1, r7
 800627a:	4630      	mov	r0, r6
 800627c:	47c0      	blx	r8
 800627e:	3001      	adds	r0, #1
 8006280:	d09a      	beq.n	80061b8 <_printf_i+0x12c>
 8006282:	3501      	adds	r5, #1
 8006284:	68e3      	ldr	r3, [r4, #12]
 8006286:	9a03      	ldr	r2, [sp, #12]
 8006288:	1a9b      	subs	r3, r3, r2
 800628a:	42ab      	cmp	r3, r5
 800628c:	dcf2      	bgt.n	8006274 <_printf_i+0x1e8>
 800628e:	e7eb      	b.n	8006268 <_printf_i+0x1dc>
 8006290:	2500      	movs	r5, #0
 8006292:	f104 0919 	add.w	r9, r4, #25
 8006296:	e7f5      	b.n	8006284 <_printf_i+0x1f8>
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1ac      	bne.n	80061f6 <_printf_i+0x16a>
 800629c:	7803      	ldrb	r3, [r0, #0]
 800629e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062a6:	e76c      	b.n	8006182 <_printf_i+0xf6>
 80062a8:	08009f0a 	.word	0x08009f0a
 80062ac:	08009f1b 	.word	0x08009f1b

080062b0 <_scanf_float>:
 80062b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b4:	469a      	mov	sl, r3
 80062b6:	688b      	ldr	r3, [r1, #8]
 80062b8:	4616      	mov	r6, r2
 80062ba:	1e5a      	subs	r2, r3, #1
 80062bc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80062c0:	b087      	sub	sp, #28
 80062c2:	bf83      	ittte	hi
 80062c4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80062c8:	189b      	addhi	r3, r3, r2
 80062ca:	9301      	strhi	r3, [sp, #4]
 80062cc:	2300      	movls	r3, #0
 80062ce:	bf86      	itte	hi
 80062d0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80062d4:	608b      	strhi	r3, [r1, #8]
 80062d6:	9301      	strls	r3, [sp, #4]
 80062d8:	680b      	ldr	r3, [r1, #0]
 80062da:	4688      	mov	r8, r1
 80062dc:	f04f 0b00 	mov.w	fp, #0
 80062e0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80062e4:	f848 3b1c 	str.w	r3, [r8], #28
 80062e8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80062ec:	4607      	mov	r7, r0
 80062ee:	460c      	mov	r4, r1
 80062f0:	4645      	mov	r5, r8
 80062f2:	465a      	mov	r2, fp
 80062f4:	46d9      	mov	r9, fp
 80062f6:	f8cd b008 	str.w	fp, [sp, #8]
 80062fa:	68a1      	ldr	r1, [r4, #8]
 80062fc:	b181      	cbz	r1, 8006320 <_scanf_float+0x70>
 80062fe:	6833      	ldr	r3, [r6, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	2b49      	cmp	r3, #73	; 0x49
 8006304:	d071      	beq.n	80063ea <_scanf_float+0x13a>
 8006306:	d84d      	bhi.n	80063a4 <_scanf_float+0xf4>
 8006308:	2b39      	cmp	r3, #57	; 0x39
 800630a:	d840      	bhi.n	800638e <_scanf_float+0xde>
 800630c:	2b31      	cmp	r3, #49	; 0x31
 800630e:	f080 8088 	bcs.w	8006422 <_scanf_float+0x172>
 8006312:	2b2d      	cmp	r3, #45	; 0x2d
 8006314:	f000 8090 	beq.w	8006438 <_scanf_float+0x188>
 8006318:	d815      	bhi.n	8006346 <_scanf_float+0x96>
 800631a:	2b2b      	cmp	r3, #43	; 0x2b
 800631c:	f000 808c 	beq.w	8006438 <_scanf_float+0x188>
 8006320:	f1b9 0f00 	cmp.w	r9, #0
 8006324:	d003      	beq.n	800632e <_scanf_float+0x7e>
 8006326:	6823      	ldr	r3, [r4, #0]
 8006328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800632c:	6023      	str	r3, [r4, #0]
 800632e:	3a01      	subs	r2, #1
 8006330:	2a01      	cmp	r2, #1
 8006332:	f200 80ea 	bhi.w	800650a <_scanf_float+0x25a>
 8006336:	4545      	cmp	r5, r8
 8006338:	f200 80dc 	bhi.w	80064f4 <_scanf_float+0x244>
 800633c:	2601      	movs	r6, #1
 800633e:	4630      	mov	r0, r6
 8006340:	b007      	add	sp, #28
 8006342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006346:	2b2e      	cmp	r3, #46	; 0x2e
 8006348:	f000 809f 	beq.w	800648a <_scanf_float+0x1da>
 800634c:	2b30      	cmp	r3, #48	; 0x30
 800634e:	d1e7      	bne.n	8006320 <_scanf_float+0x70>
 8006350:	6820      	ldr	r0, [r4, #0]
 8006352:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006356:	d064      	beq.n	8006422 <_scanf_float+0x172>
 8006358:	9b01      	ldr	r3, [sp, #4]
 800635a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800635e:	6020      	str	r0, [r4, #0]
 8006360:	f109 0901 	add.w	r9, r9, #1
 8006364:	b11b      	cbz	r3, 800636e <_scanf_float+0xbe>
 8006366:	3b01      	subs	r3, #1
 8006368:	3101      	adds	r1, #1
 800636a:	9301      	str	r3, [sp, #4]
 800636c:	60a1      	str	r1, [r4, #8]
 800636e:	68a3      	ldr	r3, [r4, #8]
 8006370:	3b01      	subs	r3, #1
 8006372:	60a3      	str	r3, [r4, #8]
 8006374:	6923      	ldr	r3, [r4, #16]
 8006376:	3301      	adds	r3, #1
 8006378:	6123      	str	r3, [r4, #16]
 800637a:	6873      	ldr	r3, [r6, #4]
 800637c:	3b01      	subs	r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	6073      	str	r3, [r6, #4]
 8006382:	f340 80ac 	ble.w	80064de <_scanf_float+0x22e>
 8006386:	6833      	ldr	r3, [r6, #0]
 8006388:	3301      	adds	r3, #1
 800638a:	6033      	str	r3, [r6, #0]
 800638c:	e7b5      	b.n	80062fa <_scanf_float+0x4a>
 800638e:	2b45      	cmp	r3, #69	; 0x45
 8006390:	f000 8085 	beq.w	800649e <_scanf_float+0x1ee>
 8006394:	2b46      	cmp	r3, #70	; 0x46
 8006396:	d06a      	beq.n	800646e <_scanf_float+0x1be>
 8006398:	2b41      	cmp	r3, #65	; 0x41
 800639a:	d1c1      	bne.n	8006320 <_scanf_float+0x70>
 800639c:	2a01      	cmp	r2, #1
 800639e:	d1bf      	bne.n	8006320 <_scanf_float+0x70>
 80063a0:	2202      	movs	r2, #2
 80063a2:	e046      	b.n	8006432 <_scanf_float+0x182>
 80063a4:	2b65      	cmp	r3, #101	; 0x65
 80063a6:	d07a      	beq.n	800649e <_scanf_float+0x1ee>
 80063a8:	d818      	bhi.n	80063dc <_scanf_float+0x12c>
 80063aa:	2b54      	cmp	r3, #84	; 0x54
 80063ac:	d066      	beq.n	800647c <_scanf_float+0x1cc>
 80063ae:	d811      	bhi.n	80063d4 <_scanf_float+0x124>
 80063b0:	2b4e      	cmp	r3, #78	; 0x4e
 80063b2:	d1b5      	bne.n	8006320 <_scanf_float+0x70>
 80063b4:	2a00      	cmp	r2, #0
 80063b6:	d146      	bne.n	8006446 <_scanf_float+0x196>
 80063b8:	f1b9 0f00 	cmp.w	r9, #0
 80063bc:	d145      	bne.n	800644a <_scanf_float+0x19a>
 80063be:	6821      	ldr	r1, [r4, #0]
 80063c0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80063c4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80063c8:	d13f      	bne.n	800644a <_scanf_float+0x19a>
 80063ca:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80063ce:	6021      	str	r1, [r4, #0]
 80063d0:	2201      	movs	r2, #1
 80063d2:	e02e      	b.n	8006432 <_scanf_float+0x182>
 80063d4:	2b59      	cmp	r3, #89	; 0x59
 80063d6:	d01e      	beq.n	8006416 <_scanf_float+0x166>
 80063d8:	2b61      	cmp	r3, #97	; 0x61
 80063da:	e7de      	b.n	800639a <_scanf_float+0xea>
 80063dc:	2b6e      	cmp	r3, #110	; 0x6e
 80063de:	d0e9      	beq.n	80063b4 <_scanf_float+0x104>
 80063e0:	d815      	bhi.n	800640e <_scanf_float+0x15e>
 80063e2:	2b66      	cmp	r3, #102	; 0x66
 80063e4:	d043      	beq.n	800646e <_scanf_float+0x1be>
 80063e6:	2b69      	cmp	r3, #105	; 0x69
 80063e8:	d19a      	bne.n	8006320 <_scanf_float+0x70>
 80063ea:	f1bb 0f00 	cmp.w	fp, #0
 80063ee:	d138      	bne.n	8006462 <_scanf_float+0x1b2>
 80063f0:	f1b9 0f00 	cmp.w	r9, #0
 80063f4:	d197      	bne.n	8006326 <_scanf_float+0x76>
 80063f6:	6821      	ldr	r1, [r4, #0]
 80063f8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80063fc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006400:	d195      	bne.n	800632e <_scanf_float+0x7e>
 8006402:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006406:	6021      	str	r1, [r4, #0]
 8006408:	f04f 0b01 	mov.w	fp, #1
 800640c:	e011      	b.n	8006432 <_scanf_float+0x182>
 800640e:	2b74      	cmp	r3, #116	; 0x74
 8006410:	d034      	beq.n	800647c <_scanf_float+0x1cc>
 8006412:	2b79      	cmp	r3, #121	; 0x79
 8006414:	d184      	bne.n	8006320 <_scanf_float+0x70>
 8006416:	f1bb 0f07 	cmp.w	fp, #7
 800641a:	d181      	bne.n	8006320 <_scanf_float+0x70>
 800641c:	f04f 0b08 	mov.w	fp, #8
 8006420:	e007      	b.n	8006432 <_scanf_float+0x182>
 8006422:	eb12 0f0b 	cmn.w	r2, fp
 8006426:	f47f af7b 	bne.w	8006320 <_scanf_float+0x70>
 800642a:	6821      	ldr	r1, [r4, #0]
 800642c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006430:	6021      	str	r1, [r4, #0]
 8006432:	702b      	strb	r3, [r5, #0]
 8006434:	3501      	adds	r5, #1
 8006436:	e79a      	b.n	800636e <_scanf_float+0xbe>
 8006438:	6821      	ldr	r1, [r4, #0]
 800643a:	0608      	lsls	r0, r1, #24
 800643c:	f57f af70 	bpl.w	8006320 <_scanf_float+0x70>
 8006440:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006444:	e7f4      	b.n	8006430 <_scanf_float+0x180>
 8006446:	2a02      	cmp	r2, #2
 8006448:	d047      	beq.n	80064da <_scanf_float+0x22a>
 800644a:	f1bb 0f01 	cmp.w	fp, #1
 800644e:	d003      	beq.n	8006458 <_scanf_float+0x1a8>
 8006450:	f1bb 0f04 	cmp.w	fp, #4
 8006454:	f47f af64 	bne.w	8006320 <_scanf_float+0x70>
 8006458:	f10b 0b01 	add.w	fp, fp, #1
 800645c:	fa5f fb8b 	uxtb.w	fp, fp
 8006460:	e7e7      	b.n	8006432 <_scanf_float+0x182>
 8006462:	f1bb 0f03 	cmp.w	fp, #3
 8006466:	d0f7      	beq.n	8006458 <_scanf_float+0x1a8>
 8006468:	f1bb 0f05 	cmp.w	fp, #5
 800646c:	e7f2      	b.n	8006454 <_scanf_float+0x1a4>
 800646e:	f1bb 0f02 	cmp.w	fp, #2
 8006472:	f47f af55 	bne.w	8006320 <_scanf_float+0x70>
 8006476:	f04f 0b03 	mov.w	fp, #3
 800647a:	e7da      	b.n	8006432 <_scanf_float+0x182>
 800647c:	f1bb 0f06 	cmp.w	fp, #6
 8006480:	f47f af4e 	bne.w	8006320 <_scanf_float+0x70>
 8006484:	f04f 0b07 	mov.w	fp, #7
 8006488:	e7d3      	b.n	8006432 <_scanf_float+0x182>
 800648a:	6821      	ldr	r1, [r4, #0]
 800648c:	0588      	lsls	r0, r1, #22
 800648e:	f57f af47 	bpl.w	8006320 <_scanf_float+0x70>
 8006492:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8006496:	6021      	str	r1, [r4, #0]
 8006498:	f8cd 9008 	str.w	r9, [sp, #8]
 800649c:	e7c9      	b.n	8006432 <_scanf_float+0x182>
 800649e:	6821      	ldr	r1, [r4, #0]
 80064a0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80064a4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80064a8:	d006      	beq.n	80064b8 <_scanf_float+0x208>
 80064aa:	0548      	lsls	r0, r1, #21
 80064ac:	f57f af38 	bpl.w	8006320 <_scanf_float+0x70>
 80064b0:	f1b9 0f00 	cmp.w	r9, #0
 80064b4:	f43f af3b 	beq.w	800632e <_scanf_float+0x7e>
 80064b8:	0588      	lsls	r0, r1, #22
 80064ba:	bf58      	it	pl
 80064bc:	9802      	ldrpl	r0, [sp, #8]
 80064be:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80064c2:	bf58      	it	pl
 80064c4:	eba9 0000 	subpl.w	r0, r9, r0
 80064c8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80064cc:	bf58      	it	pl
 80064ce:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80064d2:	6021      	str	r1, [r4, #0]
 80064d4:	f04f 0900 	mov.w	r9, #0
 80064d8:	e7ab      	b.n	8006432 <_scanf_float+0x182>
 80064da:	2203      	movs	r2, #3
 80064dc:	e7a9      	b.n	8006432 <_scanf_float+0x182>
 80064de:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80064e2:	9205      	str	r2, [sp, #20]
 80064e4:	4631      	mov	r1, r6
 80064e6:	4638      	mov	r0, r7
 80064e8:	4798      	blx	r3
 80064ea:	9a05      	ldr	r2, [sp, #20]
 80064ec:	2800      	cmp	r0, #0
 80064ee:	f43f af04 	beq.w	80062fa <_scanf_float+0x4a>
 80064f2:	e715      	b.n	8006320 <_scanf_float+0x70>
 80064f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80064f8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80064fc:	4632      	mov	r2, r6
 80064fe:	4638      	mov	r0, r7
 8006500:	4798      	blx	r3
 8006502:	6923      	ldr	r3, [r4, #16]
 8006504:	3b01      	subs	r3, #1
 8006506:	6123      	str	r3, [r4, #16]
 8006508:	e715      	b.n	8006336 <_scanf_float+0x86>
 800650a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800650e:	2b06      	cmp	r3, #6
 8006510:	d80a      	bhi.n	8006528 <_scanf_float+0x278>
 8006512:	f1bb 0f02 	cmp.w	fp, #2
 8006516:	d968      	bls.n	80065ea <_scanf_float+0x33a>
 8006518:	f1ab 0b03 	sub.w	fp, fp, #3
 800651c:	fa5f fb8b 	uxtb.w	fp, fp
 8006520:	eba5 0b0b 	sub.w	fp, r5, fp
 8006524:	455d      	cmp	r5, fp
 8006526:	d14b      	bne.n	80065c0 <_scanf_float+0x310>
 8006528:	6823      	ldr	r3, [r4, #0]
 800652a:	05da      	lsls	r2, r3, #23
 800652c:	d51f      	bpl.n	800656e <_scanf_float+0x2be>
 800652e:	055b      	lsls	r3, r3, #21
 8006530:	d468      	bmi.n	8006604 <_scanf_float+0x354>
 8006532:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006536:	6923      	ldr	r3, [r4, #16]
 8006538:	2965      	cmp	r1, #101	; 0x65
 800653a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800653e:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8006542:	6123      	str	r3, [r4, #16]
 8006544:	d00d      	beq.n	8006562 <_scanf_float+0x2b2>
 8006546:	2945      	cmp	r1, #69	; 0x45
 8006548:	d00b      	beq.n	8006562 <_scanf_float+0x2b2>
 800654a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800654e:	4632      	mov	r2, r6
 8006550:	4638      	mov	r0, r7
 8006552:	4798      	blx	r3
 8006554:	6923      	ldr	r3, [r4, #16]
 8006556:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800655a:	3b01      	subs	r3, #1
 800655c:	f1a5 0b02 	sub.w	fp, r5, #2
 8006560:	6123      	str	r3, [r4, #16]
 8006562:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006566:	4632      	mov	r2, r6
 8006568:	4638      	mov	r0, r7
 800656a:	4798      	blx	r3
 800656c:	465d      	mov	r5, fp
 800656e:	6826      	ldr	r6, [r4, #0]
 8006570:	f016 0610 	ands.w	r6, r6, #16
 8006574:	d17a      	bne.n	800666c <_scanf_float+0x3bc>
 8006576:	702e      	strb	r6, [r5, #0]
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800657e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006582:	d142      	bne.n	800660a <_scanf_float+0x35a>
 8006584:	9b02      	ldr	r3, [sp, #8]
 8006586:	eba9 0303 	sub.w	r3, r9, r3
 800658a:	425a      	negs	r2, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	d149      	bne.n	8006624 <_scanf_float+0x374>
 8006590:	2200      	movs	r2, #0
 8006592:	4641      	mov	r1, r8
 8006594:	4638      	mov	r0, r7
 8006596:	f000 ff1f 	bl	80073d8 <_strtod_r>
 800659a:	6825      	ldr	r5, [r4, #0]
 800659c:	f8da 3000 	ldr.w	r3, [sl]
 80065a0:	f015 0f02 	tst.w	r5, #2
 80065a4:	f103 0204 	add.w	r2, r3, #4
 80065a8:	ec59 8b10 	vmov	r8, r9, d0
 80065ac:	f8ca 2000 	str.w	r2, [sl]
 80065b0:	d043      	beq.n	800663a <_scanf_float+0x38a>
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	e9c3 8900 	strd	r8, r9, [r3]
 80065b8:	68e3      	ldr	r3, [r4, #12]
 80065ba:	3301      	adds	r3, #1
 80065bc:	60e3      	str	r3, [r4, #12]
 80065be:	e6be      	b.n	800633e <_scanf_float+0x8e>
 80065c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80065c8:	4632      	mov	r2, r6
 80065ca:	4638      	mov	r0, r7
 80065cc:	4798      	blx	r3
 80065ce:	6923      	ldr	r3, [r4, #16]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	6123      	str	r3, [r4, #16]
 80065d4:	e7a6      	b.n	8006524 <_scanf_float+0x274>
 80065d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065da:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80065de:	4632      	mov	r2, r6
 80065e0:	4638      	mov	r0, r7
 80065e2:	4798      	blx	r3
 80065e4:	6923      	ldr	r3, [r4, #16]
 80065e6:	3b01      	subs	r3, #1
 80065e8:	6123      	str	r3, [r4, #16]
 80065ea:	4545      	cmp	r5, r8
 80065ec:	d8f3      	bhi.n	80065d6 <_scanf_float+0x326>
 80065ee:	e6a5      	b.n	800633c <_scanf_float+0x8c>
 80065f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065f4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80065f8:	4632      	mov	r2, r6
 80065fa:	4638      	mov	r0, r7
 80065fc:	4798      	blx	r3
 80065fe:	6923      	ldr	r3, [r4, #16]
 8006600:	3b01      	subs	r3, #1
 8006602:	6123      	str	r3, [r4, #16]
 8006604:	4545      	cmp	r5, r8
 8006606:	d8f3      	bhi.n	80065f0 <_scanf_float+0x340>
 8006608:	e698      	b.n	800633c <_scanf_float+0x8c>
 800660a:	9b03      	ldr	r3, [sp, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d0bf      	beq.n	8006590 <_scanf_float+0x2e0>
 8006610:	9904      	ldr	r1, [sp, #16]
 8006612:	230a      	movs	r3, #10
 8006614:	4632      	mov	r2, r6
 8006616:	3101      	adds	r1, #1
 8006618:	4638      	mov	r0, r7
 800661a:	f000 ff69 	bl	80074f0 <_strtol_r>
 800661e:	9b03      	ldr	r3, [sp, #12]
 8006620:	9d04      	ldr	r5, [sp, #16]
 8006622:	1ac2      	subs	r2, r0, r3
 8006624:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006628:	429d      	cmp	r5, r3
 800662a:	bf28      	it	cs
 800662c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8006630:	490f      	ldr	r1, [pc, #60]	; (8006670 <_scanf_float+0x3c0>)
 8006632:	4628      	mov	r0, r5
 8006634:	f000 f8a0 	bl	8006778 <siprintf>
 8006638:	e7aa      	b.n	8006590 <_scanf_float+0x2e0>
 800663a:	f015 0504 	ands.w	r5, r5, #4
 800663e:	d1b8      	bne.n	80065b2 <_scanf_float+0x302>
 8006640:	681f      	ldr	r7, [r3, #0]
 8006642:	ee10 2a10 	vmov	r2, s0
 8006646:	464b      	mov	r3, r9
 8006648:	ee10 0a10 	vmov	r0, s0
 800664c:	4649      	mov	r1, r9
 800664e:	f7fa fa6d 	bl	8000b2c <__aeabi_dcmpun>
 8006652:	b128      	cbz	r0, 8006660 <_scanf_float+0x3b0>
 8006654:	4628      	mov	r0, r5
 8006656:	f000 f889 	bl	800676c <nanf>
 800665a:	ed87 0a00 	vstr	s0, [r7]
 800665e:	e7ab      	b.n	80065b8 <_scanf_float+0x308>
 8006660:	4640      	mov	r0, r8
 8006662:	4649      	mov	r1, r9
 8006664:	f7fa fac0 	bl	8000be8 <__aeabi_d2f>
 8006668:	6038      	str	r0, [r7, #0]
 800666a:	e7a5      	b.n	80065b8 <_scanf_float+0x308>
 800666c:	2600      	movs	r6, #0
 800666e:	e666      	b.n	800633e <_scanf_float+0x8e>
 8006670:	08009f2c 	.word	0x08009f2c

08006674 <iprintf>:
 8006674:	b40f      	push	{r0, r1, r2, r3}
 8006676:	4b0a      	ldr	r3, [pc, #40]	; (80066a0 <iprintf+0x2c>)
 8006678:	b513      	push	{r0, r1, r4, lr}
 800667a:	681c      	ldr	r4, [r3, #0]
 800667c:	b124      	cbz	r4, 8006688 <iprintf+0x14>
 800667e:	69a3      	ldr	r3, [r4, #24]
 8006680:	b913      	cbnz	r3, 8006688 <iprintf+0x14>
 8006682:	4620      	mov	r0, r4
 8006684:	f001 ff3c 	bl	8008500 <__sinit>
 8006688:	ab05      	add	r3, sp, #20
 800668a:	9a04      	ldr	r2, [sp, #16]
 800668c:	68a1      	ldr	r1, [r4, #8]
 800668e:	9301      	str	r3, [sp, #4]
 8006690:	4620      	mov	r0, r4
 8006692:	f003 f9a9 	bl	80099e8 <_vfiprintf_r>
 8006696:	b002      	add	sp, #8
 8006698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800669c:	b004      	add	sp, #16
 800669e:	4770      	bx	lr
 80066a0:	20000010 	.word	0x20000010

080066a4 <_puts_r>:
 80066a4:	b570      	push	{r4, r5, r6, lr}
 80066a6:	460e      	mov	r6, r1
 80066a8:	4605      	mov	r5, r0
 80066aa:	b118      	cbz	r0, 80066b4 <_puts_r+0x10>
 80066ac:	6983      	ldr	r3, [r0, #24]
 80066ae:	b90b      	cbnz	r3, 80066b4 <_puts_r+0x10>
 80066b0:	f001 ff26 	bl	8008500 <__sinit>
 80066b4:	69ab      	ldr	r3, [r5, #24]
 80066b6:	68ac      	ldr	r4, [r5, #8]
 80066b8:	b913      	cbnz	r3, 80066c0 <_puts_r+0x1c>
 80066ba:	4628      	mov	r0, r5
 80066bc:	f001 ff20 	bl	8008500 <__sinit>
 80066c0:	4b23      	ldr	r3, [pc, #140]	; (8006750 <_puts_r+0xac>)
 80066c2:	429c      	cmp	r4, r3
 80066c4:	d117      	bne.n	80066f6 <_puts_r+0x52>
 80066c6:	686c      	ldr	r4, [r5, #4]
 80066c8:	89a3      	ldrh	r3, [r4, #12]
 80066ca:	071b      	lsls	r3, r3, #28
 80066cc:	d51d      	bpl.n	800670a <_puts_r+0x66>
 80066ce:	6923      	ldr	r3, [r4, #16]
 80066d0:	b1db      	cbz	r3, 800670a <_puts_r+0x66>
 80066d2:	3e01      	subs	r6, #1
 80066d4:	68a3      	ldr	r3, [r4, #8]
 80066d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80066da:	3b01      	subs	r3, #1
 80066dc:	60a3      	str	r3, [r4, #8]
 80066de:	b9e9      	cbnz	r1, 800671c <_puts_r+0x78>
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	da2e      	bge.n	8006742 <_puts_r+0x9e>
 80066e4:	4622      	mov	r2, r4
 80066e6:	210a      	movs	r1, #10
 80066e8:	4628      	mov	r0, r5
 80066ea:	f000 ff13 	bl	8007514 <__swbuf_r>
 80066ee:	3001      	adds	r0, #1
 80066f0:	d011      	beq.n	8006716 <_puts_r+0x72>
 80066f2:	200a      	movs	r0, #10
 80066f4:	e011      	b.n	800671a <_puts_r+0x76>
 80066f6:	4b17      	ldr	r3, [pc, #92]	; (8006754 <_puts_r+0xb0>)
 80066f8:	429c      	cmp	r4, r3
 80066fa:	d101      	bne.n	8006700 <_puts_r+0x5c>
 80066fc:	68ac      	ldr	r4, [r5, #8]
 80066fe:	e7e3      	b.n	80066c8 <_puts_r+0x24>
 8006700:	4b15      	ldr	r3, [pc, #84]	; (8006758 <_puts_r+0xb4>)
 8006702:	429c      	cmp	r4, r3
 8006704:	bf08      	it	eq
 8006706:	68ec      	ldreq	r4, [r5, #12]
 8006708:	e7de      	b.n	80066c8 <_puts_r+0x24>
 800670a:	4621      	mov	r1, r4
 800670c:	4628      	mov	r0, r5
 800670e:	f000 ff53 	bl	80075b8 <__swsetup_r>
 8006712:	2800      	cmp	r0, #0
 8006714:	d0dd      	beq.n	80066d2 <_puts_r+0x2e>
 8006716:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800671a:	bd70      	pop	{r4, r5, r6, pc}
 800671c:	2b00      	cmp	r3, #0
 800671e:	da04      	bge.n	800672a <_puts_r+0x86>
 8006720:	69a2      	ldr	r2, [r4, #24]
 8006722:	429a      	cmp	r2, r3
 8006724:	dc06      	bgt.n	8006734 <_puts_r+0x90>
 8006726:	290a      	cmp	r1, #10
 8006728:	d004      	beq.n	8006734 <_puts_r+0x90>
 800672a:	6823      	ldr	r3, [r4, #0]
 800672c:	1c5a      	adds	r2, r3, #1
 800672e:	6022      	str	r2, [r4, #0]
 8006730:	7019      	strb	r1, [r3, #0]
 8006732:	e7cf      	b.n	80066d4 <_puts_r+0x30>
 8006734:	4622      	mov	r2, r4
 8006736:	4628      	mov	r0, r5
 8006738:	f000 feec 	bl	8007514 <__swbuf_r>
 800673c:	3001      	adds	r0, #1
 800673e:	d1c9      	bne.n	80066d4 <_puts_r+0x30>
 8006740:	e7e9      	b.n	8006716 <_puts_r+0x72>
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	200a      	movs	r0, #10
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	6022      	str	r2, [r4, #0]
 800674a:	7018      	strb	r0, [r3, #0]
 800674c:	e7e5      	b.n	800671a <_puts_r+0x76>
 800674e:	bf00      	nop
 8006750:	08009fb8 	.word	0x08009fb8
 8006754:	08009fd8 	.word	0x08009fd8
 8006758:	08009f98 	.word	0x08009f98

0800675c <puts>:
 800675c:	4b02      	ldr	r3, [pc, #8]	; (8006768 <puts+0xc>)
 800675e:	4601      	mov	r1, r0
 8006760:	6818      	ldr	r0, [r3, #0]
 8006762:	f7ff bf9f 	b.w	80066a4 <_puts_r>
 8006766:	bf00      	nop
 8006768:	20000010 	.word	0x20000010

0800676c <nanf>:
 800676c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006774 <nanf+0x8>
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	7fc00000 	.word	0x7fc00000

08006778 <siprintf>:
 8006778:	b40e      	push	{r1, r2, r3}
 800677a:	b500      	push	{lr}
 800677c:	b09c      	sub	sp, #112	; 0x70
 800677e:	ab1d      	add	r3, sp, #116	; 0x74
 8006780:	9002      	str	r0, [sp, #8]
 8006782:	9006      	str	r0, [sp, #24]
 8006784:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006788:	4809      	ldr	r0, [pc, #36]	; (80067b0 <siprintf+0x38>)
 800678a:	9107      	str	r1, [sp, #28]
 800678c:	9104      	str	r1, [sp, #16]
 800678e:	4909      	ldr	r1, [pc, #36]	; (80067b4 <siprintf+0x3c>)
 8006790:	f853 2b04 	ldr.w	r2, [r3], #4
 8006794:	9105      	str	r1, [sp, #20]
 8006796:	6800      	ldr	r0, [r0, #0]
 8006798:	9301      	str	r3, [sp, #4]
 800679a:	a902      	add	r1, sp, #8
 800679c:	f003 f802 	bl	80097a4 <_svfiprintf_r>
 80067a0:	9b02      	ldr	r3, [sp, #8]
 80067a2:	2200      	movs	r2, #0
 80067a4:	701a      	strb	r2, [r3, #0]
 80067a6:	b01c      	add	sp, #112	; 0x70
 80067a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80067ac:	b003      	add	sp, #12
 80067ae:	4770      	bx	lr
 80067b0:	20000010 	.word	0x20000010
 80067b4:	ffff0208 	.word	0xffff0208

080067b8 <sulp>:
 80067b8:	b570      	push	{r4, r5, r6, lr}
 80067ba:	4604      	mov	r4, r0
 80067bc:	460d      	mov	r5, r1
 80067be:	ec45 4b10 	vmov	d0, r4, r5
 80067c2:	4616      	mov	r6, r2
 80067c4:	f002 fdaa 	bl	800931c <__ulp>
 80067c8:	ec51 0b10 	vmov	r0, r1, d0
 80067cc:	b17e      	cbz	r6, 80067ee <sulp+0x36>
 80067ce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80067d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	dd09      	ble.n	80067ee <sulp+0x36>
 80067da:	051b      	lsls	r3, r3, #20
 80067dc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80067e0:	2400      	movs	r4, #0
 80067e2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80067e6:	4622      	mov	r2, r4
 80067e8:	462b      	mov	r3, r5
 80067ea:	f7f9 ff05 	bl	80005f8 <__aeabi_dmul>
 80067ee:	bd70      	pop	{r4, r5, r6, pc}

080067f0 <_strtod_l>:
 80067f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f4:	461f      	mov	r7, r3
 80067f6:	b0a1      	sub	sp, #132	; 0x84
 80067f8:	2300      	movs	r3, #0
 80067fa:	4681      	mov	r9, r0
 80067fc:	4638      	mov	r0, r7
 80067fe:	460e      	mov	r6, r1
 8006800:	9217      	str	r2, [sp, #92]	; 0x5c
 8006802:	931c      	str	r3, [sp, #112]	; 0x70
 8006804:	f002 fa2f 	bl	8008c66 <__localeconv_l>
 8006808:	4680      	mov	r8, r0
 800680a:	6800      	ldr	r0, [r0, #0]
 800680c:	f7f9 fce0 	bl	80001d0 <strlen>
 8006810:	f04f 0a00 	mov.w	sl, #0
 8006814:	4604      	mov	r4, r0
 8006816:	f04f 0b00 	mov.w	fp, #0
 800681a:	961b      	str	r6, [sp, #108]	; 0x6c
 800681c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800681e:	781a      	ldrb	r2, [r3, #0]
 8006820:	2a0d      	cmp	r2, #13
 8006822:	d832      	bhi.n	800688a <_strtod_l+0x9a>
 8006824:	2a09      	cmp	r2, #9
 8006826:	d236      	bcs.n	8006896 <_strtod_l+0xa6>
 8006828:	2a00      	cmp	r2, #0
 800682a:	d03e      	beq.n	80068aa <_strtod_l+0xba>
 800682c:	2300      	movs	r3, #0
 800682e:	930d      	str	r3, [sp, #52]	; 0x34
 8006830:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006832:	782b      	ldrb	r3, [r5, #0]
 8006834:	2b30      	cmp	r3, #48	; 0x30
 8006836:	f040 80ac 	bne.w	8006992 <_strtod_l+0x1a2>
 800683a:	786b      	ldrb	r3, [r5, #1]
 800683c:	2b58      	cmp	r3, #88	; 0x58
 800683e:	d001      	beq.n	8006844 <_strtod_l+0x54>
 8006840:	2b78      	cmp	r3, #120	; 0x78
 8006842:	d167      	bne.n	8006914 <_strtod_l+0x124>
 8006844:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006846:	9301      	str	r3, [sp, #4]
 8006848:	ab1c      	add	r3, sp, #112	; 0x70
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	9702      	str	r7, [sp, #8]
 800684e:	ab1d      	add	r3, sp, #116	; 0x74
 8006850:	4a88      	ldr	r2, [pc, #544]	; (8006a74 <_strtod_l+0x284>)
 8006852:	a91b      	add	r1, sp, #108	; 0x6c
 8006854:	4648      	mov	r0, r9
 8006856:	f001 ff2c 	bl	80086b2 <__gethex>
 800685a:	f010 0407 	ands.w	r4, r0, #7
 800685e:	4606      	mov	r6, r0
 8006860:	d005      	beq.n	800686e <_strtod_l+0x7e>
 8006862:	2c06      	cmp	r4, #6
 8006864:	d12b      	bne.n	80068be <_strtod_l+0xce>
 8006866:	3501      	adds	r5, #1
 8006868:	2300      	movs	r3, #0
 800686a:	951b      	str	r5, [sp, #108]	; 0x6c
 800686c:	930d      	str	r3, [sp, #52]	; 0x34
 800686e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006870:	2b00      	cmp	r3, #0
 8006872:	f040 859a 	bne.w	80073aa <_strtod_l+0xbba>
 8006876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006878:	b1e3      	cbz	r3, 80068b4 <_strtod_l+0xc4>
 800687a:	4652      	mov	r2, sl
 800687c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006880:	ec43 2b10 	vmov	d0, r2, r3
 8006884:	b021      	add	sp, #132	; 0x84
 8006886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800688a:	2a2b      	cmp	r2, #43	; 0x2b
 800688c:	d015      	beq.n	80068ba <_strtod_l+0xca>
 800688e:	2a2d      	cmp	r2, #45	; 0x2d
 8006890:	d004      	beq.n	800689c <_strtod_l+0xac>
 8006892:	2a20      	cmp	r2, #32
 8006894:	d1ca      	bne.n	800682c <_strtod_l+0x3c>
 8006896:	3301      	adds	r3, #1
 8006898:	931b      	str	r3, [sp, #108]	; 0x6c
 800689a:	e7bf      	b.n	800681c <_strtod_l+0x2c>
 800689c:	2201      	movs	r2, #1
 800689e:	920d      	str	r2, [sp, #52]	; 0x34
 80068a0:	1c5a      	adds	r2, r3, #1
 80068a2:	921b      	str	r2, [sp, #108]	; 0x6c
 80068a4:	785b      	ldrb	r3, [r3, #1]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1c2      	bne.n	8006830 <_strtod_l+0x40>
 80068aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068ac:	961b      	str	r6, [sp, #108]	; 0x6c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f040 8579 	bne.w	80073a6 <_strtod_l+0xbb6>
 80068b4:	4652      	mov	r2, sl
 80068b6:	465b      	mov	r3, fp
 80068b8:	e7e2      	b.n	8006880 <_strtod_l+0x90>
 80068ba:	2200      	movs	r2, #0
 80068bc:	e7ef      	b.n	800689e <_strtod_l+0xae>
 80068be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80068c0:	b13a      	cbz	r2, 80068d2 <_strtod_l+0xe2>
 80068c2:	2135      	movs	r1, #53	; 0x35
 80068c4:	a81e      	add	r0, sp, #120	; 0x78
 80068c6:	f002 fe21 	bl	800950c <__copybits>
 80068ca:	991c      	ldr	r1, [sp, #112]	; 0x70
 80068cc:	4648      	mov	r0, r9
 80068ce:	f002 fa8d 	bl	8008dec <_Bfree>
 80068d2:	3c01      	subs	r4, #1
 80068d4:	2c04      	cmp	r4, #4
 80068d6:	d806      	bhi.n	80068e6 <_strtod_l+0xf6>
 80068d8:	e8df f004 	tbb	[pc, r4]
 80068dc:	1714030a 	.word	0x1714030a
 80068e0:	0a          	.byte	0x0a
 80068e1:	00          	.byte	0x00
 80068e2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80068e6:	0730      	lsls	r0, r6, #28
 80068e8:	d5c1      	bpl.n	800686e <_strtod_l+0x7e>
 80068ea:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80068ee:	e7be      	b.n	800686e <_strtod_l+0x7e>
 80068f0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80068f4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80068f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80068fa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80068fe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006902:	e7f0      	b.n	80068e6 <_strtod_l+0xf6>
 8006904:	f8df b170 	ldr.w	fp, [pc, #368]	; 8006a78 <_strtod_l+0x288>
 8006908:	e7ed      	b.n	80068e6 <_strtod_l+0xf6>
 800690a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800690e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006912:	e7e8      	b.n	80068e6 <_strtod_l+0xf6>
 8006914:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006916:	1c5a      	adds	r2, r3, #1
 8006918:	921b      	str	r2, [sp, #108]	; 0x6c
 800691a:	785b      	ldrb	r3, [r3, #1]
 800691c:	2b30      	cmp	r3, #48	; 0x30
 800691e:	d0f9      	beq.n	8006914 <_strtod_l+0x124>
 8006920:	2b00      	cmp	r3, #0
 8006922:	d0a4      	beq.n	800686e <_strtod_l+0x7e>
 8006924:	2301      	movs	r3, #1
 8006926:	2500      	movs	r5, #0
 8006928:	9306      	str	r3, [sp, #24]
 800692a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800692c:	9308      	str	r3, [sp, #32]
 800692e:	9507      	str	r5, [sp, #28]
 8006930:	9505      	str	r5, [sp, #20]
 8006932:	220a      	movs	r2, #10
 8006934:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006936:	7807      	ldrb	r7, [r0, #0]
 8006938:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800693c:	b2d9      	uxtb	r1, r3
 800693e:	2909      	cmp	r1, #9
 8006940:	d929      	bls.n	8006996 <_strtod_l+0x1a6>
 8006942:	4622      	mov	r2, r4
 8006944:	f8d8 1000 	ldr.w	r1, [r8]
 8006948:	f003 f9b7 	bl	8009cba <strncmp>
 800694c:	2800      	cmp	r0, #0
 800694e:	d031      	beq.n	80069b4 <_strtod_l+0x1c4>
 8006950:	2000      	movs	r0, #0
 8006952:	9c05      	ldr	r4, [sp, #20]
 8006954:	9004      	str	r0, [sp, #16]
 8006956:	463b      	mov	r3, r7
 8006958:	4602      	mov	r2, r0
 800695a:	2b65      	cmp	r3, #101	; 0x65
 800695c:	d001      	beq.n	8006962 <_strtod_l+0x172>
 800695e:	2b45      	cmp	r3, #69	; 0x45
 8006960:	d114      	bne.n	800698c <_strtod_l+0x19c>
 8006962:	b924      	cbnz	r4, 800696e <_strtod_l+0x17e>
 8006964:	b910      	cbnz	r0, 800696c <_strtod_l+0x17c>
 8006966:	9b06      	ldr	r3, [sp, #24]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d09e      	beq.n	80068aa <_strtod_l+0xba>
 800696c:	2400      	movs	r4, #0
 800696e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006970:	1c73      	adds	r3, r6, #1
 8006972:	931b      	str	r3, [sp, #108]	; 0x6c
 8006974:	7873      	ldrb	r3, [r6, #1]
 8006976:	2b2b      	cmp	r3, #43	; 0x2b
 8006978:	d078      	beq.n	8006a6c <_strtod_l+0x27c>
 800697a:	2b2d      	cmp	r3, #45	; 0x2d
 800697c:	d070      	beq.n	8006a60 <_strtod_l+0x270>
 800697e:	f04f 0c00 	mov.w	ip, #0
 8006982:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8006986:	2f09      	cmp	r7, #9
 8006988:	d97c      	bls.n	8006a84 <_strtod_l+0x294>
 800698a:	961b      	str	r6, [sp, #108]	; 0x6c
 800698c:	f04f 0e00 	mov.w	lr, #0
 8006990:	e09a      	b.n	8006ac8 <_strtod_l+0x2d8>
 8006992:	2300      	movs	r3, #0
 8006994:	e7c7      	b.n	8006926 <_strtod_l+0x136>
 8006996:	9905      	ldr	r1, [sp, #20]
 8006998:	2908      	cmp	r1, #8
 800699a:	bfdd      	ittte	le
 800699c:	9907      	ldrle	r1, [sp, #28]
 800699e:	fb02 3301 	mlale	r3, r2, r1, r3
 80069a2:	9307      	strle	r3, [sp, #28]
 80069a4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80069a8:	9b05      	ldr	r3, [sp, #20]
 80069aa:	3001      	adds	r0, #1
 80069ac:	3301      	adds	r3, #1
 80069ae:	9305      	str	r3, [sp, #20]
 80069b0:	901b      	str	r0, [sp, #108]	; 0x6c
 80069b2:	e7bf      	b.n	8006934 <_strtod_l+0x144>
 80069b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069b6:	191a      	adds	r2, r3, r4
 80069b8:	921b      	str	r2, [sp, #108]	; 0x6c
 80069ba:	9a05      	ldr	r2, [sp, #20]
 80069bc:	5d1b      	ldrb	r3, [r3, r4]
 80069be:	2a00      	cmp	r2, #0
 80069c0:	d037      	beq.n	8006a32 <_strtod_l+0x242>
 80069c2:	9c05      	ldr	r4, [sp, #20]
 80069c4:	4602      	mov	r2, r0
 80069c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80069ca:	2909      	cmp	r1, #9
 80069cc:	d913      	bls.n	80069f6 <_strtod_l+0x206>
 80069ce:	2101      	movs	r1, #1
 80069d0:	9104      	str	r1, [sp, #16]
 80069d2:	e7c2      	b.n	800695a <_strtod_l+0x16a>
 80069d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	921b      	str	r2, [sp, #108]	; 0x6c
 80069da:	785b      	ldrb	r3, [r3, #1]
 80069dc:	3001      	adds	r0, #1
 80069de:	2b30      	cmp	r3, #48	; 0x30
 80069e0:	d0f8      	beq.n	80069d4 <_strtod_l+0x1e4>
 80069e2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80069e6:	2a08      	cmp	r2, #8
 80069e8:	f200 84e4 	bhi.w	80073b4 <_strtod_l+0xbc4>
 80069ec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80069ee:	9208      	str	r2, [sp, #32]
 80069f0:	4602      	mov	r2, r0
 80069f2:	2000      	movs	r0, #0
 80069f4:	4604      	mov	r4, r0
 80069f6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80069fa:	f100 0101 	add.w	r1, r0, #1
 80069fe:	d012      	beq.n	8006a26 <_strtod_l+0x236>
 8006a00:	440a      	add	r2, r1
 8006a02:	eb00 0c04 	add.w	ip, r0, r4
 8006a06:	4621      	mov	r1, r4
 8006a08:	270a      	movs	r7, #10
 8006a0a:	458c      	cmp	ip, r1
 8006a0c:	d113      	bne.n	8006a36 <_strtod_l+0x246>
 8006a0e:	1821      	adds	r1, r4, r0
 8006a10:	2908      	cmp	r1, #8
 8006a12:	f104 0401 	add.w	r4, r4, #1
 8006a16:	4404      	add	r4, r0
 8006a18:	dc19      	bgt.n	8006a4e <_strtod_l+0x25e>
 8006a1a:	9b07      	ldr	r3, [sp, #28]
 8006a1c:	210a      	movs	r1, #10
 8006a1e:	fb01 e303 	mla	r3, r1, r3, lr
 8006a22:	9307      	str	r3, [sp, #28]
 8006a24:	2100      	movs	r1, #0
 8006a26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a28:	1c58      	adds	r0, r3, #1
 8006a2a:	901b      	str	r0, [sp, #108]	; 0x6c
 8006a2c:	785b      	ldrb	r3, [r3, #1]
 8006a2e:	4608      	mov	r0, r1
 8006a30:	e7c9      	b.n	80069c6 <_strtod_l+0x1d6>
 8006a32:	9805      	ldr	r0, [sp, #20]
 8006a34:	e7d3      	b.n	80069de <_strtod_l+0x1ee>
 8006a36:	2908      	cmp	r1, #8
 8006a38:	f101 0101 	add.w	r1, r1, #1
 8006a3c:	dc03      	bgt.n	8006a46 <_strtod_l+0x256>
 8006a3e:	9b07      	ldr	r3, [sp, #28]
 8006a40:	437b      	muls	r3, r7
 8006a42:	9307      	str	r3, [sp, #28]
 8006a44:	e7e1      	b.n	8006a0a <_strtod_l+0x21a>
 8006a46:	2910      	cmp	r1, #16
 8006a48:	bfd8      	it	le
 8006a4a:	437d      	mulle	r5, r7
 8006a4c:	e7dd      	b.n	8006a0a <_strtod_l+0x21a>
 8006a4e:	2c10      	cmp	r4, #16
 8006a50:	bfdc      	itt	le
 8006a52:	210a      	movle	r1, #10
 8006a54:	fb01 e505 	mlale	r5, r1, r5, lr
 8006a58:	e7e4      	b.n	8006a24 <_strtod_l+0x234>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	9304      	str	r3, [sp, #16]
 8006a5e:	e781      	b.n	8006964 <_strtod_l+0x174>
 8006a60:	f04f 0c01 	mov.w	ip, #1
 8006a64:	1cb3      	adds	r3, r6, #2
 8006a66:	931b      	str	r3, [sp, #108]	; 0x6c
 8006a68:	78b3      	ldrb	r3, [r6, #2]
 8006a6a:	e78a      	b.n	8006982 <_strtod_l+0x192>
 8006a6c:	f04f 0c00 	mov.w	ip, #0
 8006a70:	e7f8      	b.n	8006a64 <_strtod_l+0x274>
 8006a72:	bf00      	nop
 8006a74:	08009f34 	.word	0x08009f34
 8006a78:	7ff00000 	.word	0x7ff00000
 8006a7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a7e:	1c5f      	adds	r7, r3, #1
 8006a80:	971b      	str	r7, [sp, #108]	; 0x6c
 8006a82:	785b      	ldrb	r3, [r3, #1]
 8006a84:	2b30      	cmp	r3, #48	; 0x30
 8006a86:	d0f9      	beq.n	8006a7c <_strtod_l+0x28c>
 8006a88:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8006a8c:	2f08      	cmp	r7, #8
 8006a8e:	f63f af7d 	bhi.w	800698c <_strtod_l+0x19c>
 8006a92:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006a96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a98:	930a      	str	r3, [sp, #40]	; 0x28
 8006a9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a9c:	1c5f      	adds	r7, r3, #1
 8006a9e:	971b      	str	r7, [sp, #108]	; 0x6c
 8006aa0:	785b      	ldrb	r3, [r3, #1]
 8006aa2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8006aa6:	f1b8 0f09 	cmp.w	r8, #9
 8006aaa:	d937      	bls.n	8006b1c <_strtod_l+0x32c>
 8006aac:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006aae:	1a7f      	subs	r7, r7, r1
 8006ab0:	2f08      	cmp	r7, #8
 8006ab2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006ab6:	dc37      	bgt.n	8006b28 <_strtod_l+0x338>
 8006ab8:	45be      	cmp	lr, r7
 8006aba:	bfa8      	it	ge
 8006abc:	46be      	movge	lr, r7
 8006abe:	f1bc 0f00 	cmp.w	ip, #0
 8006ac2:	d001      	beq.n	8006ac8 <_strtod_l+0x2d8>
 8006ac4:	f1ce 0e00 	rsb	lr, lr, #0
 8006ac8:	2c00      	cmp	r4, #0
 8006aca:	d151      	bne.n	8006b70 <_strtod_l+0x380>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	f47f aece 	bne.w	800686e <_strtod_l+0x7e>
 8006ad2:	9a06      	ldr	r2, [sp, #24]
 8006ad4:	2a00      	cmp	r2, #0
 8006ad6:	f47f aeca 	bne.w	800686e <_strtod_l+0x7e>
 8006ada:	9a04      	ldr	r2, [sp, #16]
 8006adc:	2a00      	cmp	r2, #0
 8006ade:	f47f aee4 	bne.w	80068aa <_strtod_l+0xba>
 8006ae2:	2b4e      	cmp	r3, #78	; 0x4e
 8006ae4:	d027      	beq.n	8006b36 <_strtod_l+0x346>
 8006ae6:	dc21      	bgt.n	8006b2c <_strtod_l+0x33c>
 8006ae8:	2b49      	cmp	r3, #73	; 0x49
 8006aea:	f47f aede 	bne.w	80068aa <_strtod_l+0xba>
 8006aee:	49a0      	ldr	r1, [pc, #640]	; (8006d70 <_strtod_l+0x580>)
 8006af0:	a81b      	add	r0, sp, #108	; 0x6c
 8006af2:	f002 f811 	bl	8008b18 <__match>
 8006af6:	2800      	cmp	r0, #0
 8006af8:	f43f aed7 	beq.w	80068aa <_strtod_l+0xba>
 8006afc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006afe:	499d      	ldr	r1, [pc, #628]	; (8006d74 <_strtod_l+0x584>)
 8006b00:	3b01      	subs	r3, #1
 8006b02:	a81b      	add	r0, sp, #108	; 0x6c
 8006b04:	931b      	str	r3, [sp, #108]	; 0x6c
 8006b06:	f002 f807 	bl	8008b18 <__match>
 8006b0a:	b910      	cbnz	r0, 8006b12 <_strtod_l+0x322>
 8006b0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b0e:	3301      	adds	r3, #1
 8006b10:	931b      	str	r3, [sp, #108]	; 0x6c
 8006b12:	f8df b274 	ldr.w	fp, [pc, #628]	; 8006d88 <_strtod_l+0x598>
 8006b16:	f04f 0a00 	mov.w	sl, #0
 8006b1a:	e6a8      	b.n	800686e <_strtod_l+0x7e>
 8006b1c:	210a      	movs	r1, #10
 8006b1e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006b22:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006b26:	e7b8      	b.n	8006a9a <_strtod_l+0x2aa>
 8006b28:	46be      	mov	lr, r7
 8006b2a:	e7c8      	b.n	8006abe <_strtod_l+0x2ce>
 8006b2c:	2b69      	cmp	r3, #105	; 0x69
 8006b2e:	d0de      	beq.n	8006aee <_strtod_l+0x2fe>
 8006b30:	2b6e      	cmp	r3, #110	; 0x6e
 8006b32:	f47f aeba 	bne.w	80068aa <_strtod_l+0xba>
 8006b36:	4990      	ldr	r1, [pc, #576]	; (8006d78 <_strtod_l+0x588>)
 8006b38:	a81b      	add	r0, sp, #108	; 0x6c
 8006b3a:	f001 ffed 	bl	8008b18 <__match>
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	f43f aeb3 	beq.w	80068aa <_strtod_l+0xba>
 8006b44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	2b28      	cmp	r3, #40	; 0x28
 8006b4a:	d10e      	bne.n	8006b6a <_strtod_l+0x37a>
 8006b4c:	aa1e      	add	r2, sp, #120	; 0x78
 8006b4e:	498b      	ldr	r1, [pc, #556]	; (8006d7c <_strtod_l+0x58c>)
 8006b50:	a81b      	add	r0, sp, #108	; 0x6c
 8006b52:	f001 fff5 	bl	8008b40 <__hexnan>
 8006b56:	2805      	cmp	r0, #5
 8006b58:	d107      	bne.n	8006b6a <_strtod_l+0x37a>
 8006b5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006b5c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8006b60:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006b64:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006b68:	e681      	b.n	800686e <_strtod_l+0x7e>
 8006b6a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8006d90 <_strtod_l+0x5a0>
 8006b6e:	e7d2      	b.n	8006b16 <_strtod_l+0x326>
 8006b70:	ebae 0302 	sub.w	r3, lr, r2
 8006b74:	9306      	str	r3, [sp, #24]
 8006b76:	9b05      	ldr	r3, [sp, #20]
 8006b78:	9807      	ldr	r0, [sp, #28]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	bf08      	it	eq
 8006b7e:	4623      	moveq	r3, r4
 8006b80:	2c10      	cmp	r4, #16
 8006b82:	9305      	str	r3, [sp, #20]
 8006b84:	46a0      	mov	r8, r4
 8006b86:	bfa8      	it	ge
 8006b88:	f04f 0810 	movge.w	r8, #16
 8006b8c:	f7f9 fcba 	bl	8000504 <__aeabi_ui2d>
 8006b90:	2c09      	cmp	r4, #9
 8006b92:	4682      	mov	sl, r0
 8006b94:	468b      	mov	fp, r1
 8006b96:	dc13      	bgt.n	8006bc0 <_strtod_l+0x3d0>
 8006b98:	9b06      	ldr	r3, [sp, #24]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f43f ae67 	beq.w	800686e <_strtod_l+0x7e>
 8006ba0:	9b06      	ldr	r3, [sp, #24]
 8006ba2:	dd7a      	ble.n	8006c9a <_strtod_l+0x4aa>
 8006ba4:	2b16      	cmp	r3, #22
 8006ba6:	dc61      	bgt.n	8006c6c <_strtod_l+0x47c>
 8006ba8:	4a75      	ldr	r2, [pc, #468]	; (8006d80 <_strtod_l+0x590>)
 8006baa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8006bae:	e9de 0100 	ldrd	r0, r1, [lr]
 8006bb2:	4652      	mov	r2, sl
 8006bb4:	465b      	mov	r3, fp
 8006bb6:	f7f9 fd1f 	bl	80005f8 <__aeabi_dmul>
 8006bba:	4682      	mov	sl, r0
 8006bbc:	468b      	mov	fp, r1
 8006bbe:	e656      	b.n	800686e <_strtod_l+0x7e>
 8006bc0:	4b6f      	ldr	r3, [pc, #444]	; (8006d80 <_strtod_l+0x590>)
 8006bc2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006bc6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006bca:	f7f9 fd15 	bl	80005f8 <__aeabi_dmul>
 8006bce:	4606      	mov	r6, r0
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	460f      	mov	r7, r1
 8006bd4:	f7f9 fc96 	bl	8000504 <__aeabi_ui2d>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	4630      	mov	r0, r6
 8006bde:	4639      	mov	r1, r7
 8006be0:	f7f9 fb54 	bl	800028c <__adddf3>
 8006be4:	2c0f      	cmp	r4, #15
 8006be6:	4682      	mov	sl, r0
 8006be8:	468b      	mov	fp, r1
 8006bea:	ddd5      	ble.n	8006b98 <_strtod_l+0x3a8>
 8006bec:	9b06      	ldr	r3, [sp, #24]
 8006bee:	eba4 0808 	sub.w	r8, r4, r8
 8006bf2:	4498      	add	r8, r3
 8006bf4:	f1b8 0f00 	cmp.w	r8, #0
 8006bf8:	f340 8096 	ble.w	8006d28 <_strtod_l+0x538>
 8006bfc:	f018 030f 	ands.w	r3, r8, #15
 8006c00:	d00a      	beq.n	8006c18 <_strtod_l+0x428>
 8006c02:	495f      	ldr	r1, [pc, #380]	; (8006d80 <_strtod_l+0x590>)
 8006c04:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c08:	4652      	mov	r2, sl
 8006c0a:	465b      	mov	r3, fp
 8006c0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c10:	f7f9 fcf2 	bl	80005f8 <__aeabi_dmul>
 8006c14:	4682      	mov	sl, r0
 8006c16:	468b      	mov	fp, r1
 8006c18:	f038 080f 	bics.w	r8, r8, #15
 8006c1c:	d073      	beq.n	8006d06 <_strtod_l+0x516>
 8006c1e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006c22:	dd47      	ble.n	8006cb4 <_strtod_l+0x4c4>
 8006c24:	2400      	movs	r4, #0
 8006c26:	46a0      	mov	r8, r4
 8006c28:	9407      	str	r4, [sp, #28]
 8006c2a:	9405      	str	r4, [sp, #20]
 8006c2c:	2322      	movs	r3, #34	; 0x22
 8006c2e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8006d88 <_strtod_l+0x598>
 8006c32:	f8c9 3000 	str.w	r3, [r9]
 8006c36:	f04f 0a00 	mov.w	sl, #0
 8006c3a:	9b07      	ldr	r3, [sp, #28]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f43f ae16 	beq.w	800686e <_strtod_l+0x7e>
 8006c42:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006c44:	4648      	mov	r0, r9
 8006c46:	f002 f8d1 	bl	8008dec <_Bfree>
 8006c4a:	9905      	ldr	r1, [sp, #20]
 8006c4c:	4648      	mov	r0, r9
 8006c4e:	f002 f8cd 	bl	8008dec <_Bfree>
 8006c52:	4641      	mov	r1, r8
 8006c54:	4648      	mov	r0, r9
 8006c56:	f002 f8c9 	bl	8008dec <_Bfree>
 8006c5a:	9907      	ldr	r1, [sp, #28]
 8006c5c:	4648      	mov	r0, r9
 8006c5e:	f002 f8c5 	bl	8008dec <_Bfree>
 8006c62:	4621      	mov	r1, r4
 8006c64:	4648      	mov	r0, r9
 8006c66:	f002 f8c1 	bl	8008dec <_Bfree>
 8006c6a:	e600      	b.n	800686e <_strtod_l+0x7e>
 8006c6c:	9a06      	ldr	r2, [sp, #24]
 8006c6e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006c72:	4293      	cmp	r3, r2
 8006c74:	dbba      	blt.n	8006bec <_strtod_l+0x3fc>
 8006c76:	4d42      	ldr	r5, [pc, #264]	; (8006d80 <_strtod_l+0x590>)
 8006c78:	f1c4 040f 	rsb	r4, r4, #15
 8006c7c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006c80:	4652      	mov	r2, sl
 8006c82:	465b      	mov	r3, fp
 8006c84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c88:	f7f9 fcb6 	bl	80005f8 <__aeabi_dmul>
 8006c8c:	9b06      	ldr	r3, [sp, #24]
 8006c8e:	1b1c      	subs	r4, r3, r4
 8006c90:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006c94:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c98:	e78d      	b.n	8006bb6 <_strtod_l+0x3c6>
 8006c9a:	f113 0f16 	cmn.w	r3, #22
 8006c9e:	dba5      	blt.n	8006bec <_strtod_l+0x3fc>
 8006ca0:	4a37      	ldr	r2, [pc, #220]	; (8006d80 <_strtod_l+0x590>)
 8006ca2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8006ca6:	e9d2 2300 	ldrd	r2, r3, [r2]
 8006caa:	4650      	mov	r0, sl
 8006cac:	4659      	mov	r1, fp
 8006cae:	f7f9 fdcd 	bl	800084c <__aeabi_ddiv>
 8006cb2:	e782      	b.n	8006bba <_strtod_l+0x3ca>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	4e33      	ldr	r6, [pc, #204]	; (8006d84 <_strtod_l+0x594>)
 8006cb8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006cbc:	4650      	mov	r0, sl
 8006cbe:	4659      	mov	r1, fp
 8006cc0:	461d      	mov	r5, r3
 8006cc2:	f1b8 0f01 	cmp.w	r8, #1
 8006cc6:	dc21      	bgt.n	8006d0c <_strtod_l+0x51c>
 8006cc8:	b10b      	cbz	r3, 8006cce <_strtod_l+0x4de>
 8006cca:	4682      	mov	sl, r0
 8006ccc:	468b      	mov	fp, r1
 8006cce:	4b2d      	ldr	r3, [pc, #180]	; (8006d84 <_strtod_l+0x594>)
 8006cd0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006cd4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006cd8:	4652      	mov	r2, sl
 8006cda:	465b      	mov	r3, fp
 8006cdc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006ce0:	f7f9 fc8a 	bl	80005f8 <__aeabi_dmul>
 8006ce4:	4b28      	ldr	r3, [pc, #160]	; (8006d88 <_strtod_l+0x598>)
 8006ce6:	460a      	mov	r2, r1
 8006ce8:	400b      	ands	r3, r1
 8006cea:	4928      	ldr	r1, [pc, #160]	; (8006d8c <_strtod_l+0x59c>)
 8006cec:	428b      	cmp	r3, r1
 8006cee:	4682      	mov	sl, r0
 8006cf0:	d898      	bhi.n	8006c24 <_strtod_l+0x434>
 8006cf2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006cf6:	428b      	cmp	r3, r1
 8006cf8:	bf86      	itte	hi
 8006cfa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006d94 <_strtod_l+0x5a4>
 8006cfe:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8006d02:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006d06:	2300      	movs	r3, #0
 8006d08:	9304      	str	r3, [sp, #16]
 8006d0a:	e077      	b.n	8006dfc <_strtod_l+0x60c>
 8006d0c:	f018 0f01 	tst.w	r8, #1
 8006d10:	d006      	beq.n	8006d20 <_strtod_l+0x530>
 8006d12:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8006d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1a:	f7f9 fc6d 	bl	80005f8 <__aeabi_dmul>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	3501      	adds	r5, #1
 8006d22:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006d26:	e7cc      	b.n	8006cc2 <_strtod_l+0x4d2>
 8006d28:	d0ed      	beq.n	8006d06 <_strtod_l+0x516>
 8006d2a:	f1c8 0800 	rsb	r8, r8, #0
 8006d2e:	f018 020f 	ands.w	r2, r8, #15
 8006d32:	d00a      	beq.n	8006d4a <_strtod_l+0x55a>
 8006d34:	4b12      	ldr	r3, [pc, #72]	; (8006d80 <_strtod_l+0x590>)
 8006d36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d3a:	4650      	mov	r0, sl
 8006d3c:	4659      	mov	r1, fp
 8006d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d42:	f7f9 fd83 	bl	800084c <__aeabi_ddiv>
 8006d46:	4682      	mov	sl, r0
 8006d48:	468b      	mov	fp, r1
 8006d4a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006d4e:	d0da      	beq.n	8006d06 <_strtod_l+0x516>
 8006d50:	f1b8 0f1f 	cmp.w	r8, #31
 8006d54:	dd20      	ble.n	8006d98 <_strtod_l+0x5a8>
 8006d56:	2400      	movs	r4, #0
 8006d58:	46a0      	mov	r8, r4
 8006d5a:	9407      	str	r4, [sp, #28]
 8006d5c:	9405      	str	r4, [sp, #20]
 8006d5e:	2322      	movs	r3, #34	; 0x22
 8006d60:	f04f 0a00 	mov.w	sl, #0
 8006d64:	f04f 0b00 	mov.w	fp, #0
 8006d68:	f8c9 3000 	str.w	r3, [r9]
 8006d6c:	e765      	b.n	8006c3a <_strtod_l+0x44a>
 8006d6e:	bf00      	nop
 8006d70:	08009efd 	.word	0x08009efd
 8006d74:	08009f8b 	.word	0x08009f8b
 8006d78:	08009f05 	.word	0x08009f05
 8006d7c:	08009f48 	.word	0x08009f48
 8006d80:	0800a030 	.word	0x0800a030
 8006d84:	0800a008 	.word	0x0800a008
 8006d88:	7ff00000 	.word	0x7ff00000
 8006d8c:	7ca00000 	.word	0x7ca00000
 8006d90:	fff80000 	.word	0xfff80000
 8006d94:	7fefffff 	.word	0x7fefffff
 8006d98:	f018 0310 	ands.w	r3, r8, #16
 8006d9c:	bf18      	it	ne
 8006d9e:	236a      	movne	r3, #106	; 0x6a
 8006da0:	4da0      	ldr	r5, [pc, #640]	; (8007024 <_strtod_l+0x834>)
 8006da2:	9304      	str	r3, [sp, #16]
 8006da4:	4650      	mov	r0, sl
 8006da6:	4659      	mov	r1, fp
 8006da8:	2300      	movs	r3, #0
 8006daa:	f1b8 0f00 	cmp.w	r8, #0
 8006dae:	f300 810a 	bgt.w	8006fc6 <_strtod_l+0x7d6>
 8006db2:	b10b      	cbz	r3, 8006db8 <_strtod_l+0x5c8>
 8006db4:	4682      	mov	sl, r0
 8006db6:	468b      	mov	fp, r1
 8006db8:	9b04      	ldr	r3, [sp, #16]
 8006dba:	b1bb      	cbz	r3, 8006dec <_strtod_l+0x5fc>
 8006dbc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006dc0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	4659      	mov	r1, fp
 8006dc8:	dd10      	ble.n	8006dec <_strtod_l+0x5fc>
 8006dca:	2b1f      	cmp	r3, #31
 8006dcc:	f340 8107 	ble.w	8006fde <_strtod_l+0x7ee>
 8006dd0:	2b34      	cmp	r3, #52	; 0x34
 8006dd2:	bfde      	ittt	le
 8006dd4:	3b20      	suble	r3, #32
 8006dd6:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8006dda:	fa02 f303 	lslle.w	r3, r2, r3
 8006dde:	f04f 0a00 	mov.w	sl, #0
 8006de2:	bfcc      	ite	gt
 8006de4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006de8:	ea03 0b01 	andle.w	fp, r3, r1
 8006dec:	2200      	movs	r2, #0
 8006dee:	2300      	movs	r3, #0
 8006df0:	4650      	mov	r0, sl
 8006df2:	4659      	mov	r1, fp
 8006df4:	f7f9 fe68 	bl	8000ac8 <__aeabi_dcmpeq>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	d1ac      	bne.n	8006d56 <_strtod_l+0x566>
 8006dfc:	9b07      	ldr	r3, [sp, #28]
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	9a05      	ldr	r2, [sp, #20]
 8006e02:	9908      	ldr	r1, [sp, #32]
 8006e04:	4623      	mov	r3, r4
 8006e06:	4648      	mov	r0, r9
 8006e08:	f002 f842 	bl	8008e90 <__s2b>
 8006e0c:	9007      	str	r0, [sp, #28]
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	f43f af08 	beq.w	8006c24 <_strtod_l+0x434>
 8006e14:	9a06      	ldr	r2, [sp, #24]
 8006e16:	9b06      	ldr	r3, [sp, #24]
 8006e18:	2a00      	cmp	r2, #0
 8006e1a:	f1c3 0300 	rsb	r3, r3, #0
 8006e1e:	bfa8      	it	ge
 8006e20:	2300      	movge	r3, #0
 8006e22:	930e      	str	r3, [sp, #56]	; 0x38
 8006e24:	2400      	movs	r4, #0
 8006e26:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006e2a:	9316      	str	r3, [sp, #88]	; 0x58
 8006e2c:	46a0      	mov	r8, r4
 8006e2e:	9b07      	ldr	r3, [sp, #28]
 8006e30:	4648      	mov	r0, r9
 8006e32:	6859      	ldr	r1, [r3, #4]
 8006e34:	f001 ffa6 	bl	8008d84 <_Balloc>
 8006e38:	9005      	str	r0, [sp, #20]
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	f43f aef6 	beq.w	8006c2c <_strtod_l+0x43c>
 8006e40:	9b07      	ldr	r3, [sp, #28]
 8006e42:	691a      	ldr	r2, [r3, #16]
 8006e44:	3202      	adds	r2, #2
 8006e46:	f103 010c 	add.w	r1, r3, #12
 8006e4a:	0092      	lsls	r2, r2, #2
 8006e4c:	300c      	adds	r0, #12
 8006e4e:	f7fe fdbf 	bl	80059d0 <memcpy>
 8006e52:	aa1e      	add	r2, sp, #120	; 0x78
 8006e54:	a91d      	add	r1, sp, #116	; 0x74
 8006e56:	ec4b ab10 	vmov	d0, sl, fp
 8006e5a:	4648      	mov	r0, r9
 8006e5c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006e60:	f002 fad2 	bl	8009408 <__d2b>
 8006e64:	901c      	str	r0, [sp, #112]	; 0x70
 8006e66:	2800      	cmp	r0, #0
 8006e68:	f43f aee0 	beq.w	8006c2c <_strtod_l+0x43c>
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	4648      	mov	r0, r9
 8006e70:	f002 f89a 	bl	8008fa8 <__i2b>
 8006e74:	4680      	mov	r8, r0
 8006e76:	2800      	cmp	r0, #0
 8006e78:	f43f aed8 	beq.w	8006c2c <_strtod_l+0x43c>
 8006e7c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006e7e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006e80:	2e00      	cmp	r6, #0
 8006e82:	bfab      	itete	ge
 8006e84:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006e86:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006e88:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006e8a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8006e8c:	bfac      	ite	ge
 8006e8e:	18f7      	addge	r7, r6, r3
 8006e90:	1b9d      	sublt	r5, r3, r6
 8006e92:	9b04      	ldr	r3, [sp, #16]
 8006e94:	1af6      	subs	r6, r6, r3
 8006e96:	4416      	add	r6, r2
 8006e98:	4b63      	ldr	r3, [pc, #396]	; (8007028 <_strtod_l+0x838>)
 8006e9a:	3e01      	subs	r6, #1
 8006e9c:	429e      	cmp	r6, r3
 8006e9e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006ea2:	f280 80af 	bge.w	8007004 <_strtod_l+0x814>
 8006ea6:	1b9b      	subs	r3, r3, r6
 8006ea8:	2b1f      	cmp	r3, #31
 8006eaa:	eba2 0203 	sub.w	r2, r2, r3
 8006eae:	f04f 0101 	mov.w	r1, #1
 8006eb2:	f300 809b 	bgt.w	8006fec <_strtod_l+0x7fc>
 8006eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eba:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8006ec0:	18be      	adds	r6, r7, r2
 8006ec2:	9b04      	ldr	r3, [sp, #16]
 8006ec4:	42b7      	cmp	r7, r6
 8006ec6:	4415      	add	r5, r2
 8006ec8:	441d      	add	r5, r3
 8006eca:	463b      	mov	r3, r7
 8006ecc:	bfa8      	it	ge
 8006ece:	4633      	movge	r3, r6
 8006ed0:	42ab      	cmp	r3, r5
 8006ed2:	bfa8      	it	ge
 8006ed4:	462b      	movge	r3, r5
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	bfc2      	ittt	gt
 8006eda:	1af6      	subgt	r6, r6, r3
 8006edc:	1aed      	subgt	r5, r5, r3
 8006ede:	1aff      	subgt	r7, r7, r3
 8006ee0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ee2:	b1bb      	cbz	r3, 8006f14 <_strtod_l+0x724>
 8006ee4:	4641      	mov	r1, r8
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	4648      	mov	r0, r9
 8006eea:	f002 f8fd 	bl	80090e8 <__pow5mult>
 8006eee:	4680      	mov	r8, r0
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	f43f ae9b 	beq.w	8006c2c <_strtod_l+0x43c>
 8006ef6:	4601      	mov	r1, r0
 8006ef8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006efa:	4648      	mov	r0, r9
 8006efc:	f002 f85d 	bl	8008fba <__multiply>
 8006f00:	900c      	str	r0, [sp, #48]	; 0x30
 8006f02:	2800      	cmp	r0, #0
 8006f04:	f43f ae92 	beq.w	8006c2c <_strtod_l+0x43c>
 8006f08:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006f0a:	4648      	mov	r0, r9
 8006f0c:	f001 ff6e 	bl	8008dec <_Bfree>
 8006f10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f12:	931c      	str	r3, [sp, #112]	; 0x70
 8006f14:	2e00      	cmp	r6, #0
 8006f16:	dc7a      	bgt.n	800700e <_strtod_l+0x81e>
 8006f18:	9b06      	ldr	r3, [sp, #24]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	dd08      	ble.n	8006f30 <_strtod_l+0x740>
 8006f1e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006f20:	9905      	ldr	r1, [sp, #20]
 8006f22:	4648      	mov	r0, r9
 8006f24:	f002 f8e0 	bl	80090e8 <__pow5mult>
 8006f28:	9005      	str	r0, [sp, #20]
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	f43f ae7e 	beq.w	8006c2c <_strtod_l+0x43c>
 8006f30:	2d00      	cmp	r5, #0
 8006f32:	dd08      	ble.n	8006f46 <_strtod_l+0x756>
 8006f34:	462a      	mov	r2, r5
 8006f36:	9905      	ldr	r1, [sp, #20]
 8006f38:	4648      	mov	r0, r9
 8006f3a:	f002 f923 	bl	8009184 <__lshift>
 8006f3e:	9005      	str	r0, [sp, #20]
 8006f40:	2800      	cmp	r0, #0
 8006f42:	f43f ae73 	beq.w	8006c2c <_strtod_l+0x43c>
 8006f46:	2f00      	cmp	r7, #0
 8006f48:	dd08      	ble.n	8006f5c <_strtod_l+0x76c>
 8006f4a:	4641      	mov	r1, r8
 8006f4c:	463a      	mov	r2, r7
 8006f4e:	4648      	mov	r0, r9
 8006f50:	f002 f918 	bl	8009184 <__lshift>
 8006f54:	4680      	mov	r8, r0
 8006f56:	2800      	cmp	r0, #0
 8006f58:	f43f ae68 	beq.w	8006c2c <_strtod_l+0x43c>
 8006f5c:	9a05      	ldr	r2, [sp, #20]
 8006f5e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006f60:	4648      	mov	r0, r9
 8006f62:	f002 f97d 	bl	8009260 <__mdiff>
 8006f66:	4604      	mov	r4, r0
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	f43f ae5f 	beq.w	8006c2c <_strtod_l+0x43c>
 8006f6e:	68c3      	ldr	r3, [r0, #12]
 8006f70:	930c      	str	r3, [sp, #48]	; 0x30
 8006f72:	2300      	movs	r3, #0
 8006f74:	60c3      	str	r3, [r0, #12]
 8006f76:	4641      	mov	r1, r8
 8006f78:	f002 f958 	bl	800922c <__mcmp>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	da55      	bge.n	800702c <_strtod_l+0x83c>
 8006f80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f82:	b9e3      	cbnz	r3, 8006fbe <_strtod_l+0x7ce>
 8006f84:	f1ba 0f00 	cmp.w	sl, #0
 8006f88:	d119      	bne.n	8006fbe <_strtod_l+0x7ce>
 8006f8a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f8e:	b9b3      	cbnz	r3, 8006fbe <_strtod_l+0x7ce>
 8006f90:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f94:	0d1b      	lsrs	r3, r3, #20
 8006f96:	051b      	lsls	r3, r3, #20
 8006f98:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006f9c:	d90f      	bls.n	8006fbe <_strtod_l+0x7ce>
 8006f9e:	6963      	ldr	r3, [r4, #20]
 8006fa0:	b913      	cbnz	r3, 8006fa8 <_strtod_l+0x7b8>
 8006fa2:	6923      	ldr	r3, [r4, #16]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	dd0a      	ble.n	8006fbe <_strtod_l+0x7ce>
 8006fa8:	4621      	mov	r1, r4
 8006faa:	2201      	movs	r2, #1
 8006fac:	4648      	mov	r0, r9
 8006fae:	f002 f8e9 	bl	8009184 <__lshift>
 8006fb2:	4641      	mov	r1, r8
 8006fb4:	4604      	mov	r4, r0
 8006fb6:	f002 f939 	bl	800922c <__mcmp>
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	dc67      	bgt.n	800708e <_strtod_l+0x89e>
 8006fbe:	9b04      	ldr	r3, [sp, #16]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d171      	bne.n	80070a8 <_strtod_l+0x8b8>
 8006fc4:	e63d      	b.n	8006c42 <_strtod_l+0x452>
 8006fc6:	f018 0f01 	tst.w	r8, #1
 8006fca:	d004      	beq.n	8006fd6 <_strtod_l+0x7e6>
 8006fcc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006fd0:	f7f9 fb12 	bl	80005f8 <__aeabi_dmul>
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006fda:	3508      	adds	r5, #8
 8006fdc:	e6e5      	b.n	8006daa <_strtod_l+0x5ba>
 8006fde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe6:	ea03 0a0a 	and.w	sl, r3, sl
 8006fea:	e6ff      	b.n	8006dec <_strtod_l+0x5fc>
 8006fec:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006ff0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006ff4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006ff8:	36e2      	adds	r6, #226	; 0xe2
 8006ffa:	fa01 f306 	lsl.w	r3, r1, r6
 8006ffe:	930a      	str	r3, [sp, #40]	; 0x28
 8007000:	910f      	str	r1, [sp, #60]	; 0x3c
 8007002:	e75d      	b.n	8006ec0 <_strtod_l+0x6d0>
 8007004:	2300      	movs	r3, #0
 8007006:	930a      	str	r3, [sp, #40]	; 0x28
 8007008:	2301      	movs	r3, #1
 800700a:	930f      	str	r3, [sp, #60]	; 0x3c
 800700c:	e758      	b.n	8006ec0 <_strtod_l+0x6d0>
 800700e:	4632      	mov	r2, r6
 8007010:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007012:	4648      	mov	r0, r9
 8007014:	f002 f8b6 	bl	8009184 <__lshift>
 8007018:	901c      	str	r0, [sp, #112]	; 0x70
 800701a:	2800      	cmp	r0, #0
 800701c:	f47f af7c 	bne.w	8006f18 <_strtod_l+0x728>
 8007020:	e604      	b.n	8006c2c <_strtod_l+0x43c>
 8007022:	bf00      	nop
 8007024:	08009f60 	.word	0x08009f60
 8007028:	fffffc02 	.word	0xfffffc02
 800702c:	465d      	mov	r5, fp
 800702e:	f040 8086 	bne.w	800713e <_strtod_l+0x94e>
 8007032:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007034:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007038:	b32a      	cbz	r2, 8007086 <_strtod_l+0x896>
 800703a:	4aaf      	ldr	r2, [pc, #700]	; (80072f8 <_strtod_l+0xb08>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d153      	bne.n	80070e8 <_strtod_l+0x8f8>
 8007040:	9b04      	ldr	r3, [sp, #16]
 8007042:	4650      	mov	r0, sl
 8007044:	b1d3      	cbz	r3, 800707c <_strtod_l+0x88c>
 8007046:	4aad      	ldr	r2, [pc, #692]	; (80072fc <_strtod_l+0xb0c>)
 8007048:	402a      	ands	r2, r5
 800704a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800704e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007052:	d816      	bhi.n	8007082 <_strtod_l+0x892>
 8007054:	0d12      	lsrs	r2, r2, #20
 8007056:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800705a:	fa01 f303 	lsl.w	r3, r1, r3
 800705e:	4298      	cmp	r0, r3
 8007060:	d142      	bne.n	80070e8 <_strtod_l+0x8f8>
 8007062:	4ba7      	ldr	r3, [pc, #668]	; (8007300 <_strtod_l+0xb10>)
 8007064:	429d      	cmp	r5, r3
 8007066:	d102      	bne.n	800706e <_strtod_l+0x87e>
 8007068:	3001      	adds	r0, #1
 800706a:	f43f addf 	beq.w	8006c2c <_strtod_l+0x43c>
 800706e:	4ba3      	ldr	r3, [pc, #652]	; (80072fc <_strtod_l+0xb0c>)
 8007070:	402b      	ands	r3, r5
 8007072:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007076:	f04f 0a00 	mov.w	sl, #0
 800707a:	e7a0      	b.n	8006fbe <_strtod_l+0x7ce>
 800707c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007080:	e7ed      	b.n	800705e <_strtod_l+0x86e>
 8007082:	460b      	mov	r3, r1
 8007084:	e7eb      	b.n	800705e <_strtod_l+0x86e>
 8007086:	bb7b      	cbnz	r3, 80070e8 <_strtod_l+0x8f8>
 8007088:	f1ba 0f00 	cmp.w	sl, #0
 800708c:	d12c      	bne.n	80070e8 <_strtod_l+0x8f8>
 800708e:	9904      	ldr	r1, [sp, #16]
 8007090:	4a9a      	ldr	r2, [pc, #616]	; (80072fc <_strtod_l+0xb0c>)
 8007092:	465b      	mov	r3, fp
 8007094:	b1f1      	cbz	r1, 80070d4 <_strtod_l+0x8e4>
 8007096:	ea02 010b 	and.w	r1, r2, fp
 800709a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800709e:	dc19      	bgt.n	80070d4 <_strtod_l+0x8e4>
 80070a0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80070a4:	f77f ae5b 	ble.w	8006d5e <_strtod_l+0x56e>
 80070a8:	4a96      	ldr	r2, [pc, #600]	; (8007304 <_strtod_l+0xb14>)
 80070aa:	2300      	movs	r3, #0
 80070ac:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80070b0:	4650      	mov	r0, sl
 80070b2:	4659      	mov	r1, fp
 80070b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80070b8:	f7f9 fa9e 	bl	80005f8 <__aeabi_dmul>
 80070bc:	4682      	mov	sl, r0
 80070be:	468b      	mov	fp, r1
 80070c0:	2900      	cmp	r1, #0
 80070c2:	f47f adbe 	bne.w	8006c42 <_strtod_l+0x452>
 80070c6:	2800      	cmp	r0, #0
 80070c8:	f47f adbb 	bne.w	8006c42 <_strtod_l+0x452>
 80070cc:	2322      	movs	r3, #34	; 0x22
 80070ce:	f8c9 3000 	str.w	r3, [r9]
 80070d2:	e5b6      	b.n	8006c42 <_strtod_l+0x452>
 80070d4:	4013      	ands	r3, r2
 80070d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80070da:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80070de:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80070e2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80070e6:	e76a      	b.n	8006fbe <_strtod_l+0x7ce>
 80070e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ea:	b193      	cbz	r3, 8007112 <_strtod_l+0x922>
 80070ec:	422b      	tst	r3, r5
 80070ee:	f43f af66 	beq.w	8006fbe <_strtod_l+0x7ce>
 80070f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070f4:	9a04      	ldr	r2, [sp, #16]
 80070f6:	4650      	mov	r0, sl
 80070f8:	4659      	mov	r1, fp
 80070fa:	b173      	cbz	r3, 800711a <_strtod_l+0x92a>
 80070fc:	f7ff fb5c 	bl	80067b8 <sulp>
 8007100:	4602      	mov	r2, r0
 8007102:	460b      	mov	r3, r1
 8007104:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007108:	f7f9 f8c0 	bl	800028c <__adddf3>
 800710c:	4682      	mov	sl, r0
 800710e:	468b      	mov	fp, r1
 8007110:	e755      	b.n	8006fbe <_strtod_l+0x7ce>
 8007112:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007114:	ea13 0f0a 	tst.w	r3, sl
 8007118:	e7e9      	b.n	80070ee <_strtod_l+0x8fe>
 800711a:	f7ff fb4d 	bl	80067b8 <sulp>
 800711e:	4602      	mov	r2, r0
 8007120:	460b      	mov	r3, r1
 8007122:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007126:	f7f9 f8af 	bl	8000288 <__aeabi_dsub>
 800712a:	2200      	movs	r2, #0
 800712c:	2300      	movs	r3, #0
 800712e:	4682      	mov	sl, r0
 8007130:	468b      	mov	fp, r1
 8007132:	f7f9 fcc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007136:	2800      	cmp	r0, #0
 8007138:	f47f ae11 	bne.w	8006d5e <_strtod_l+0x56e>
 800713c:	e73f      	b.n	8006fbe <_strtod_l+0x7ce>
 800713e:	4641      	mov	r1, r8
 8007140:	4620      	mov	r0, r4
 8007142:	f002 f9b0 	bl	80094a6 <__ratio>
 8007146:	ec57 6b10 	vmov	r6, r7, d0
 800714a:	2200      	movs	r2, #0
 800714c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007150:	ee10 0a10 	vmov	r0, s0
 8007154:	4639      	mov	r1, r7
 8007156:	f7f9 fccb 	bl	8000af0 <__aeabi_dcmple>
 800715a:	2800      	cmp	r0, #0
 800715c:	d077      	beq.n	800724e <_strtod_l+0xa5e>
 800715e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007160:	2b00      	cmp	r3, #0
 8007162:	d04a      	beq.n	80071fa <_strtod_l+0xa0a>
 8007164:	4b68      	ldr	r3, [pc, #416]	; (8007308 <_strtod_l+0xb18>)
 8007166:	2200      	movs	r2, #0
 8007168:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800716c:	4f66      	ldr	r7, [pc, #408]	; (8007308 <_strtod_l+0xb18>)
 800716e:	2600      	movs	r6, #0
 8007170:	4b62      	ldr	r3, [pc, #392]	; (80072fc <_strtod_l+0xb0c>)
 8007172:	402b      	ands	r3, r5
 8007174:	930f      	str	r3, [sp, #60]	; 0x3c
 8007176:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007178:	4b64      	ldr	r3, [pc, #400]	; (800730c <_strtod_l+0xb1c>)
 800717a:	429a      	cmp	r2, r3
 800717c:	f040 80ce 	bne.w	800731c <_strtod_l+0xb2c>
 8007180:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007184:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007188:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800718c:	ec4b ab10 	vmov	d0, sl, fp
 8007190:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007194:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007198:	f002 f8c0 	bl	800931c <__ulp>
 800719c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80071a0:	ec53 2b10 	vmov	r2, r3, d0
 80071a4:	f7f9 fa28 	bl	80005f8 <__aeabi_dmul>
 80071a8:	4652      	mov	r2, sl
 80071aa:	465b      	mov	r3, fp
 80071ac:	f7f9 f86e 	bl	800028c <__adddf3>
 80071b0:	460b      	mov	r3, r1
 80071b2:	4952      	ldr	r1, [pc, #328]	; (80072fc <_strtod_l+0xb0c>)
 80071b4:	4a56      	ldr	r2, [pc, #344]	; (8007310 <_strtod_l+0xb20>)
 80071b6:	4019      	ands	r1, r3
 80071b8:	4291      	cmp	r1, r2
 80071ba:	4682      	mov	sl, r0
 80071bc:	d95b      	bls.n	8007276 <_strtod_l+0xa86>
 80071be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071c0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d103      	bne.n	80071d0 <_strtod_l+0x9e0>
 80071c8:	9b08      	ldr	r3, [sp, #32]
 80071ca:	3301      	adds	r3, #1
 80071cc:	f43f ad2e 	beq.w	8006c2c <_strtod_l+0x43c>
 80071d0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007300 <_strtod_l+0xb10>
 80071d4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80071d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80071da:	4648      	mov	r0, r9
 80071dc:	f001 fe06 	bl	8008dec <_Bfree>
 80071e0:	9905      	ldr	r1, [sp, #20]
 80071e2:	4648      	mov	r0, r9
 80071e4:	f001 fe02 	bl	8008dec <_Bfree>
 80071e8:	4641      	mov	r1, r8
 80071ea:	4648      	mov	r0, r9
 80071ec:	f001 fdfe 	bl	8008dec <_Bfree>
 80071f0:	4621      	mov	r1, r4
 80071f2:	4648      	mov	r0, r9
 80071f4:	f001 fdfa 	bl	8008dec <_Bfree>
 80071f8:	e619      	b.n	8006e2e <_strtod_l+0x63e>
 80071fa:	f1ba 0f00 	cmp.w	sl, #0
 80071fe:	d11a      	bne.n	8007236 <_strtod_l+0xa46>
 8007200:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007204:	b9eb      	cbnz	r3, 8007242 <_strtod_l+0xa52>
 8007206:	2200      	movs	r2, #0
 8007208:	4b3f      	ldr	r3, [pc, #252]	; (8007308 <_strtod_l+0xb18>)
 800720a:	4630      	mov	r0, r6
 800720c:	4639      	mov	r1, r7
 800720e:	f7f9 fc65 	bl	8000adc <__aeabi_dcmplt>
 8007212:	b9c8      	cbnz	r0, 8007248 <_strtod_l+0xa58>
 8007214:	4630      	mov	r0, r6
 8007216:	4639      	mov	r1, r7
 8007218:	2200      	movs	r2, #0
 800721a:	4b3e      	ldr	r3, [pc, #248]	; (8007314 <_strtod_l+0xb24>)
 800721c:	f7f9 f9ec 	bl	80005f8 <__aeabi_dmul>
 8007220:	4606      	mov	r6, r0
 8007222:	460f      	mov	r7, r1
 8007224:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007228:	9618      	str	r6, [sp, #96]	; 0x60
 800722a:	9319      	str	r3, [sp, #100]	; 0x64
 800722c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007230:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007234:	e79c      	b.n	8007170 <_strtod_l+0x980>
 8007236:	f1ba 0f01 	cmp.w	sl, #1
 800723a:	d102      	bne.n	8007242 <_strtod_l+0xa52>
 800723c:	2d00      	cmp	r5, #0
 800723e:	f43f ad8e 	beq.w	8006d5e <_strtod_l+0x56e>
 8007242:	2200      	movs	r2, #0
 8007244:	4b34      	ldr	r3, [pc, #208]	; (8007318 <_strtod_l+0xb28>)
 8007246:	e78f      	b.n	8007168 <_strtod_l+0x978>
 8007248:	2600      	movs	r6, #0
 800724a:	4f32      	ldr	r7, [pc, #200]	; (8007314 <_strtod_l+0xb24>)
 800724c:	e7ea      	b.n	8007224 <_strtod_l+0xa34>
 800724e:	4b31      	ldr	r3, [pc, #196]	; (8007314 <_strtod_l+0xb24>)
 8007250:	4630      	mov	r0, r6
 8007252:	4639      	mov	r1, r7
 8007254:	2200      	movs	r2, #0
 8007256:	f7f9 f9cf 	bl	80005f8 <__aeabi_dmul>
 800725a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800725c:	4606      	mov	r6, r0
 800725e:	460f      	mov	r7, r1
 8007260:	b933      	cbnz	r3, 8007270 <_strtod_l+0xa80>
 8007262:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007266:	9010      	str	r0, [sp, #64]	; 0x40
 8007268:	9311      	str	r3, [sp, #68]	; 0x44
 800726a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800726e:	e7df      	b.n	8007230 <_strtod_l+0xa40>
 8007270:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007274:	e7f9      	b.n	800726a <_strtod_l+0xa7a>
 8007276:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800727a:	9b04      	ldr	r3, [sp, #16]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1ab      	bne.n	80071d8 <_strtod_l+0x9e8>
 8007280:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007284:	0d1b      	lsrs	r3, r3, #20
 8007286:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007288:	051b      	lsls	r3, r3, #20
 800728a:	429a      	cmp	r2, r3
 800728c:	465d      	mov	r5, fp
 800728e:	d1a3      	bne.n	80071d8 <_strtod_l+0x9e8>
 8007290:	4639      	mov	r1, r7
 8007292:	4630      	mov	r0, r6
 8007294:	f7f9 fc60 	bl	8000b58 <__aeabi_d2iz>
 8007298:	f7f9 f944 	bl	8000524 <__aeabi_i2d>
 800729c:	460b      	mov	r3, r1
 800729e:	4602      	mov	r2, r0
 80072a0:	4639      	mov	r1, r7
 80072a2:	4630      	mov	r0, r6
 80072a4:	f7f8 fff0 	bl	8000288 <__aeabi_dsub>
 80072a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072aa:	4606      	mov	r6, r0
 80072ac:	460f      	mov	r7, r1
 80072ae:	b933      	cbnz	r3, 80072be <_strtod_l+0xace>
 80072b0:	f1ba 0f00 	cmp.w	sl, #0
 80072b4:	d103      	bne.n	80072be <_strtod_l+0xace>
 80072b6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80072ba:	2d00      	cmp	r5, #0
 80072bc:	d06d      	beq.n	800739a <_strtod_l+0xbaa>
 80072be:	a30a      	add	r3, pc, #40	; (adr r3, 80072e8 <_strtod_l+0xaf8>)
 80072c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c4:	4630      	mov	r0, r6
 80072c6:	4639      	mov	r1, r7
 80072c8:	f7f9 fc08 	bl	8000adc <__aeabi_dcmplt>
 80072cc:	2800      	cmp	r0, #0
 80072ce:	f47f acb8 	bne.w	8006c42 <_strtod_l+0x452>
 80072d2:	a307      	add	r3, pc, #28	; (adr r3, 80072f0 <_strtod_l+0xb00>)
 80072d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d8:	4630      	mov	r0, r6
 80072da:	4639      	mov	r1, r7
 80072dc:	f7f9 fc1c 	bl	8000b18 <__aeabi_dcmpgt>
 80072e0:	2800      	cmp	r0, #0
 80072e2:	f43f af79 	beq.w	80071d8 <_strtod_l+0x9e8>
 80072e6:	e4ac      	b.n	8006c42 <_strtod_l+0x452>
 80072e8:	94a03595 	.word	0x94a03595
 80072ec:	3fdfffff 	.word	0x3fdfffff
 80072f0:	35afe535 	.word	0x35afe535
 80072f4:	3fe00000 	.word	0x3fe00000
 80072f8:	000fffff 	.word	0x000fffff
 80072fc:	7ff00000 	.word	0x7ff00000
 8007300:	7fefffff 	.word	0x7fefffff
 8007304:	39500000 	.word	0x39500000
 8007308:	3ff00000 	.word	0x3ff00000
 800730c:	7fe00000 	.word	0x7fe00000
 8007310:	7c9fffff 	.word	0x7c9fffff
 8007314:	3fe00000 	.word	0x3fe00000
 8007318:	bff00000 	.word	0xbff00000
 800731c:	9b04      	ldr	r3, [sp, #16]
 800731e:	b333      	cbz	r3, 800736e <_strtod_l+0xb7e>
 8007320:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007322:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007326:	d822      	bhi.n	800736e <_strtod_l+0xb7e>
 8007328:	a327      	add	r3, pc, #156	; (adr r3, 80073c8 <_strtod_l+0xbd8>)
 800732a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732e:	4630      	mov	r0, r6
 8007330:	4639      	mov	r1, r7
 8007332:	f7f9 fbdd 	bl	8000af0 <__aeabi_dcmple>
 8007336:	b1a0      	cbz	r0, 8007362 <_strtod_l+0xb72>
 8007338:	4639      	mov	r1, r7
 800733a:	4630      	mov	r0, r6
 800733c:	f7f9 fc34 	bl	8000ba8 <__aeabi_d2uiz>
 8007340:	2800      	cmp	r0, #0
 8007342:	bf08      	it	eq
 8007344:	2001      	moveq	r0, #1
 8007346:	f7f9 f8dd 	bl	8000504 <__aeabi_ui2d>
 800734a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800734c:	4606      	mov	r6, r0
 800734e:	460f      	mov	r7, r1
 8007350:	bb03      	cbnz	r3, 8007394 <_strtod_l+0xba4>
 8007352:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007356:	9012      	str	r0, [sp, #72]	; 0x48
 8007358:	9313      	str	r3, [sp, #76]	; 0x4c
 800735a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800735e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007364:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007366:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800736a:	1a9b      	subs	r3, r3, r2
 800736c:	930b      	str	r3, [sp, #44]	; 0x2c
 800736e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007372:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8007376:	f001 ffd1 	bl	800931c <__ulp>
 800737a:	4650      	mov	r0, sl
 800737c:	ec53 2b10 	vmov	r2, r3, d0
 8007380:	4659      	mov	r1, fp
 8007382:	f7f9 f939 	bl	80005f8 <__aeabi_dmul>
 8007386:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800738a:	f7f8 ff7f 	bl	800028c <__adddf3>
 800738e:	4682      	mov	sl, r0
 8007390:	468b      	mov	fp, r1
 8007392:	e772      	b.n	800727a <_strtod_l+0xa8a>
 8007394:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8007398:	e7df      	b.n	800735a <_strtod_l+0xb6a>
 800739a:	a30d      	add	r3, pc, #52	; (adr r3, 80073d0 <_strtod_l+0xbe0>)
 800739c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a0:	f7f9 fb9c 	bl	8000adc <__aeabi_dcmplt>
 80073a4:	e79c      	b.n	80072e0 <_strtod_l+0xaf0>
 80073a6:	2300      	movs	r3, #0
 80073a8:	930d      	str	r3, [sp, #52]	; 0x34
 80073aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073ae:	6013      	str	r3, [r2, #0]
 80073b0:	f7ff ba61 	b.w	8006876 <_strtod_l+0x86>
 80073b4:	2b65      	cmp	r3, #101	; 0x65
 80073b6:	f04f 0200 	mov.w	r2, #0
 80073ba:	f43f ab4e 	beq.w	8006a5a <_strtod_l+0x26a>
 80073be:	2101      	movs	r1, #1
 80073c0:	4614      	mov	r4, r2
 80073c2:	9104      	str	r1, [sp, #16]
 80073c4:	f7ff bacb 	b.w	800695e <_strtod_l+0x16e>
 80073c8:	ffc00000 	.word	0xffc00000
 80073cc:	41dfffff 	.word	0x41dfffff
 80073d0:	94a03595 	.word	0x94a03595
 80073d4:	3fcfffff 	.word	0x3fcfffff

080073d8 <_strtod_r>:
 80073d8:	4b05      	ldr	r3, [pc, #20]	; (80073f0 <_strtod_r+0x18>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	b410      	push	{r4}
 80073de:	6a1b      	ldr	r3, [r3, #32]
 80073e0:	4c04      	ldr	r4, [pc, #16]	; (80073f4 <_strtod_r+0x1c>)
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	bf08      	it	eq
 80073e6:	4623      	moveq	r3, r4
 80073e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073ec:	f7ff ba00 	b.w	80067f0 <_strtod_l>
 80073f0:	20000010 	.word	0x20000010
 80073f4:	20000074 	.word	0x20000074

080073f8 <_strtol_l.isra.0>:
 80073f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073fc:	4680      	mov	r8, r0
 80073fe:	4689      	mov	r9, r1
 8007400:	4692      	mov	sl, r2
 8007402:	461e      	mov	r6, r3
 8007404:	460f      	mov	r7, r1
 8007406:	463d      	mov	r5, r7
 8007408:	9808      	ldr	r0, [sp, #32]
 800740a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800740e:	f001 fc27 	bl	8008c60 <__locale_ctype_ptr_l>
 8007412:	4420      	add	r0, r4
 8007414:	7843      	ldrb	r3, [r0, #1]
 8007416:	f013 0308 	ands.w	r3, r3, #8
 800741a:	d132      	bne.n	8007482 <_strtol_l.isra.0+0x8a>
 800741c:	2c2d      	cmp	r4, #45	; 0x2d
 800741e:	d132      	bne.n	8007486 <_strtol_l.isra.0+0x8e>
 8007420:	787c      	ldrb	r4, [r7, #1]
 8007422:	1cbd      	adds	r5, r7, #2
 8007424:	2201      	movs	r2, #1
 8007426:	2e00      	cmp	r6, #0
 8007428:	d05d      	beq.n	80074e6 <_strtol_l.isra.0+0xee>
 800742a:	2e10      	cmp	r6, #16
 800742c:	d109      	bne.n	8007442 <_strtol_l.isra.0+0x4a>
 800742e:	2c30      	cmp	r4, #48	; 0x30
 8007430:	d107      	bne.n	8007442 <_strtol_l.isra.0+0x4a>
 8007432:	782b      	ldrb	r3, [r5, #0]
 8007434:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007438:	2b58      	cmp	r3, #88	; 0x58
 800743a:	d14f      	bne.n	80074dc <_strtol_l.isra.0+0xe4>
 800743c:	786c      	ldrb	r4, [r5, #1]
 800743e:	2610      	movs	r6, #16
 8007440:	3502      	adds	r5, #2
 8007442:	2a00      	cmp	r2, #0
 8007444:	bf14      	ite	ne
 8007446:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800744a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800744e:	2700      	movs	r7, #0
 8007450:	fbb1 fcf6 	udiv	ip, r1, r6
 8007454:	4638      	mov	r0, r7
 8007456:	fb06 1e1c 	mls	lr, r6, ip, r1
 800745a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800745e:	2b09      	cmp	r3, #9
 8007460:	d817      	bhi.n	8007492 <_strtol_l.isra.0+0x9a>
 8007462:	461c      	mov	r4, r3
 8007464:	42a6      	cmp	r6, r4
 8007466:	dd23      	ble.n	80074b0 <_strtol_l.isra.0+0xb8>
 8007468:	1c7b      	adds	r3, r7, #1
 800746a:	d007      	beq.n	800747c <_strtol_l.isra.0+0x84>
 800746c:	4584      	cmp	ip, r0
 800746e:	d31c      	bcc.n	80074aa <_strtol_l.isra.0+0xb2>
 8007470:	d101      	bne.n	8007476 <_strtol_l.isra.0+0x7e>
 8007472:	45a6      	cmp	lr, r4
 8007474:	db19      	blt.n	80074aa <_strtol_l.isra.0+0xb2>
 8007476:	fb00 4006 	mla	r0, r0, r6, r4
 800747a:	2701      	movs	r7, #1
 800747c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007480:	e7eb      	b.n	800745a <_strtol_l.isra.0+0x62>
 8007482:	462f      	mov	r7, r5
 8007484:	e7bf      	b.n	8007406 <_strtol_l.isra.0+0xe>
 8007486:	2c2b      	cmp	r4, #43	; 0x2b
 8007488:	bf04      	itt	eq
 800748a:	1cbd      	addeq	r5, r7, #2
 800748c:	787c      	ldrbeq	r4, [r7, #1]
 800748e:	461a      	mov	r2, r3
 8007490:	e7c9      	b.n	8007426 <_strtol_l.isra.0+0x2e>
 8007492:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007496:	2b19      	cmp	r3, #25
 8007498:	d801      	bhi.n	800749e <_strtol_l.isra.0+0xa6>
 800749a:	3c37      	subs	r4, #55	; 0x37
 800749c:	e7e2      	b.n	8007464 <_strtol_l.isra.0+0x6c>
 800749e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80074a2:	2b19      	cmp	r3, #25
 80074a4:	d804      	bhi.n	80074b0 <_strtol_l.isra.0+0xb8>
 80074a6:	3c57      	subs	r4, #87	; 0x57
 80074a8:	e7dc      	b.n	8007464 <_strtol_l.isra.0+0x6c>
 80074aa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80074ae:	e7e5      	b.n	800747c <_strtol_l.isra.0+0x84>
 80074b0:	1c7b      	adds	r3, r7, #1
 80074b2:	d108      	bne.n	80074c6 <_strtol_l.isra.0+0xce>
 80074b4:	2322      	movs	r3, #34	; 0x22
 80074b6:	f8c8 3000 	str.w	r3, [r8]
 80074ba:	4608      	mov	r0, r1
 80074bc:	f1ba 0f00 	cmp.w	sl, #0
 80074c0:	d107      	bne.n	80074d2 <_strtol_l.isra.0+0xda>
 80074c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c6:	b102      	cbz	r2, 80074ca <_strtol_l.isra.0+0xd2>
 80074c8:	4240      	negs	r0, r0
 80074ca:	f1ba 0f00 	cmp.w	sl, #0
 80074ce:	d0f8      	beq.n	80074c2 <_strtol_l.isra.0+0xca>
 80074d0:	b10f      	cbz	r7, 80074d6 <_strtol_l.isra.0+0xde>
 80074d2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80074d6:	f8ca 9000 	str.w	r9, [sl]
 80074da:	e7f2      	b.n	80074c2 <_strtol_l.isra.0+0xca>
 80074dc:	2430      	movs	r4, #48	; 0x30
 80074de:	2e00      	cmp	r6, #0
 80074e0:	d1af      	bne.n	8007442 <_strtol_l.isra.0+0x4a>
 80074e2:	2608      	movs	r6, #8
 80074e4:	e7ad      	b.n	8007442 <_strtol_l.isra.0+0x4a>
 80074e6:	2c30      	cmp	r4, #48	; 0x30
 80074e8:	d0a3      	beq.n	8007432 <_strtol_l.isra.0+0x3a>
 80074ea:	260a      	movs	r6, #10
 80074ec:	e7a9      	b.n	8007442 <_strtol_l.isra.0+0x4a>
	...

080074f0 <_strtol_r>:
 80074f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074f2:	4c06      	ldr	r4, [pc, #24]	; (800750c <_strtol_r+0x1c>)
 80074f4:	4d06      	ldr	r5, [pc, #24]	; (8007510 <_strtol_r+0x20>)
 80074f6:	6824      	ldr	r4, [r4, #0]
 80074f8:	6a24      	ldr	r4, [r4, #32]
 80074fa:	2c00      	cmp	r4, #0
 80074fc:	bf08      	it	eq
 80074fe:	462c      	moveq	r4, r5
 8007500:	9400      	str	r4, [sp, #0]
 8007502:	f7ff ff79 	bl	80073f8 <_strtol_l.isra.0>
 8007506:	b003      	add	sp, #12
 8007508:	bd30      	pop	{r4, r5, pc}
 800750a:	bf00      	nop
 800750c:	20000010 	.word	0x20000010
 8007510:	20000074 	.word	0x20000074

08007514 <__swbuf_r>:
 8007514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007516:	460e      	mov	r6, r1
 8007518:	4614      	mov	r4, r2
 800751a:	4605      	mov	r5, r0
 800751c:	b118      	cbz	r0, 8007526 <__swbuf_r+0x12>
 800751e:	6983      	ldr	r3, [r0, #24]
 8007520:	b90b      	cbnz	r3, 8007526 <__swbuf_r+0x12>
 8007522:	f000 ffed 	bl	8008500 <__sinit>
 8007526:	4b21      	ldr	r3, [pc, #132]	; (80075ac <__swbuf_r+0x98>)
 8007528:	429c      	cmp	r4, r3
 800752a:	d12a      	bne.n	8007582 <__swbuf_r+0x6e>
 800752c:	686c      	ldr	r4, [r5, #4]
 800752e:	69a3      	ldr	r3, [r4, #24]
 8007530:	60a3      	str	r3, [r4, #8]
 8007532:	89a3      	ldrh	r3, [r4, #12]
 8007534:	071a      	lsls	r2, r3, #28
 8007536:	d52e      	bpl.n	8007596 <__swbuf_r+0x82>
 8007538:	6923      	ldr	r3, [r4, #16]
 800753a:	b363      	cbz	r3, 8007596 <__swbuf_r+0x82>
 800753c:	6923      	ldr	r3, [r4, #16]
 800753e:	6820      	ldr	r0, [r4, #0]
 8007540:	1ac0      	subs	r0, r0, r3
 8007542:	6963      	ldr	r3, [r4, #20]
 8007544:	b2f6      	uxtb	r6, r6
 8007546:	4283      	cmp	r3, r0
 8007548:	4637      	mov	r7, r6
 800754a:	dc04      	bgt.n	8007556 <__swbuf_r+0x42>
 800754c:	4621      	mov	r1, r4
 800754e:	4628      	mov	r0, r5
 8007550:	f000 ff6c 	bl	800842c <_fflush_r>
 8007554:	bb28      	cbnz	r0, 80075a2 <__swbuf_r+0x8e>
 8007556:	68a3      	ldr	r3, [r4, #8]
 8007558:	3b01      	subs	r3, #1
 800755a:	60a3      	str	r3, [r4, #8]
 800755c:	6823      	ldr	r3, [r4, #0]
 800755e:	1c5a      	adds	r2, r3, #1
 8007560:	6022      	str	r2, [r4, #0]
 8007562:	701e      	strb	r6, [r3, #0]
 8007564:	6963      	ldr	r3, [r4, #20]
 8007566:	3001      	adds	r0, #1
 8007568:	4283      	cmp	r3, r0
 800756a:	d004      	beq.n	8007576 <__swbuf_r+0x62>
 800756c:	89a3      	ldrh	r3, [r4, #12]
 800756e:	07db      	lsls	r3, r3, #31
 8007570:	d519      	bpl.n	80075a6 <__swbuf_r+0x92>
 8007572:	2e0a      	cmp	r6, #10
 8007574:	d117      	bne.n	80075a6 <__swbuf_r+0x92>
 8007576:	4621      	mov	r1, r4
 8007578:	4628      	mov	r0, r5
 800757a:	f000 ff57 	bl	800842c <_fflush_r>
 800757e:	b190      	cbz	r0, 80075a6 <__swbuf_r+0x92>
 8007580:	e00f      	b.n	80075a2 <__swbuf_r+0x8e>
 8007582:	4b0b      	ldr	r3, [pc, #44]	; (80075b0 <__swbuf_r+0x9c>)
 8007584:	429c      	cmp	r4, r3
 8007586:	d101      	bne.n	800758c <__swbuf_r+0x78>
 8007588:	68ac      	ldr	r4, [r5, #8]
 800758a:	e7d0      	b.n	800752e <__swbuf_r+0x1a>
 800758c:	4b09      	ldr	r3, [pc, #36]	; (80075b4 <__swbuf_r+0xa0>)
 800758e:	429c      	cmp	r4, r3
 8007590:	bf08      	it	eq
 8007592:	68ec      	ldreq	r4, [r5, #12]
 8007594:	e7cb      	b.n	800752e <__swbuf_r+0x1a>
 8007596:	4621      	mov	r1, r4
 8007598:	4628      	mov	r0, r5
 800759a:	f000 f80d 	bl	80075b8 <__swsetup_r>
 800759e:	2800      	cmp	r0, #0
 80075a0:	d0cc      	beq.n	800753c <__swbuf_r+0x28>
 80075a2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80075a6:	4638      	mov	r0, r7
 80075a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075aa:	bf00      	nop
 80075ac:	08009fb8 	.word	0x08009fb8
 80075b0:	08009fd8 	.word	0x08009fd8
 80075b4:	08009f98 	.word	0x08009f98

080075b8 <__swsetup_r>:
 80075b8:	4b32      	ldr	r3, [pc, #200]	; (8007684 <__swsetup_r+0xcc>)
 80075ba:	b570      	push	{r4, r5, r6, lr}
 80075bc:	681d      	ldr	r5, [r3, #0]
 80075be:	4606      	mov	r6, r0
 80075c0:	460c      	mov	r4, r1
 80075c2:	b125      	cbz	r5, 80075ce <__swsetup_r+0x16>
 80075c4:	69ab      	ldr	r3, [r5, #24]
 80075c6:	b913      	cbnz	r3, 80075ce <__swsetup_r+0x16>
 80075c8:	4628      	mov	r0, r5
 80075ca:	f000 ff99 	bl	8008500 <__sinit>
 80075ce:	4b2e      	ldr	r3, [pc, #184]	; (8007688 <__swsetup_r+0xd0>)
 80075d0:	429c      	cmp	r4, r3
 80075d2:	d10f      	bne.n	80075f4 <__swsetup_r+0x3c>
 80075d4:	686c      	ldr	r4, [r5, #4]
 80075d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075da:	b29a      	uxth	r2, r3
 80075dc:	0715      	lsls	r5, r2, #28
 80075de:	d42c      	bmi.n	800763a <__swsetup_r+0x82>
 80075e0:	06d0      	lsls	r0, r2, #27
 80075e2:	d411      	bmi.n	8007608 <__swsetup_r+0x50>
 80075e4:	2209      	movs	r2, #9
 80075e6:	6032      	str	r2, [r6, #0]
 80075e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075ec:	81a3      	strh	r3, [r4, #12]
 80075ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075f2:	e03e      	b.n	8007672 <__swsetup_r+0xba>
 80075f4:	4b25      	ldr	r3, [pc, #148]	; (800768c <__swsetup_r+0xd4>)
 80075f6:	429c      	cmp	r4, r3
 80075f8:	d101      	bne.n	80075fe <__swsetup_r+0x46>
 80075fa:	68ac      	ldr	r4, [r5, #8]
 80075fc:	e7eb      	b.n	80075d6 <__swsetup_r+0x1e>
 80075fe:	4b24      	ldr	r3, [pc, #144]	; (8007690 <__swsetup_r+0xd8>)
 8007600:	429c      	cmp	r4, r3
 8007602:	bf08      	it	eq
 8007604:	68ec      	ldreq	r4, [r5, #12]
 8007606:	e7e6      	b.n	80075d6 <__swsetup_r+0x1e>
 8007608:	0751      	lsls	r1, r2, #29
 800760a:	d512      	bpl.n	8007632 <__swsetup_r+0x7a>
 800760c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800760e:	b141      	cbz	r1, 8007622 <__swsetup_r+0x6a>
 8007610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007614:	4299      	cmp	r1, r3
 8007616:	d002      	beq.n	800761e <__swsetup_r+0x66>
 8007618:	4630      	mov	r0, r6
 800761a:	f001 ffc1 	bl	80095a0 <_free_r>
 800761e:	2300      	movs	r3, #0
 8007620:	6363      	str	r3, [r4, #52]	; 0x34
 8007622:	89a3      	ldrh	r3, [r4, #12]
 8007624:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007628:	81a3      	strh	r3, [r4, #12]
 800762a:	2300      	movs	r3, #0
 800762c:	6063      	str	r3, [r4, #4]
 800762e:	6923      	ldr	r3, [r4, #16]
 8007630:	6023      	str	r3, [r4, #0]
 8007632:	89a3      	ldrh	r3, [r4, #12]
 8007634:	f043 0308 	orr.w	r3, r3, #8
 8007638:	81a3      	strh	r3, [r4, #12]
 800763a:	6923      	ldr	r3, [r4, #16]
 800763c:	b94b      	cbnz	r3, 8007652 <__swsetup_r+0x9a>
 800763e:	89a3      	ldrh	r3, [r4, #12]
 8007640:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007648:	d003      	beq.n	8007652 <__swsetup_r+0x9a>
 800764a:	4621      	mov	r1, r4
 800764c:	4630      	mov	r0, r6
 800764e:	f001 fb3f 	bl	8008cd0 <__smakebuf_r>
 8007652:	89a2      	ldrh	r2, [r4, #12]
 8007654:	f012 0301 	ands.w	r3, r2, #1
 8007658:	d00c      	beq.n	8007674 <__swsetup_r+0xbc>
 800765a:	2300      	movs	r3, #0
 800765c:	60a3      	str	r3, [r4, #8]
 800765e:	6963      	ldr	r3, [r4, #20]
 8007660:	425b      	negs	r3, r3
 8007662:	61a3      	str	r3, [r4, #24]
 8007664:	6923      	ldr	r3, [r4, #16]
 8007666:	b953      	cbnz	r3, 800767e <__swsetup_r+0xc6>
 8007668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800766c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007670:	d1ba      	bne.n	80075e8 <__swsetup_r+0x30>
 8007672:	bd70      	pop	{r4, r5, r6, pc}
 8007674:	0792      	lsls	r2, r2, #30
 8007676:	bf58      	it	pl
 8007678:	6963      	ldrpl	r3, [r4, #20]
 800767a:	60a3      	str	r3, [r4, #8]
 800767c:	e7f2      	b.n	8007664 <__swsetup_r+0xac>
 800767e:	2000      	movs	r0, #0
 8007680:	e7f7      	b.n	8007672 <__swsetup_r+0xba>
 8007682:	bf00      	nop
 8007684:	20000010 	.word	0x20000010
 8007688:	08009fb8 	.word	0x08009fb8
 800768c:	08009fd8 	.word	0x08009fd8
 8007690:	08009f98 	.word	0x08009f98

08007694 <quorem>:
 8007694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007698:	6903      	ldr	r3, [r0, #16]
 800769a:	690c      	ldr	r4, [r1, #16]
 800769c:	42a3      	cmp	r3, r4
 800769e:	4680      	mov	r8, r0
 80076a0:	f2c0 8082 	blt.w	80077a8 <quorem+0x114>
 80076a4:	3c01      	subs	r4, #1
 80076a6:	f101 0714 	add.w	r7, r1, #20
 80076aa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80076ae:	f100 0614 	add.w	r6, r0, #20
 80076b2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80076b6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80076ba:	eb06 030c 	add.w	r3, r6, ip
 80076be:	3501      	adds	r5, #1
 80076c0:	eb07 090c 	add.w	r9, r7, ip
 80076c4:	9301      	str	r3, [sp, #4]
 80076c6:	fbb0 f5f5 	udiv	r5, r0, r5
 80076ca:	b395      	cbz	r5, 8007732 <quorem+0x9e>
 80076cc:	f04f 0a00 	mov.w	sl, #0
 80076d0:	4638      	mov	r0, r7
 80076d2:	46b6      	mov	lr, r6
 80076d4:	46d3      	mov	fp, sl
 80076d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80076da:	b293      	uxth	r3, r2
 80076dc:	fb05 a303 	mla	r3, r5, r3, sl
 80076e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	ebab 0303 	sub.w	r3, fp, r3
 80076ea:	0c12      	lsrs	r2, r2, #16
 80076ec:	f8de b000 	ldr.w	fp, [lr]
 80076f0:	fb05 a202 	mla	r2, r5, r2, sl
 80076f4:	fa13 f38b 	uxtah	r3, r3, fp
 80076f8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80076fc:	fa1f fb82 	uxth.w	fp, r2
 8007700:	f8de 2000 	ldr.w	r2, [lr]
 8007704:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007708:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800770c:	b29b      	uxth	r3, r3
 800770e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007712:	4581      	cmp	r9, r0
 8007714:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007718:	f84e 3b04 	str.w	r3, [lr], #4
 800771c:	d2db      	bcs.n	80076d6 <quorem+0x42>
 800771e:	f856 300c 	ldr.w	r3, [r6, ip]
 8007722:	b933      	cbnz	r3, 8007732 <quorem+0x9e>
 8007724:	9b01      	ldr	r3, [sp, #4]
 8007726:	3b04      	subs	r3, #4
 8007728:	429e      	cmp	r6, r3
 800772a:	461a      	mov	r2, r3
 800772c:	d330      	bcc.n	8007790 <quorem+0xfc>
 800772e:	f8c8 4010 	str.w	r4, [r8, #16]
 8007732:	4640      	mov	r0, r8
 8007734:	f001 fd7a 	bl	800922c <__mcmp>
 8007738:	2800      	cmp	r0, #0
 800773a:	db25      	blt.n	8007788 <quorem+0xf4>
 800773c:	3501      	adds	r5, #1
 800773e:	4630      	mov	r0, r6
 8007740:	f04f 0c00 	mov.w	ip, #0
 8007744:	f857 2b04 	ldr.w	r2, [r7], #4
 8007748:	f8d0 e000 	ldr.w	lr, [r0]
 800774c:	b293      	uxth	r3, r2
 800774e:	ebac 0303 	sub.w	r3, ip, r3
 8007752:	0c12      	lsrs	r2, r2, #16
 8007754:	fa13 f38e 	uxtah	r3, r3, lr
 8007758:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800775c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007760:	b29b      	uxth	r3, r3
 8007762:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007766:	45b9      	cmp	r9, r7
 8007768:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800776c:	f840 3b04 	str.w	r3, [r0], #4
 8007770:	d2e8      	bcs.n	8007744 <quorem+0xb0>
 8007772:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007776:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800777a:	b92a      	cbnz	r2, 8007788 <quorem+0xf4>
 800777c:	3b04      	subs	r3, #4
 800777e:	429e      	cmp	r6, r3
 8007780:	461a      	mov	r2, r3
 8007782:	d30b      	bcc.n	800779c <quorem+0x108>
 8007784:	f8c8 4010 	str.w	r4, [r8, #16]
 8007788:	4628      	mov	r0, r5
 800778a:	b003      	add	sp, #12
 800778c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007790:	6812      	ldr	r2, [r2, #0]
 8007792:	3b04      	subs	r3, #4
 8007794:	2a00      	cmp	r2, #0
 8007796:	d1ca      	bne.n	800772e <quorem+0x9a>
 8007798:	3c01      	subs	r4, #1
 800779a:	e7c5      	b.n	8007728 <quorem+0x94>
 800779c:	6812      	ldr	r2, [r2, #0]
 800779e:	3b04      	subs	r3, #4
 80077a0:	2a00      	cmp	r2, #0
 80077a2:	d1ef      	bne.n	8007784 <quorem+0xf0>
 80077a4:	3c01      	subs	r4, #1
 80077a6:	e7ea      	b.n	800777e <quorem+0xea>
 80077a8:	2000      	movs	r0, #0
 80077aa:	e7ee      	b.n	800778a <quorem+0xf6>
 80077ac:	0000      	movs	r0, r0
	...

080077b0 <_dtoa_r>:
 80077b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b4:	ec57 6b10 	vmov	r6, r7, d0
 80077b8:	b097      	sub	sp, #92	; 0x5c
 80077ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80077bc:	9106      	str	r1, [sp, #24]
 80077be:	4604      	mov	r4, r0
 80077c0:	920b      	str	r2, [sp, #44]	; 0x2c
 80077c2:	9312      	str	r3, [sp, #72]	; 0x48
 80077c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80077c8:	e9cd 6700 	strd	r6, r7, [sp]
 80077cc:	b93d      	cbnz	r5, 80077de <_dtoa_r+0x2e>
 80077ce:	2010      	movs	r0, #16
 80077d0:	f001 fabe 	bl	8008d50 <malloc>
 80077d4:	6260      	str	r0, [r4, #36]	; 0x24
 80077d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80077da:	6005      	str	r5, [r0, #0]
 80077dc:	60c5      	str	r5, [r0, #12]
 80077de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077e0:	6819      	ldr	r1, [r3, #0]
 80077e2:	b151      	cbz	r1, 80077fa <_dtoa_r+0x4a>
 80077e4:	685a      	ldr	r2, [r3, #4]
 80077e6:	604a      	str	r2, [r1, #4]
 80077e8:	2301      	movs	r3, #1
 80077ea:	4093      	lsls	r3, r2
 80077ec:	608b      	str	r3, [r1, #8]
 80077ee:	4620      	mov	r0, r4
 80077f0:	f001 fafc 	bl	8008dec <_Bfree>
 80077f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077f6:	2200      	movs	r2, #0
 80077f8:	601a      	str	r2, [r3, #0]
 80077fa:	1e3b      	subs	r3, r7, #0
 80077fc:	bfbb      	ittet	lt
 80077fe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007802:	9301      	strlt	r3, [sp, #4]
 8007804:	2300      	movge	r3, #0
 8007806:	2201      	movlt	r2, #1
 8007808:	bfac      	ite	ge
 800780a:	f8c8 3000 	strge.w	r3, [r8]
 800780e:	f8c8 2000 	strlt.w	r2, [r8]
 8007812:	4baf      	ldr	r3, [pc, #700]	; (8007ad0 <_dtoa_r+0x320>)
 8007814:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007818:	ea33 0308 	bics.w	r3, r3, r8
 800781c:	d114      	bne.n	8007848 <_dtoa_r+0x98>
 800781e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007820:	f242 730f 	movw	r3, #9999	; 0x270f
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	9b00      	ldr	r3, [sp, #0]
 8007828:	b923      	cbnz	r3, 8007834 <_dtoa_r+0x84>
 800782a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800782e:	2800      	cmp	r0, #0
 8007830:	f000 8542 	beq.w	80082b8 <_dtoa_r+0xb08>
 8007834:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007836:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007ae4 <_dtoa_r+0x334>
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 8544 	beq.w	80082c8 <_dtoa_r+0xb18>
 8007840:	f10b 0303 	add.w	r3, fp, #3
 8007844:	f000 bd3e 	b.w	80082c4 <_dtoa_r+0xb14>
 8007848:	e9dd 6700 	ldrd	r6, r7, [sp]
 800784c:	2200      	movs	r2, #0
 800784e:	2300      	movs	r3, #0
 8007850:	4630      	mov	r0, r6
 8007852:	4639      	mov	r1, r7
 8007854:	f7f9 f938 	bl	8000ac8 <__aeabi_dcmpeq>
 8007858:	4681      	mov	r9, r0
 800785a:	b168      	cbz	r0, 8007878 <_dtoa_r+0xc8>
 800785c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800785e:	2301      	movs	r3, #1
 8007860:	6013      	str	r3, [r2, #0]
 8007862:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007864:	2b00      	cmp	r3, #0
 8007866:	f000 8524 	beq.w	80082b2 <_dtoa_r+0xb02>
 800786a:	4b9a      	ldr	r3, [pc, #616]	; (8007ad4 <_dtoa_r+0x324>)
 800786c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800786e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8007872:	6013      	str	r3, [r2, #0]
 8007874:	f000 bd28 	b.w	80082c8 <_dtoa_r+0xb18>
 8007878:	aa14      	add	r2, sp, #80	; 0x50
 800787a:	a915      	add	r1, sp, #84	; 0x54
 800787c:	ec47 6b10 	vmov	d0, r6, r7
 8007880:	4620      	mov	r0, r4
 8007882:	f001 fdc1 	bl	8009408 <__d2b>
 8007886:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800788a:	9004      	str	r0, [sp, #16]
 800788c:	2d00      	cmp	r5, #0
 800788e:	d07c      	beq.n	800798a <_dtoa_r+0x1da>
 8007890:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007894:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007898:	46b2      	mov	sl, r6
 800789a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800789e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80078a2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80078a6:	2200      	movs	r2, #0
 80078a8:	4b8b      	ldr	r3, [pc, #556]	; (8007ad8 <_dtoa_r+0x328>)
 80078aa:	4650      	mov	r0, sl
 80078ac:	4659      	mov	r1, fp
 80078ae:	f7f8 fceb 	bl	8000288 <__aeabi_dsub>
 80078b2:	a381      	add	r3, pc, #516	; (adr r3, 8007ab8 <_dtoa_r+0x308>)
 80078b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b8:	f7f8 fe9e 	bl	80005f8 <__aeabi_dmul>
 80078bc:	a380      	add	r3, pc, #512	; (adr r3, 8007ac0 <_dtoa_r+0x310>)
 80078be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c2:	f7f8 fce3 	bl	800028c <__adddf3>
 80078c6:	4606      	mov	r6, r0
 80078c8:	4628      	mov	r0, r5
 80078ca:	460f      	mov	r7, r1
 80078cc:	f7f8 fe2a 	bl	8000524 <__aeabi_i2d>
 80078d0:	a37d      	add	r3, pc, #500	; (adr r3, 8007ac8 <_dtoa_r+0x318>)
 80078d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d6:	f7f8 fe8f 	bl	80005f8 <__aeabi_dmul>
 80078da:	4602      	mov	r2, r0
 80078dc:	460b      	mov	r3, r1
 80078de:	4630      	mov	r0, r6
 80078e0:	4639      	mov	r1, r7
 80078e2:	f7f8 fcd3 	bl	800028c <__adddf3>
 80078e6:	4606      	mov	r6, r0
 80078e8:	460f      	mov	r7, r1
 80078ea:	f7f9 f935 	bl	8000b58 <__aeabi_d2iz>
 80078ee:	2200      	movs	r2, #0
 80078f0:	4682      	mov	sl, r0
 80078f2:	2300      	movs	r3, #0
 80078f4:	4630      	mov	r0, r6
 80078f6:	4639      	mov	r1, r7
 80078f8:	f7f9 f8f0 	bl	8000adc <__aeabi_dcmplt>
 80078fc:	b148      	cbz	r0, 8007912 <_dtoa_r+0x162>
 80078fe:	4650      	mov	r0, sl
 8007900:	f7f8 fe10 	bl	8000524 <__aeabi_i2d>
 8007904:	4632      	mov	r2, r6
 8007906:	463b      	mov	r3, r7
 8007908:	f7f9 f8de 	bl	8000ac8 <__aeabi_dcmpeq>
 800790c:	b908      	cbnz	r0, 8007912 <_dtoa_r+0x162>
 800790e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007912:	f1ba 0f16 	cmp.w	sl, #22
 8007916:	d859      	bhi.n	80079cc <_dtoa_r+0x21c>
 8007918:	4970      	ldr	r1, [pc, #448]	; (8007adc <_dtoa_r+0x32c>)
 800791a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800791e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007922:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007926:	f7f9 f8f7 	bl	8000b18 <__aeabi_dcmpgt>
 800792a:	2800      	cmp	r0, #0
 800792c:	d050      	beq.n	80079d0 <_dtoa_r+0x220>
 800792e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007932:	2300      	movs	r3, #0
 8007934:	930f      	str	r3, [sp, #60]	; 0x3c
 8007936:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007938:	1b5d      	subs	r5, r3, r5
 800793a:	f1b5 0801 	subs.w	r8, r5, #1
 800793e:	bf49      	itett	mi
 8007940:	f1c5 0301 	rsbmi	r3, r5, #1
 8007944:	2300      	movpl	r3, #0
 8007946:	9305      	strmi	r3, [sp, #20]
 8007948:	f04f 0800 	movmi.w	r8, #0
 800794c:	bf58      	it	pl
 800794e:	9305      	strpl	r3, [sp, #20]
 8007950:	f1ba 0f00 	cmp.w	sl, #0
 8007954:	db3e      	blt.n	80079d4 <_dtoa_r+0x224>
 8007956:	2300      	movs	r3, #0
 8007958:	44d0      	add	r8, sl
 800795a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800795e:	9307      	str	r3, [sp, #28]
 8007960:	9b06      	ldr	r3, [sp, #24]
 8007962:	2b09      	cmp	r3, #9
 8007964:	f200 8090 	bhi.w	8007a88 <_dtoa_r+0x2d8>
 8007968:	2b05      	cmp	r3, #5
 800796a:	bfc4      	itt	gt
 800796c:	3b04      	subgt	r3, #4
 800796e:	9306      	strgt	r3, [sp, #24]
 8007970:	9b06      	ldr	r3, [sp, #24]
 8007972:	f1a3 0302 	sub.w	r3, r3, #2
 8007976:	bfcc      	ite	gt
 8007978:	2500      	movgt	r5, #0
 800797a:	2501      	movle	r5, #1
 800797c:	2b03      	cmp	r3, #3
 800797e:	f200 808f 	bhi.w	8007aa0 <_dtoa_r+0x2f0>
 8007982:	e8df f003 	tbb	[pc, r3]
 8007986:	7f7d      	.short	0x7f7d
 8007988:	7131      	.short	0x7131
 800798a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800798e:	441d      	add	r5, r3
 8007990:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007994:	2820      	cmp	r0, #32
 8007996:	dd13      	ble.n	80079c0 <_dtoa_r+0x210>
 8007998:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800799c:	9b00      	ldr	r3, [sp, #0]
 800799e:	fa08 f800 	lsl.w	r8, r8, r0
 80079a2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80079a6:	fa23 f000 	lsr.w	r0, r3, r0
 80079aa:	ea48 0000 	orr.w	r0, r8, r0
 80079ae:	f7f8 fda9 	bl	8000504 <__aeabi_ui2d>
 80079b2:	2301      	movs	r3, #1
 80079b4:	4682      	mov	sl, r0
 80079b6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80079ba:	3d01      	subs	r5, #1
 80079bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80079be:	e772      	b.n	80078a6 <_dtoa_r+0xf6>
 80079c0:	9b00      	ldr	r3, [sp, #0]
 80079c2:	f1c0 0020 	rsb	r0, r0, #32
 80079c6:	fa03 f000 	lsl.w	r0, r3, r0
 80079ca:	e7f0      	b.n	80079ae <_dtoa_r+0x1fe>
 80079cc:	2301      	movs	r3, #1
 80079ce:	e7b1      	b.n	8007934 <_dtoa_r+0x184>
 80079d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80079d2:	e7b0      	b.n	8007936 <_dtoa_r+0x186>
 80079d4:	9b05      	ldr	r3, [sp, #20]
 80079d6:	eba3 030a 	sub.w	r3, r3, sl
 80079da:	9305      	str	r3, [sp, #20]
 80079dc:	f1ca 0300 	rsb	r3, sl, #0
 80079e0:	9307      	str	r3, [sp, #28]
 80079e2:	2300      	movs	r3, #0
 80079e4:	930e      	str	r3, [sp, #56]	; 0x38
 80079e6:	e7bb      	b.n	8007960 <_dtoa_r+0x1b0>
 80079e8:	2301      	movs	r3, #1
 80079ea:	930a      	str	r3, [sp, #40]	; 0x28
 80079ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	dd59      	ble.n	8007aa6 <_dtoa_r+0x2f6>
 80079f2:	9302      	str	r3, [sp, #8]
 80079f4:	4699      	mov	r9, r3
 80079f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80079f8:	2200      	movs	r2, #0
 80079fa:	6072      	str	r2, [r6, #4]
 80079fc:	2204      	movs	r2, #4
 80079fe:	f102 0014 	add.w	r0, r2, #20
 8007a02:	4298      	cmp	r0, r3
 8007a04:	6871      	ldr	r1, [r6, #4]
 8007a06:	d953      	bls.n	8007ab0 <_dtoa_r+0x300>
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f001 f9bb 	bl	8008d84 <_Balloc>
 8007a0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a10:	6030      	str	r0, [r6, #0]
 8007a12:	f1b9 0f0e 	cmp.w	r9, #14
 8007a16:	f8d3 b000 	ldr.w	fp, [r3]
 8007a1a:	f200 80e6 	bhi.w	8007bea <_dtoa_r+0x43a>
 8007a1e:	2d00      	cmp	r5, #0
 8007a20:	f000 80e3 	beq.w	8007bea <_dtoa_r+0x43a>
 8007a24:	ed9d 7b00 	vldr	d7, [sp]
 8007a28:	f1ba 0f00 	cmp.w	sl, #0
 8007a2c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007a30:	dd74      	ble.n	8007b1c <_dtoa_r+0x36c>
 8007a32:	4a2a      	ldr	r2, [pc, #168]	; (8007adc <_dtoa_r+0x32c>)
 8007a34:	f00a 030f 	and.w	r3, sl, #15
 8007a38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007a3c:	ed93 7b00 	vldr	d7, [r3]
 8007a40:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007a44:	06f0      	lsls	r0, r6, #27
 8007a46:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007a4a:	d565      	bpl.n	8007b18 <_dtoa_r+0x368>
 8007a4c:	4b24      	ldr	r3, [pc, #144]	; (8007ae0 <_dtoa_r+0x330>)
 8007a4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a52:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a56:	f7f8 fef9 	bl	800084c <__aeabi_ddiv>
 8007a5a:	e9cd 0100 	strd	r0, r1, [sp]
 8007a5e:	f006 060f 	and.w	r6, r6, #15
 8007a62:	2503      	movs	r5, #3
 8007a64:	4f1e      	ldr	r7, [pc, #120]	; (8007ae0 <_dtoa_r+0x330>)
 8007a66:	e04c      	b.n	8007b02 <_dtoa_r+0x352>
 8007a68:	2301      	movs	r3, #1
 8007a6a:	930a      	str	r3, [sp, #40]	; 0x28
 8007a6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a6e:	4453      	add	r3, sl
 8007a70:	f103 0901 	add.w	r9, r3, #1
 8007a74:	9302      	str	r3, [sp, #8]
 8007a76:	464b      	mov	r3, r9
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	bfb8      	it	lt
 8007a7c:	2301      	movlt	r3, #1
 8007a7e:	e7ba      	b.n	80079f6 <_dtoa_r+0x246>
 8007a80:	2300      	movs	r3, #0
 8007a82:	e7b2      	b.n	80079ea <_dtoa_r+0x23a>
 8007a84:	2300      	movs	r3, #0
 8007a86:	e7f0      	b.n	8007a6a <_dtoa_r+0x2ba>
 8007a88:	2501      	movs	r5, #1
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	9306      	str	r3, [sp, #24]
 8007a8e:	950a      	str	r5, [sp, #40]	; 0x28
 8007a90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a94:	9302      	str	r3, [sp, #8]
 8007a96:	4699      	mov	r9, r3
 8007a98:	2200      	movs	r2, #0
 8007a9a:	2312      	movs	r3, #18
 8007a9c:	920b      	str	r2, [sp, #44]	; 0x2c
 8007a9e:	e7aa      	b.n	80079f6 <_dtoa_r+0x246>
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	930a      	str	r3, [sp, #40]	; 0x28
 8007aa4:	e7f4      	b.n	8007a90 <_dtoa_r+0x2e0>
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	9302      	str	r3, [sp, #8]
 8007aaa:	4699      	mov	r9, r3
 8007aac:	461a      	mov	r2, r3
 8007aae:	e7f5      	b.n	8007a9c <_dtoa_r+0x2ec>
 8007ab0:	3101      	adds	r1, #1
 8007ab2:	6071      	str	r1, [r6, #4]
 8007ab4:	0052      	lsls	r2, r2, #1
 8007ab6:	e7a2      	b.n	80079fe <_dtoa_r+0x24e>
 8007ab8:	636f4361 	.word	0x636f4361
 8007abc:	3fd287a7 	.word	0x3fd287a7
 8007ac0:	8b60c8b3 	.word	0x8b60c8b3
 8007ac4:	3fc68a28 	.word	0x3fc68a28
 8007ac8:	509f79fb 	.word	0x509f79fb
 8007acc:	3fd34413 	.word	0x3fd34413
 8007ad0:	7ff00000 	.word	0x7ff00000
 8007ad4:	08009f09 	.word	0x08009f09
 8007ad8:	3ff80000 	.word	0x3ff80000
 8007adc:	0800a030 	.word	0x0800a030
 8007ae0:	0800a008 	.word	0x0800a008
 8007ae4:	08009f91 	.word	0x08009f91
 8007ae8:	07f1      	lsls	r1, r6, #31
 8007aea:	d508      	bpl.n	8007afe <_dtoa_r+0x34e>
 8007aec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007af4:	f7f8 fd80 	bl	80005f8 <__aeabi_dmul>
 8007af8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007afc:	3501      	adds	r5, #1
 8007afe:	1076      	asrs	r6, r6, #1
 8007b00:	3708      	adds	r7, #8
 8007b02:	2e00      	cmp	r6, #0
 8007b04:	d1f0      	bne.n	8007ae8 <_dtoa_r+0x338>
 8007b06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007b0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b0e:	f7f8 fe9d 	bl	800084c <__aeabi_ddiv>
 8007b12:	e9cd 0100 	strd	r0, r1, [sp]
 8007b16:	e01a      	b.n	8007b4e <_dtoa_r+0x39e>
 8007b18:	2502      	movs	r5, #2
 8007b1a:	e7a3      	b.n	8007a64 <_dtoa_r+0x2b4>
 8007b1c:	f000 80a0 	beq.w	8007c60 <_dtoa_r+0x4b0>
 8007b20:	f1ca 0600 	rsb	r6, sl, #0
 8007b24:	4b9f      	ldr	r3, [pc, #636]	; (8007da4 <_dtoa_r+0x5f4>)
 8007b26:	4fa0      	ldr	r7, [pc, #640]	; (8007da8 <_dtoa_r+0x5f8>)
 8007b28:	f006 020f 	and.w	r2, r6, #15
 8007b2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b38:	f7f8 fd5e 	bl	80005f8 <__aeabi_dmul>
 8007b3c:	e9cd 0100 	strd	r0, r1, [sp]
 8007b40:	1136      	asrs	r6, r6, #4
 8007b42:	2300      	movs	r3, #0
 8007b44:	2502      	movs	r5, #2
 8007b46:	2e00      	cmp	r6, #0
 8007b48:	d17f      	bne.n	8007c4a <_dtoa_r+0x49a>
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1e1      	bne.n	8007b12 <_dtoa_r+0x362>
 8007b4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f000 8087 	beq.w	8007c64 <_dtoa_r+0x4b4>
 8007b56:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	4b93      	ldr	r3, [pc, #588]	; (8007dac <_dtoa_r+0x5fc>)
 8007b5e:	4630      	mov	r0, r6
 8007b60:	4639      	mov	r1, r7
 8007b62:	f7f8 ffbb 	bl	8000adc <__aeabi_dcmplt>
 8007b66:	2800      	cmp	r0, #0
 8007b68:	d07c      	beq.n	8007c64 <_dtoa_r+0x4b4>
 8007b6a:	f1b9 0f00 	cmp.w	r9, #0
 8007b6e:	d079      	beq.n	8007c64 <_dtoa_r+0x4b4>
 8007b70:	9b02      	ldr	r3, [sp, #8]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	dd35      	ble.n	8007be2 <_dtoa_r+0x432>
 8007b76:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007b7a:	9308      	str	r3, [sp, #32]
 8007b7c:	4639      	mov	r1, r7
 8007b7e:	2200      	movs	r2, #0
 8007b80:	4b8b      	ldr	r3, [pc, #556]	; (8007db0 <_dtoa_r+0x600>)
 8007b82:	4630      	mov	r0, r6
 8007b84:	f7f8 fd38 	bl	80005f8 <__aeabi_dmul>
 8007b88:	e9cd 0100 	strd	r0, r1, [sp]
 8007b8c:	9f02      	ldr	r7, [sp, #8]
 8007b8e:	3501      	adds	r5, #1
 8007b90:	4628      	mov	r0, r5
 8007b92:	f7f8 fcc7 	bl	8000524 <__aeabi_i2d>
 8007b96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b9a:	f7f8 fd2d 	bl	80005f8 <__aeabi_dmul>
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	4b84      	ldr	r3, [pc, #528]	; (8007db4 <_dtoa_r+0x604>)
 8007ba2:	f7f8 fb73 	bl	800028c <__adddf3>
 8007ba6:	4605      	mov	r5, r0
 8007ba8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007bac:	2f00      	cmp	r7, #0
 8007bae:	d15d      	bne.n	8007c6c <_dtoa_r+0x4bc>
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	4b81      	ldr	r3, [pc, #516]	; (8007db8 <_dtoa_r+0x608>)
 8007bb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bb8:	f7f8 fb66 	bl	8000288 <__aeabi_dsub>
 8007bbc:	462a      	mov	r2, r5
 8007bbe:	4633      	mov	r3, r6
 8007bc0:	e9cd 0100 	strd	r0, r1, [sp]
 8007bc4:	f7f8 ffa8 	bl	8000b18 <__aeabi_dcmpgt>
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	f040 8288 	bne.w	80080de <_dtoa_r+0x92e>
 8007bce:	462a      	mov	r2, r5
 8007bd0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007bd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bd8:	f7f8 ff80 	bl	8000adc <__aeabi_dcmplt>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	f040 827c 	bne.w	80080da <_dtoa_r+0x92a>
 8007be2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007be6:	e9cd 2300 	strd	r2, r3, [sp]
 8007bea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f2c0 8150 	blt.w	8007e92 <_dtoa_r+0x6e2>
 8007bf2:	f1ba 0f0e 	cmp.w	sl, #14
 8007bf6:	f300 814c 	bgt.w	8007e92 <_dtoa_r+0x6e2>
 8007bfa:	4b6a      	ldr	r3, [pc, #424]	; (8007da4 <_dtoa_r+0x5f4>)
 8007bfc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007c00:	ed93 7b00 	vldr	d7, [r3]
 8007c04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007c0c:	f280 80d8 	bge.w	8007dc0 <_dtoa_r+0x610>
 8007c10:	f1b9 0f00 	cmp.w	r9, #0
 8007c14:	f300 80d4 	bgt.w	8007dc0 <_dtoa_r+0x610>
 8007c18:	f040 825e 	bne.w	80080d8 <_dtoa_r+0x928>
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	4b66      	ldr	r3, [pc, #408]	; (8007db8 <_dtoa_r+0x608>)
 8007c20:	ec51 0b17 	vmov	r0, r1, d7
 8007c24:	f7f8 fce8 	bl	80005f8 <__aeabi_dmul>
 8007c28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c2c:	f7f8 ff6a 	bl	8000b04 <__aeabi_dcmpge>
 8007c30:	464f      	mov	r7, r9
 8007c32:	464e      	mov	r6, r9
 8007c34:	2800      	cmp	r0, #0
 8007c36:	f040 8234 	bne.w	80080a2 <_dtoa_r+0x8f2>
 8007c3a:	2331      	movs	r3, #49	; 0x31
 8007c3c:	f10b 0501 	add.w	r5, fp, #1
 8007c40:	f88b 3000 	strb.w	r3, [fp]
 8007c44:	f10a 0a01 	add.w	sl, sl, #1
 8007c48:	e22f      	b.n	80080aa <_dtoa_r+0x8fa>
 8007c4a:	07f2      	lsls	r2, r6, #31
 8007c4c:	d505      	bpl.n	8007c5a <_dtoa_r+0x4aa>
 8007c4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c52:	f7f8 fcd1 	bl	80005f8 <__aeabi_dmul>
 8007c56:	3501      	adds	r5, #1
 8007c58:	2301      	movs	r3, #1
 8007c5a:	1076      	asrs	r6, r6, #1
 8007c5c:	3708      	adds	r7, #8
 8007c5e:	e772      	b.n	8007b46 <_dtoa_r+0x396>
 8007c60:	2502      	movs	r5, #2
 8007c62:	e774      	b.n	8007b4e <_dtoa_r+0x39e>
 8007c64:	f8cd a020 	str.w	sl, [sp, #32]
 8007c68:	464f      	mov	r7, r9
 8007c6a:	e791      	b.n	8007b90 <_dtoa_r+0x3e0>
 8007c6c:	4b4d      	ldr	r3, [pc, #308]	; (8007da4 <_dtoa_r+0x5f4>)
 8007c6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c72:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d047      	beq.n	8007d0c <_dtoa_r+0x55c>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	460b      	mov	r3, r1
 8007c80:	2000      	movs	r0, #0
 8007c82:	494e      	ldr	r1, [pc, #312]	; (8007dbc <_dtoa_r+0x60c>)
 8007c84:	f7f8 fde2 	bl	800084c <__aeabi_ddiv>
 8007c88:	462a      	mov	r2, r5
 8007c8a:	4633      	mov	r3, r6
 8007c8c:	f7f8 fafc 	bl	8000288 <__aeabi_dsub>
 8007c90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007c94:	465d      	mov	r5, fp
 8007c96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c9a:	f7f8 ff5d 	bl	8000b58 <__aeabi_d2iz>
 8007c9e:	4606      	mov	r6, r0
 8007ca0:	f7f8 fc40 	bl	8000524 <__aeabi_i2d>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cac:	f7f8 faec 	bl	8000288 <__aeabi_dsub>
 8007cb0:	3630      	adds	r6, #48	; 0x30
 8007cb2:	f805 6b01 	strb.w	r6, [r5], #1
 8007cb6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007cba:	e9cd 0100 	strd	r0, r1, [sp]
 8007cbe:	f7f8 ff0d 	bl	8000adc <__aeabi_dcmplt>
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	d163      	bne.n	8007d8e <_dtoa_r+0x5de>
 8007cc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cca:	2000      	movs	r0, #0
 8007ccc:	4937      	ldr	r1, [pc, #220]	; (8007dac <_dtoa_r+0x5fc>)
 8007cce:	f7f8 fadb 	bl	8000288 <__aeabi_dsub>
 8007cd2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007cd6:	f7f8 ff01 	bl	8000adc <__aeabi_dcmplt>
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	f040 80b7 	bne.w	8007e4e <_dtoa_r+0x69e>
 8007ce0:	eba5 030b 	sub.w	r3, r5, fp
 8007ce4:	429f      	cmp	r7, r3
 8007ce6:	f77f af7c 	ble.w	8007be2 <_dtoa_r+0x432>
 8007cea:	2200      	movs	r2, #0
 8007cec:	4b30      	ldr	r3, [pc, #192]	; (8007db0 <_dtoa_r+0x600>)
 8007cee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007cf2:	f7f8 fc81 	bl	80005f8 <__aeabi_dmul>
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007cfc:	4b2c      	ldr	r3, [pc, #176]	; (8007db0 <_dtoa_r+0x600>)
 8007cfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d02:	f7f8 fc79 	bl	80005f8 <__aeabi_dmul>
 8007d06:	e9cd 0100 	strd	r0, r1, [sp]
 8007d0a:	e7c4      	b.n	8007c96 <_dtoa_r+0x4e6>
 8007d0c:	462a      	mov	r2, r5
 8007d0e:	4633      	mov	r3, r6
 8007d10:	f7f8 fc72 	bl	80005f8 <__aeabi_dmul>
 8007d14:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007d18:	eb0b 0507 	add.w	r5, fp, r7
 8007d1c:	465e      	mov	r6, fp
 8007d1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d22:	f7f8 ff19 	bl	8000b58 <__aeabi_d2iz>
 8007d26:	4607      	mov	r7, r0
 8007d28:	f7f8 fbfc 	bl	8000524 <__aeabi_i2d>
 8007d2c:	3730      	adds	r7, #48	; 0x30
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d36:	f7f8 faa7 	bl	8000288 <__aeabi_dsub>
 8007d3a:	f806 7b01 	strb.w	r7, [r6], #1
 8007d3e:	42ae      	cmp	r6, r5
 8007d40:	e9cd 0100 	strd	r0, r1, [sp]
 8007d44:	f04f 0200 	mov.w	r2, #0
 8007d48:	d126      	bne.n	8007d98 <_dtoa_r+0x5e8>
 8007d4a:	4b1c      	ldr	r3, [pc, #112]	; (8007dbc <_dtoa_r+0x60c>)
 8007d4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d50:	f7f8 fa9c 	bl	800028c <__adddf3>
 8007d54:	4602      	mov	r2, r0
 8007d56:	460b      	mov	r3, r1
 8007d58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d5c:	f7f8 fedc 	bl	8000b18 <__aeabi_dcmpgt>
 8007d60:	2800      	cmp	r0, #0
 8007d62:	d174      	bne.n	8007e4e <_dtoa_r+0x69e>
 8007d64:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007d68:	2000      	movs	r0, #0
 8007d6a:	4914      	ldr	r1, [pc, #80]	; (8007dbc <_dtoa_r+0x60c>)
 8007d6c:	f7f8 fa8c 	bl	8000288 <__aeabi_dsub>
 8007d70:	4602      	mov	r2, r0
 8007d72:	460b      	mov	r3, r1
 8007d74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d78:	f7f8 feb0 	bl	8000adc <__aeabi_dcmplt>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	f43f af30 	beq.w	8007be2 <_dtoa_r+0x432>
 8007d82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d86:	2b30      	cmp	r3, #48	; 0x30
 8007d88:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007d8c:	d002      	beq.n	8007d94 <_dtoa_r+0x5e4>
 8007d8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007d92:	e04a      	b.n	8007e2a <_dtoa_r+0x67a>
 8007d94:	4615      	mov	r5, r2
 8007d96:	e7f4      	b.n	8007d82 <_dtoa_r+0x5d2>
 8007d98:	4b05      	ldr	r3, [pc, #20]	; (8007db0 <_dtoa_r+0x600>)
 8007d9a:	f7f8 fc2d 	bl	80005f8 <__aeabi_dmul>
 8007d9e:	e9cd 0100 	strd	r0, r1, [sp]
 8007da2:	e7bc      	b.n	8007d1e <_dtoa_r+0x56e>
 8007da4:	0800a030 	.word	0x0800a030
 8007da8:	0800a008 	.word	0x0800a008
 8007dac:	3ff00000 	.word	0x3ff00000
 8007db0:	40240000 	.word	0x40240000
 8007db4:	401c0000 	.word	0x401c0000
 8007db8:	40140000 	.word	0x40140000
 8007dbc:	3fe00000 	.word	0x3fe00000
 8007dc0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007dc4:	465d      	mov	r5, fp
 8007dc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dca:	4630      	mov	r0, r6
 8007dcc:	4639      	mov	r1, r7
 8007dce:	f7f8 fd3d 	bl	800084c <__aeabi_ddiv>
 8007dd2:	f7f8 fec1 	bl	8000b58 <__aeabi_d2iz>
 8007dd6:	4680      	mov	r8, r0
 8007dd8:	f7f8 fba4 	bl	8000524 <__aeabi_i2d>
 8007ddc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007de0:	f7f8 fc0a 	bl	80005f8 <__aeabi_dmul>
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	4630      	mov	r0, r6
 8007dea:	4639      	mov	r1, r7
 8007dec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007df0:	f7f8 fa4a 	bl	8000288 <__aeabi_dsub>
 8007df4:	f805 6b01 	strb.w	r6, [r5], #1
 8007df8:	eba5 060b 	sub.w	r6, r5, fp
 8007dfc:	45b1      	cmp	r9, r6
 8007dfe:	4602      	mov	r2, r0
 8007e00:	460b      	mov	r3, r1
 8007e02:	d139      	bne.n	8007e78 <_dtoa_r+0x6c8>
 8007e04:	f7f8 fa42 	bl	800028c <__adddf3>
 8007e08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e0c:	4606      	mov	r6, r0
 8007e0e:	460f      	mov	r7, r1
 8007e10:	f7f8 fe82 	bl	8000b18 <__aeabi_dcmpgt>
 8007e14:	b9c8      	cbnz	r0, 8007e4a <_dtoa_r+0x69a>
 8007e16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	4639      	mov	r1, r7
 8007e1e:	f7f8 fe53 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e22:	b110      	cbz	r0, 8007e2a <_dtoa_r+0x67a>
 8007e24:	f018 0f01 	tst.w	r8, #1
 8007e28:	d10f      	bne.n	8007e4a <_dtoa_r+0x69a>
 8007e2a:	9904      	ldr	r1, [sp, #16]
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f000 ffdd 	bl	8008dec <_Bfree>
 8007e32:	2300      	movs	r3, #0
 8007e34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e36:	702b      	strb	r3, [r5, #0]
 8007e38:	f10a 0301 	add.w	r3, sl, #1
 8007e3c:	6013      	str	r3, [r2, #0]
 8007e3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f000 8241 	beq.w	80082c8 <_dtoa_r+0xb18>
 8007e46:	601d      	str	r5, [r3, #0]
 8007e48:	e23e      	b.n	80082c8 <_dtoa_r+0xb18>
 8007e4a:	f8cd a020 	str.w	sl, [sp, #32]
 8007e4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007e52:	2a39      	cmp	r2, #57	; 0x39
 8007e54:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8007e58:	d108      	bne.n	8007e6c <_dtoa_r+0x6bc>
 8007e5a:	459b      	cmp	fp, r3
 8007e5c:	d10a      	bne.n	8007e74 <_dtoa_r+0x6c4>
 8007e5e:	9b08      	ldr	r3, [sp, #32]
 8007e60:	3301      	adds	r3, #1
 8007e62:	9308      	str	r3, [sp, #32]
 8007e64:	2330      	movs	r3, #48	; 0x30
 8007e66:	f88b 3000 	strb.w	r3, [fp]
 8007e6a:	465b      	mov	r3, fp
 8007e6c:	781a      	ldrb	r2, [r3, #0]
 8007e6e:	3201      	adds	r2, #1
 8007e70:	701a      	strb	r2, [r3, #0]
 8007e72:	e78c      	b.n	8007d8e <_dtoa_r+0x5de>
 8007e74:	461d      	mov	r5, r3
 8007e76:	e7ea      	b.n	8007e4e <_dtoa_r+0x69e>
 8007e78:	2200      	movs	r2, #0
 8007e7a:	4b9b      	ldr	r3, [pc, #620]	; (80080e8 <_dtoa_r+0x938>)
 8007e7c:	f7f8 fbbc 	bl	80005f8 <__aeabi_dmul>
 8007e80:	2200      	movs	r2, #0
 8007e82:	2300      	movs	r3, #0
 8007e84:	4606      	mov	r6, r0
 8007e86:	460f      	mov	r7, r1
 8007e88:	f7f8 fe1e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d09a      	beq.n	8007dc6 <_dtoa_r+0x616>
 8007e90:	e7cb      	b.n	8007e2a <_dtoa_r+0x67a>
 8007e92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e94:	2a00      	cmp	r2, #0
 8007e96:	f000 808b 	beq.w	8007fb0 <_dtoa_r+0x800>
 8007e9a:	9a06      	ldr	r2, [sp, #24]
 8007e9c:	2a01      	cmp	r2, #1
 8007e9e:	dc6e      	bgt.n	8007f7e <_dtoa_r+0x7ce>
 8007ea0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007ea2:	2a00      	cmp	r2, #0
 8007ea4:	d067      	beq.n	8007f76 <_dtoa_r+0x7c6>
 8007ea6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007eaa:	9f07      	ldr	r7, [sp, #28]
 8007eac:	9d05      	ldr	r5, [sp, #20]
 8007eae:	9a05      	ldr	r2, [sp, #20]
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	441a      	add	r2, r3
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	9205      	str	r2, [sp, #20]
 8007eb8:	4498      	add	r8, r3
 8007eba:	f001 f875 	bl	8008fa8 <__i2b>
 8007ebe:	4606      	mov	r6, r0
 8007ec0:	2d00      	cmp	r5, #0
 8007ec2:	dd0c      	ble.n	8007ede <_dtoa_r+0x72e>
 8007ec4:	f1b8 0f00 	cmp.w	r8, #0
 8007ec8:	dd09      	ble.n	8007ede <_dtoa_r+0x72e>
 8007eca:	4545      	cmp	r5, r8
 8007ecc:	9a05      	ldr	r2, [sp, #20]
 8007ece:	462b      	mov	r3, r5
 8007ed0:	bfa8      	it	ge
 8007ed2:	4643      	movge	r3, r8
 8007ed4:	1ad2      	subs	r2, r2, r3
 8007ed6:	9205      	str	r2, [sp, #20]
 8007ed8:	1aed      	subs	r5, r5, r3
 8007eda:	eba8 0803 	sub.w	r8, r8, r3
 8007ede:	9b07      	ldr	r3, [sp, #28]
 8007ee0:	b1eb      	cbz	r3, 8007f1e <_dtoa_r+0x76e>
 8007ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d067      	beq.n	8007fb8 <_dtoa_r+0x808>
 8007ee8:	b18f      	cbz	r7, 8007f0e <_dtoa_r+0x75e>
 8007eea:	4631      	mov	r1, r6
 8007eec:	463a      	mov	r2, r7
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f001 f8fa 	bl	80090e8 <__pow5mult>
 8007ef4:	9a04      	ldr	r2, [sp, #16]
 8007ef6:	4601      	mov	r1, r0
 8007ef8:	4606      	mov	r6, r0
 8007efa:	4620      	mov	r0, r4
 8007efc:	f001 f85d 	bl	8008fba <__multiply>
 8007f00:	9904      	ldr	r1, [sp, #16]
 8007f02:	9008      	str	r0, [sp, #32]
 8007f04:	4620      	mov	r0, r4
 8007f06:	f000 ff71 	bl	8008dec <_Bfree>
 8007f0a:	9b08      	ldr	r3, [sp, #32]
 8007f0c:	9304      	str	r3, [sp, #16]
 8007f0e:	9b07      	ldr	r3, [sp, #28]
 8007f10:	1bda      	subs	r2, r3, r7
 8007f12:	d004      	beq.n	8007f1e <_dtoa_r+0x76e>
 8007f14:	9904      	ldr	r1, [sp, #16]
 8007f16:	4620      	mov	r0, r4
 8007f18:	f001 f8e6 	bl	80090e8 <__pow5mult>
 8007f1c:	9004      	str	r0, [sp, #16]
 8007f1e:	2101      	movs	r1, #1
 8007f20:	4620      	mov	r0, r4
 8007f22:	f001 f841 	bl	8008fa8 <__i2b>
 8007f26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f28:	4607      	mov	r7, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 81d0 	beq.w	80082d0 <_dtoa_r+0xb20>
 8007f30:	461a      	mov	r2, r3
 8007f32:	4601      	mov	r1, r0
 8007f34:	4620      	mov	r0, r4
 8007f36:	f001 f8d7 	bl	80090e8 <__pow5mult>
 8007f3a:	9b06      	ldr	r3, [sp, #24]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	4607      	mov	r7, r0
 8007f40:	dc40      	bgt.n	8007fc4 <_dtoa_r+0x814>
 8007f42:	9b00      	ldr	r3, [sp, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d139      	bne.n	8007fbc <_dtoa_r+0x80c>
 8007f48:	9b01      	ldr	r3, [sp, #4]
 8007f4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d136      	bne.n	8007fc0 <_dtoa_r+0x810>
 8007f52:	9b01      	ldr	r3, [sp, #4]
 8007f54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f58:	0d1b      	lsrs	r3, r3, #20
 8007f5a:	051b      	lsls	r3, r3, #20
 8007f5c:	b12b      	cbz	r3, 8007f6a <_dtoa_r+0x7ba>
 8007f5e:	9b05      	ldr	r3, [sp, #20]
 8007f60:	3301      	adds	r3, #1
 8007f62:	9305      	str	r3, [sp, #20]
 8007f64:	f108 0801 	add.w	r8, r8, #1
 8007f68:	2301      	movs	r3, #1
 8007f6a:	9307      	str	r3, [sp, #28]
 8007f6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d12a      	bne.n	8007fc8 <_dtoa_r+0x818>
 8007f72:	2001      	movs	r0, #1
 8007f74:	e030      	b.n	8007fd8 <_dtoa_r+0x828>
 8007f76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f78:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f7c:	e795      	b.n	8007eaa <_dtoa_r+0x6fa>
 8007f7e:	9b07      	ldr	r3, [sp, #28]
 8007f80:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8007f84:	42bb      	cmp	r3, r7
 8007f86:	bfbf      	itttt	lt
 8007f88:	9b07      	ldrlt	r3, [sp, #28]
 8007f8a:	9707      	strlt	r7, [sp, #28]
 8007f8c:	1afa      	sublt	r2, r7, r3
 8007f8e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007f90:	bfbb      	ittet	lt
 8007f92:	189b      	addlt	r3, r3, r2
 8007f94:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007f96:	1bdf      	subge	r7, r3, r7
 8007f98:	2700      	movlt	r7, #0
 8007f9a:	f1b9 0f00 	cmp.w	r9, #0
 8007f9e:	bfb5      	itete	lt
 8007fa0:	9b05      	ldrlt	r3, [sp, #20]
 8007fa2:	9d05      	ldrge	r5, [sp, #20]
 8007fa4:	eba3 0509 	sublt.w	r5, r3, r9
 8007fa8:	464b      	movge	r3, r9
 8007faa:	bfb8      	it	lt
 8007fac:	2300      	movlt	r3, #0
 8007fae:	e77e      	b.n	8007eae <_dtoa_r+0x6fe>
 8007fb0:	9f07      	ldr	r7, [sp, #28]
 8007fb2:	9d05      	ldr	r5, [sp, #20]
 8007fb4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007fb6:	e783      	b.n	8007ec0 <_dtoa_r+0x710>
 8007fb8:	9a07      	ldr	r2, [sp, #28]
 8007fba:	e7ab      	b.n	8007f14 <_dtoa_r+0x764>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	e7d4      	b.n	8007f6a <_dtoa_r+0x7ba>
 8007fc0:	9b00      	ldr	r3, [sp, #0]
 8007fc2:	e7d2      	b.n	8007f6a <_dtoa_r+0x7ba>
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	9307      	str	r3, [sp, #28]
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007fce:	6918      	ldr	r0, [r3, #16]
 8007fd0:	f000 ff9c 	bl	8008f0c <__hi0bits>
 8007fd4:	f1c0 0020 	rsb	r0, r0, #32
 8007fd8:	4440      	add	r0, r8
 8007fda:	f010 001f 	ands.w	r0, r0, #31
 8007fde:	d047      	beq.n	8008070 <_dtoa_r+0x8c0>
 8007fe0:	f1c0 0320 	rsb	r3, r0, #32
 8007fe4:	2b04      	cmp	r3, #4
 8007fe6:	dd3b      	ble.n	8008060 <_dtoa_r+0x8b0>
 8007fe8:	9b05      	ldr	r3, [sp, #20]
 8007fea:	f1c0 001c 	rsb	r0, r0, #28
 8007fee:	4403      	add	r3, r0
 8007ff0:	9305      	str	r3, [sp, #20]
 8007ff2:	4405      	add	r5, r0
 8007ff4:	4480      	add	r8, r0
 8007ff6:	9b05      	ldr	r3, [sp, #20]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	dd05      	ble.n	8008008 <_dtoa_r+0x858>
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	9904      	ldr	r1, [sp, #16]
 8008000:	4620      	mov	r0, r4
 8008002:	f001 f8bf 	bl	8009184 <__lshift>
 8008006:	9004      	str	r0, [sp, #16]
 8008008:	f1b8 0f00 	cmp.w	r8, #0
 800800c:	dd05      	ble.n	800801a <_dtoa_r+0x86a>
 800800e:	4639      	mov	r1, r7
 8008010:	4642      	mov	r2, r8
 8008012:	4620      	mov	r0, r4
 8008014:	f001 f8b6 	bl	8009184 <__lshift>
 8008018:	4607      	mov	r7, r0
 800801a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800801c:	b353      	cbz	r3, 8008074 <_dtoa_r+0x8c4>
 800801e:	4639      	mov	r1, r7
 8008020:	9804      	ldr	r0, [sp, #16]
 8008022:	f001 f903 	bl	800922c <__mcmp>
 8008026:	2800      	cmp	r0, #0
 8008028:	da24      	bge.n	8008074 <_dtoa_r+0x8c4>
 800802a:	2300      	movs	r3, #0
 800802c:	220a      	movs	r2, #10
 800802e:	9904      	ldr	r1, [sp, #16]
 8008030:	4620      	mov	r0, r4
 8008032:	f000 fef2 	bl	8008e1a <__multadd>
 8008036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008038:	9004      	str	r0, [sp, #16]
 800803a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 814d 	beq.w	80082de <_dtoa_r+0xb2e>
 8008044:	2300      	movs	r3, #0
 8008046:	4631      	mov	r1, r6
 8008048:	220a      	movs	r2, #10
 800804a:	4620      	mov	r0, r4
 800804c:	f000 fee5 	bl	8008e1a <__multadd>
 8008050:	9b02      	ldr	r3, [sp, #8]
 8008052:	2b00      	cmp	r3, #0
 8008054:	4606      	mov	r6, r0
 8008056:	dc4f      	bgt.n	80080f8 <_dtoa_r+0x948>
 8008058:	9b06      	ldr	r3, [sp, #24]
 800805a:	2b02      	cmp	r3, #2
 800805c:	dd4c      	ble.n	80080f8 <_dtoa_r+0x948>
 800805e:	e011      	b.n	8008084 <_dtoa_r+0x8d4>
 8008060:	d0c9      	beq.n	8007ff6 <_dtoa_r+0x846>
 8008062:	9a05      	ldr	r2, [sp, #20]
 8008064:	331c      	adds	r3, #28
 8008066:	441a      	add	r2, r3
 8008068:	9205      	str	r2, [sp, #20]
 800806a:	441d      	add	r5, r3
 800806c:	4498      	add	r8, r3
 800806e:	e7c2      	b.n	8007ff6 <_dtoa_r+0x846>
 8008070:	4603      	mov	r3, r0
 8008072:	e7f6      	b.n	8008062 <_dtoa_r+0x8b2>
 8008074:	f1b9 0f00 	cmp.w	r9, #0
 8008078:	dc38      	bgt.n	80080ec <_dtoa_r+0x93c>
 800807a:	9b06      	ldr	r3, [sp, #24]
 800807c:	2b02      	cmp	r3, #2
 800807e:	dd35      	ble.n	80080ec <_dtoa_r+0x93c>
 8008080:	f8cd 9008 	str.w	r9, [sp, #8]
 8008084:	9b02      	ldr	r3, [sp, #8]
 8008086:	b963      	cbnz	r3, 80080a2 <_dtoa_r+0x8f2>
 8008088:	4639      	mov	r1, r7
 800808a:	2205      	movs	r2, #5
 800808c:	4620      	mov	r0, r4
 800808e:	f000 fec4 	bl	8008e1a <__multadd>
 8008092:	4601      	mov	r1, r0
 8008094:	4607      	mov	r7, r0
 8008096:	9804      	ldr	r0, [sp, #16]
 8008098:	f001 f8c8 	bl	800922c <__mcmp>
 800809c:	2800      	cmp	r0, #0
 800809e:	f73f adcc 	bgt.w	8007c3a <_dtoa_r+0x48a>
 80080a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080a4:	465d      	mov	r5, fp
 80080a6:	ea6f 0a03 	mvn.w	sl, r3
 80080aa:	f04f 0900 	mov.w	r9, #0
 80080ae:	4639      	mov	r1, r7
 80080b0:	4620      	mov	r0, r4
 80080b2:	f000 fe9b 	bl	8008dec <_Bfree>
 80080b6:	2e00      	cmp	r6, #0
 80080b8:	f43f aeb7 	beq.w	8007e2a <_dtoa_r+0x67a>
 80080bc:	f1b9 0f00 	cmp.w	r9, #0
 80080c0:	d005      	beq.n	80080ce <_dtoa_r+0x91e>
 80080c2:	45b1      	cmp	r9, r6
 80080c4:	d003      	beq.n	80080ce <_dtoa_r+0x91e>
 80080c6:	4649      	mov	r1, r9
 80080c8:	4620      	mov	r0, r4
 80080ca:	f000 fe8f 	bl	8008dec <_Bfree>
 80080ce:	4631      	mov	r1, r6
 80080d0:	4620      	mov	r0, r4
 80080d2:	f000 fe8b 	bl	8008dec <_Bfree>
 80080d6:	e6a8      	b.n	8007e2a <_dtoa_r+0x67a>
 80080d8:	2700      	movs	r7, #0
 80080da:	463e      	mov	r6, r7
 80080dc:	e7e1      	b.n	80080a2 <_dtoa_r+0x8f2>
 80080de:	f8dd a020 	ldr.w	sl, [sp, #32]
 80080e2:	463e      	mov	r6, r7
 80080e4:	e5a9      	b.n	8007c3a <_dtoa_r+0x48a>
 80080e6:	bf00      	nop
 80080e8:	40240000 	.word	0x40240000
 80080ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ee:	f8cd 9008 	str.w	r9, [sp, #8]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f000 80fa 	beq.w	80082ec <_dtoa_r+0xb3c>
 80080f8:	2d00      	cmp	r5, #0
 80080fa:	dd05      	ble.n	8008108 <_dtoa_r+0x958>
 80080fc:	4631      	mov	r1, r6
 80080fe:	462a      	mov	r2, r5
 8008100:	4620      	mov	r0, r4
 8008102:	f001 f83f 	bl	8009184 <__lshift>
 8008106:	4606      	mov	r6, r0
 8008108:	9b07      	ldr	r3, [sp, #28]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d04c      	beq.n	80081a8 <_dtoa_r+0x9f8>
 800810e:	6871      	ldr	r1, [r6, #4]
 8008110:	4620      	mov	r0, r4
 8008112:	f000 fe37 	bl	8008d84 <_Balloc>
 8008116:	6932      	ldr	r2, [r6, #16]
 8008118:	3202      	adds	r2, #2
 800811a:	4605      	mov	r5, r0
 800811c:	0092      	lsls	r2, r2, #2
 800811e:	f106 010c 	add.w	r1, r6, #12
 8008122:	300c      	adds	r0, #12
 8008124:	f7fd fc54 	bl	80059d0 <memcpy>
 8008128:	2201      	movs	r2, #1
 800812a:	4629      	mov	r1, r5
 800812c:	4620      	mov	r0, r4
 800812e:	f001 f829 	bl	8009184 <__lshift>
 8008132:	9b00      	ldr	r3, [sp, #0]
 8008134:	f8cd b014 	str.w	fp, [sp, #20]
 8008138:	f003 0301 	and.w	r3, r3, #1
 800813c:	46b1      	mov	r9, r6
 800813e:	9307      	str	r3, [sp, #28]
 8008140:	4606      	mov	r6, r0
 8008142:	4639      	mov	r1, r7
 8008144:	9804      	ldr	r0, [sp, #16]
 8008146:	f7ff faa5 	bl	8007694 <quorem>
 800814a:	4649      	mov	r1, r9
 800814c:	4605      	mov	r5, r0
 800814e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008152:	9804      	ldr	r0, [sp, #16]
 8008154:	f001 f86a 	bl	800922c <__mcmp>
 8008158:	4632      	mov	r2, r6
 800815a:	9000      	str	r0, [sp, #0]
 800815c:	4639      	mov	r1, r7
 800815e:	4620      	mov	r0, r4
 8008160:	f001 f87e 	bl	8009260 <__mdiff>
 8008164:	68c3      	ldr	r3, [r0, #12]
 8008166:	4602      	mov	r2, r0
 8008168:	bb03      	cbnz	r3, 80081ac <_dtoa_r+0x9fc>
 800816a:	4601      	mov	r1, r0
 800816c:	9008      	str	r0, [sp, #32]
 800816e:	9804      	ldr	r0, [sp, #16]
 8008170:	f001 f85c 	bl	800922c <__mcmp>
 8008174:	9a08      	ldr	r2, [sp, #32]
 8008176:	4603      	mov	r3, r0
 8008178:	4611      	mov	r1, r2
 800817a:	4620      	mov	r0, r4
 800817c:	9308      	str	r3, [sp, #32]
 800817e:	f000 fe35 	bl	8008dec <_Bfree>
 8008182:	9b08      	ldr	r3, [sp, #32]
 8008184:	b9a3      	cbnz	r3, 80081b0 <_dtoa_r+0xa00>
 8008186:	9a06      	ldr	r2, [sp, #24]
 8008188:	b992      	cbnz	r2, 80081b0 <_dtoa_r+0xa00>
 800818a:	9a07      	ldr	r2, [sp, #28]
 800818c:	b982      	cbnz	r2, 80081b0 <_dtoa_r+0xa00>
 800818e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008192:	d029      	beq.n	80081e8 <_dtoa_r+0xa38>
 8008194:	9b00      	ldr	r3, [sp, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	dd01      	ble.n	800819e <_dtoa_r+0x9ee>
 800819a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800819e:	9b05      	ldr	r3, [sp, #20]
 80081a0:	1c5d      	adds	r5, r3, #1
 80081a2:	f883 8000 	strb.w	r8, [r3]
 80081a6:	e782      	b.n	80080ae <_dtoa_r+0x8fe>
 80081a8:	4630      	mov	r0, r6
 80081aa:	e7c2      	b.n	8008132 <_dtoa_r+0x982>
 80081ac:	2301      	movs	r3, #1
 80081ae:	e7e3      	b.n	8008178 <_dtoa_r+0x9c8>
 80081b0:	9a00      	ldr	r2, [sp, #0]
 80081b2:	2a00      	cmp	r2, #0
 80081b4:	db04      	blt.n	80081c0 <_dtoa_r+0xa10>
 80081b6:	d125      	bne.n	8008204 <_dtoa_r+0xa54>
 80081b8:	9a06      	ldr	r2, [sp, #24]
 80081ba:	bb1a      	cbnz	r2, 8008204 <_dtoa_r+0xa54>
 80081bc:	9a07      	ldr	r2, [sp, #28]
 80081be:	bb0a      	cbnz	r2, 8008204 <_dtoa_r+0xa54>
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	ddec      	ble.n	800819e <_dtoa_r+0x9ee>
 80081c4:	2201      	movs	r2, #1
 80081c6:	9904      	ldr	r1, [sp, #16]
 80081c8:	4620      	mov	r0, r4
 80081ca:	f000 ffdb 	bl	8009184 <__lshift>
 80081ce:	4639      	mov	r1, r7
 80081d0:	9004      	str	r0, [sp, #16]
 80081d2:	f001 f82b 	bl	800922c <__mcmp>
 80081d6:	2800      	cmp	r0, #0
 80081d8:	dc03      	bgt.n	80081e2 <_dtoa_r+0xa32>
 80081da:	d1e0      	bne.n	800819e <_dtoa_r+0x9ee>
 80081dc:	f018 0f01 	tst.w	r8, #1
 80081e0:	d0dd      	beq.n	800819e <_dtoa_r+0x9ee>
 80081e2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80081e6:	d1d8      	bne.n	800819a <_dtoa_r+0x9ea>
 80081e8:	9b05      	ldr	r3, [sp, #20]
 80081ea:	9a05      	ldr	r2, [sp, #20]
 80081ec:	1c5d      	adds	r5, r3, #1
 80081ee:	2339      	movs	r3, #57	; 0x39
 80081f0:	7013      	strb	r3, [r2, #0]
 80081f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80081f6:	2b39      	cmp	r3, #57	; 0x39
 80081f8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80081fc:	d04f      	beq.n	800829e <_dtoa_r+0xaee>
 80081fe:	3301      	adds	r3, #1
 8008200:	7013      	strb	r3, [r2, #0]
 8008202:	e754      	b.n	80080ae <_dtoa_r+0x8fe>
 8008204:	9a05      	ldr	r2, [sp, #20]
 8008206:	2b00      	cmp	r3, #0
 8008208:	f102 0501 	add.w	r5, r2, #1
 800820c:	dd06      	ble.n	800821c <_dtoa_r+0xa6c>
 800820e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008212:	d0e9      	beq.n	80081e8 <_dtoa_r+0xa38>
 8008214:	f108 0801 	add.w	r8, r8, #1
 8008218:	9b05      	ldr	r3, [sp, #20]
 800821a:	e7c2      	b.n	80081a2 <_dtoa_r+0x9f2>
 800821c:	9a02      	ldr	r2, [sp, #8]
 800821e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008222:	eba5 030b 	sub.w	r3, r5, fp
 8008226:	4293      	cmp	r3, r2
 8008228:	d021      	beq.n	800826e <_dtoa_r+0xabe>
 800822a:	2300      	movs	r3, #0
 800822c:	220a      	movs	r2, #10
 800822e:	9904      	ldr	r1, [sp, #16]
 8008230:	4620      	mov	r0, r4
 8008232:	f000 fdf2 	bl	8008e1a <__multadd>
 8008236:	45b1      	cmp	r9, r6
 8008238:	9004      	str	r0, [sp, #16]
 800823a:	f04f 0300 	mov.w	r3, #0
 800823e:	f04f 020a 	mov.w	r2, #10
 8008242:	4649      	mov	r1, r9
 8008244:	4620      	mov	r0, r4
 8008246:	d105      	bne.n	8008254 <_dtoa_r+0xaa4>
 8008248:	f000 fde7 	bl	8008e1a <__multadd>
 800824c:	4681      	mov	r9, r0
 800824e:	4606      	mov	r6, r0
 8008250:	9505      	str	r5, [sp, #20]
 8008252:	e776      	b.n	8008142 <_dtoa_r+0x992>
 8008254:	f000 fde1 	bl	8008e1a <__multadd>
 8008258:	4631      	mov	r1, r6
 800825a:	4681      	mov	r9, r0
 800825c:	2300      	movs	r3, #0
 800825e:	220a      	movs	r2, #10
 8008260:	4620      	mov	r0, r4
 8008262:	f000 fdda 	bl	8008e1a <__multadd>
 8008266:	4606      	mov	r6, r0
 8008268:	e7f2      	b.n	8008250 <_dtoa_r+0xaa0>
 800826a:	f04f 0900 	mov.w	r9, #0
 800826e:	2201      	movs	r2, #1
 8008270:	9904      	ldr	r1, [sp, #16]
 8008272:	4620      	mov	r0, r4
 8008274:	f000 ff86 	bl	8009184 <__lshift>
 8008278:	4639      	mov	r1, r7
 800827a:	9004      	str	r0, [sp, #16]
 800827c:	f000 ffd6 	bl	800922c <__mcmp>
 8008280:	2800      	cmp	r0, #0
 8008282:	dcb6      	bgt.n	80081f2 <_dtoa_r+0xa42>
 8008284:	d102      	bne.n	800828c <_dtoa_r+0xadc>
 8008286:	f018 0f01 	tst.w	r8, #1
 800828a:	d1b2      	bne.n	80081f2 <_dtoa_r+0xa42>
 800828c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008290:	2b30      	cmp	r3, #48	; 0x30
 8008292:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008296:	f47f af0a 	bne.w	80080ae <_dtoa_r+0x8fe>
 800829a:	4615      	mov	r5, r2
 800829c:	e7f6      	b.n	800828c <_dtoa_r+0xadc>
 800829e:	4593      	cmp	fp, r2
 80082a0:	d105      	bne.n	80082ae <_dtoa_r+0xafe>
 80082a2:	2331      	movs	r3, #49	; 0x31
 80082a4:	f10a 0a01 	add.w	sl, sl, #1
 80082a8:	f88b 3000 	strb.w	r3, [fp]
 80082ac:	e6ff      	b.n	80080ae <_dtoa_r+0x8fe>
 80082ae:	4615      	mov	r5, r2
 80082b0:	e79f      	b.n	80081f2 <_dtoa_r+0xa42>
 80082b2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008318 <_dtoa_r+0xb68>
 80082b6:	e007      	b.n	80082c8 <_dtoa_r+0xb18>
 80082b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082ba:	f8df b060 	ldr.w	fp, [pc, #96]	; 800831c <_dtoa_r+0xb6c>
 80082be:	b11b      	cbz	r3, 80082c8 <_dtoa_r+0xb18>
 80082c0:	f10b 0308 	add.w	r3, fp, #8
 80082c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082c6:	6013      	str	r3, [r2, #0]
 80082c8:	4658      	mov	r0, fp
 80082ca:	b017      	add	sp, #92	; 0x5c
 80082cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d0:	9b06      	ldr	r3, [sp, #24]
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	f77f ae35 	ble.w	8007f42 <_dtoa_r+0x792>
 80082d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082da:	9307      	str	r3, [sp, #28]
 80082dc:	e649      	b.n	8007f72 <_dtoa_r+0x7c2>
 80082de:	9b02      	ldr	r3, [sp, #8]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	dc03      	bgt.n	80082ec <_dtoa_r+0xb3c>
 80082e4:	9b06      	ldr	r3, [sp, #24]
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	f73f aecc 	bgt.w	8008084 <_dtoa_r+0x8d4>
 80082ec:	465d      	mov	r5, fp
 80082ee:	4639      	mov	r1, r7
 80082f0:	9804      	ldr	r0, [sp, #16]
 80082f2:	f7ff f9cf 	bl	8007694 <quorem>
 80082f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80082fa:	f805 8b01 	strb.w	r8, [r5], #1
 80082fe:	9a02      	ldr	r2, [sp, #8]
 8008300:	eba5 030b 	sub.w	r3, r5, fp
 8008304:	429a      	cmp	r2, r3
 8008306:	ddb0      	ble.n	800826a <_dtoa_r+0xaba>
 8008308:	2300      	movs	r3, #0
 800830a:	220a      	movs	r2, #10
 800830c:	9904      	ldr	r1, [sp, #16]
 800830e:	4620      	mov	r0, r4
 8008310:	f000 fd83 	bl	8008e1a <__multadd>
 8008314:	9004      	str	r0, [sp, #16]
 8008316:	e7ea      	b.n	80082ee <_dtoa_r+0xb3e>
 8008318:	08009f08 	.word	0x08009f08
 800831c:	08009f88 	.word	0x08009f88

08008320 <__sflush_r>:
 8008320:	898a      	ldrh	r2, [r1, #12]
 8008322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008326:	4605      	mov	r5, r0
 8008328:	0710      	lsls	r0, r2, #28
 800832a:	460c      	mov	r4, r1
 800832c:	d458      	bmi.n	80083e0 <__sflush_r+0xc0>
 800832e:	684b      	ldr	r3, [r1, #4]
 8008330:	2b00      	cmp	r3, #0
 8008332:	dc05      	bgt.n	8008340 <__sflush_r+0x20>
 8008334:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008336:	2b00      	cmp	r3, #0
 8008338:	dc02      	bgt.n	8008340 <__sflush_r+0x20>
 800833a:	2000      	movs	r0, #0
 800833c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008340:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008342:	2e00      	cmp	r6, #0
 8008344:	d0f9      	beq.n	800833a <__sflush_r+0x1a>
 8008346:	2300      	movs	r3, #0
 8008348:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800834c:	682f      	ldr	r7, [r5, #0]
 800834e:	6a21      	ldr	r1, [r4, #32]
 8008350:	602b      	str	r3, [r5, #0]
 8008352:	d032      	beq.n	80083ba <__sflush_r+0x9a>
 8008354:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008356:	89a3      	ldrh	r3, [r4, #12]
 8008358:	075a      	lsls	r2, r3, #29
 800835a:	d505      	bpl.n	8008368 <__sflush_r+0x48>
 800835c:	6863      	ldr	r3, [r4, #4]
 800835e:	1ac0      	subs	r0, r0, r3
 8008360:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008362:	b10b      	cbz	r3, 8008368 <__sflush_r+0x48>
 8008364:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008366:	1ac0      	subs	r0, r0, r3
 8008368:	2300      	movs	r3, #0
 800836a:	4602      	mov	r2, r0
 800836c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800836e:	6a21      	ldr	r1, [r4, #32]
 8008370:	4628      	mov	r0, r5
 8008372:	47b0      	blx	r6
 8008374:	1c43      	adds	r3, r0, #1
 8008376:	89a3      	ldrh	r3, [r4, #12]
 8008378:	d106      	bne.n	8008388 <__sflush_r+0x68>
 800837a:	6829      	ldr	r1, [r5, #0]
 800837c:	291d      	cmp	r1, #29
 800837e:	d848      	bhi.n	8008412 <__sflush_r+0xf2>
 8008380:	4a29      	ldr	r2, [pc, #164]	; (8008428 <__sflush_r+0x108>)
 8008382:	40ca      	lsrs	r2, r1
 8008384:	07d6      	lsls	r6, r2, #31
 8008386:	d544      	bpl.n	8008412 <__sflush_r+0xf2>
 8008388:	2200      	movs	r2, #0
 800838a:	6062      	str	r2, [r4, #4]
 800838c:	04d9      	lsls	r1, r3, #19
 800838e:	6922      	ldr	r2, [r4, #16]
 8008390:	6022      	str	r2, [r4, #0]
 8008392:	d504      	bpl.n	800839e <__sflush_r+0x7e>
 8008394:	1c42      	adds	r2, r0, #1
 8008396:	d101      	bne.n	800839c <__sflush_r+0x7c>
 8008398:	682b      	ldr	r3, [r5, #0]
 800839a:	b903      	cbnz	r3, 800839e <__sflush_r+0x7e>
 800839c:	6560      	str	r0, [r4, #84]	; 0x54
 800839e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083a0:	602f      	str	r7, [r5, #0]
 80083a2:	2900      	cmp	r1, #0
 80083a4:	d0c9      	beq.n	800833a <__sflush_r+0x1a>
 80083a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083aa:	4299      	cmp	r1, r3
 80083ac:	d002      	beq.n	80083b4 <__sflush_r+0x94>
 80083ae:	4628      	mov	r0, r5
 80083b0:	f001 f8f6 	bl	80095a0 <_free_r>
 80083b4:	2000      	movs	r0, #0
 80083b6:	6360      	str	r0, [r4, #52]	; 0x34
 80083b8:	e7c0      	b.n	800833c <__sflush_r+0x1c>
 80083ba:	2301      	movs	r3, #1
 80083bc:	4628      	mov	r0, r5
 80083be:	47b0      	blx	r6
 80083c0:	1c41      	adds	r1, r0, #1
 80083c2:	d1c8      	bne.n	8008356 <__sflush_r+0x36>
 80083c4:	682b      	ldr	r3, [r5, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d0c5      	beq.n	8008356 <__sflush_r+0x36>
 80083ca:	2b1d      	cmp	r3, #29
 80083cc:	d001      	beq.n	80083d2 <__sflush_r+0xb2>
 80083ce:	2b16      	cmp	r3, #22
 80083d0:	d101      	bne.n	80083d6 <__sflush_r+0xb6>
 80083d2:	602f      	str	r7, [r5, #0]
 80083d4:	e7b1      	b.n	800833a <__sflush_r+0x1a>
 80083d6:	89a3      	ldrh	r3, [r4, #12]
 80083d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083dc:	81a3      	strh	r3, [r4, #12]
 80083de:	e7ad      	b.n	800833c <__sflush_r+0x1c>
 80083e0:	690f      	ldr	r7, [r1, #16]
 80083e2:	2f00      	cmp	r7, #0
 80083e4:	d0a9      	beq.n	800833a <__sflush_r+0x1a>
 80083e6:	0793      	lsls	r3, r2, #30
 80083e8:	680e      	ldr	r6, [r1, #0]
 80083ea:	bf08      	it	eq
 80083ec:	694b      	ldreq	r3, [r1, #20]
 80083ee:	600f      	str	r7, [r1, #0]
 80083f0:	bf18      	it	ne
 80083f2:	2300      	movne	r3, #0
 80083f4:	eba6 0807 	sub.w	r8, r6, r7
 80083f8:	608b      	str	r3, [r1, #8]
 80083fa:	f1b8 0f00 	cmp.w	r8, #0
 80083fe:	dd9c      	ble.n	800833a <__sflush_r+0x1a>
 8008400:	4643      	mov	r3, r8
 8008402:	463a      	mov	r2, r7
 8008404:	6a21      	ldr	r1, [r4, #32]
 8008406:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008408:	4628      	mov	r0, r5
 800840a:	47b0      	blx	r6
 800840c:	2800      	cmp	r0, #0
 800840e:	dc06      	bgt.n	800841e <__sflush_r+0xfe>
 8008410:	89a3      	ldrh	r3, [r4, #12]
 8008412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008416:	81a3      	strh	r3, [r4, #12]
 8008418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800841c:	e78e      	b.n	800833c <__sflush_r+0x1c>
 800841e:	4407      	add	r7, r0
 8008420:	eba8 0800 	sub.w	r8, r8, r0
 8008424:	e7e9      	b.n	80083fa <__sflush_r+0xda>
 8008426:	bf00      	nop
 8008428:	20400001 	.word	0x20400001

0800842c <_fflush_r>:
 800842c:	b538      	push	{r3, r4, r5, lr}
 800842e:	690b      	ldr	r3, [r1, #16]
 8008430:	4605      	mov	r5, r0
 8008432:	460c      	mov	r4, r1
 8008434:	b1db      	cbz	r3, 800846e <_fflush_r+0x42>
 8008436:	b118      	cbz	r0, 8008440 <_fflush_r+0x14>
 8008438:	6983      	ldr	r3, [r0, #24]
 800843a:	b90b      	cbnz	r3, 8008440 <_fflush_r+0x14>
 800843c:	f000 f860 	bl	8008500 <__sinit>
 8008440:	4b0c      	ldr	r3, [pc, #48]	; (8008474 <_fflush_r+0x48>)
 8008442:	429c      	cmp	r4, r3
 8008444:	d109      	bne.n	800845a <_fflush_r+0x2e>
 8008446:	686c      	ldr	r4, [r5, #4]
 8008448:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800844c:	b17b      	cbz	r3, 800846e <_fflush_r+0x42>
 800844e:	4621      	mov	r1, r4
 8008450:	4628      	mov	r0, r5
 8008452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008456:	f7ff bf63 	b.w	8008320 <__sflush_r>
 800845a:	4b07      	ldr	r3, [pc, #28]	; (8008478 <_fflush_r+0x4c>)
 800845c:	429c      	cmp	r4, r3
 800845e:	d101      	bne.n	8008464 <_fflush_r+0x38>
 8008460:	68ac      	ldr	r4, [r5, #8]
 8008462:	e7f1      	b.n	8008448 <_fflush_r+0x1c>
 8008464:	4b05      	ldr	r3, [pc, #20]	; (800847c <_fflush_r+0x50>)
 8008466:	429c      	cmp	r4, r3
 8008468:	bf08      	it	eq
 800846a:	68ec      	ldreq	r4, [r5, #12]
 800846c:	e7ec      	b.n	8008448 <_fflush_r+0x1c>
 800846e:	2000      	movs	r0, #0
 8008470:	bd38      	pop	{r3, r4, r5, pc}
 8008472:	bf00      	nop
 8008474:	08009fb8 	.word	0x08009fb8
 8008478:	08009fd8 	.word	0x08009fd8
 800847c:	08009f98 	.word	0x08009f98

08008480 <std>:
 8008480:	2300      	movs	r3, #0
 8008482:	b510      	push	{r4, lr}
 8008484:	4604      	mov	r4, r0
 8008486:	e9c0 3300 	strd	r3, r3, [r0]
 800848a:	6083      	str	r3, [r0, #8]
 800848c:	8181      	strh	r1, [r0, #12]
 800848e:	6643      	str	r3, [r0, #100]	; 0x64
 8008490:	81c2      	strh	r2, [r0, #14]
 8008492:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008496:	6183      	str	r3, [r0, #24]
 8008498:	4619      	mov	r1, r3
 800849a:	2208      	movs	r2, #8
 800849c:	305c      	adds	r0, #92	; 0x5c
 800849e:	f7fd faa2 	bl	80059e6 <memset>
 80084a2:	4b05      	ldr	r3, [pc, #20]	; (80084b8 <std+0x38>)
 80084a4:	6263      	str	r3, [r4, #36]	; 0x24
 80084a6:	4b05      	ldr	r3, [pc, #20]	; (80084bc <std+0x3c>)
 80084a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80084aa:	4b05      	ldr	r3, [pc, #20]	; (80084c0 <std+0x40>)
 80084ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084ae:	4b05      	ldr	r3, [pc, #20]	; (80084c4 <std+0x44>)
 80084b0:	6224      	str	r4, [r4, #32]
 80084b2:	6323      	str	r3, [r4, #48]	; 0x30
 80084b4:	bd10      	pop	{r4, pc}
 80084b6:	bf00      	nop
 80084b8:	08009c35 	.word	0x08009c35
 80084bc:	08009c57 	.word	0x08009c57
 80084c0:	08009c8f 	.word	0x08009c8f
 80084c4:	08009cb3 	.word	0x08009cb3

080084c8 <_cleanup_r>:
 80084c8:	4901      	ldr	r1, [pc, #4]	; (80084d0 <_cleanup_r+0x8>)
 80084ca:	f000 b885 	b.w	80085d8 <_fwalk_reent>
 80084ce:	bf00      	nop
 80084d0:	0800842d 	.word	0x0800842d

080084d4 <__sfmoreglue>:
 80084d4:	b570      	push	{r4, r5, r6, lr}
 80084d6:	1e4a      	subs	r2, r1, #1
 80084d8:	2568      	movs	r5, #104	; 0x68
 80084da:	4355      	muls	r5, r2
 80084dc:	460e      	mov	r6, r1
 80084de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80084e2:	f001 f8ab 	bl	800963c <_malloc_r>
 80084e6:	4604      	mov	r4, r0
 80084e8:	b140      	cbz	r0, 80084fc <__sfmoreglue+0x28>
 80084ea:	2100      	movs	r1, #0
 80084ec:	e9c0 1600 	strd	r1, r6, [r0]
 80084f0:	300c      	adds	r0, #12
 80084f2:	60a0      	str	r0, [r4, #8]
 80084f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80084f8:	f7fd fa75 	bl	80059e6 <memset>
 80084fc:	4620      	mov	r0, r4
 80084fe:	bd70      	pop	{r4, r5, r6, pc}

08008500 <__sinit>:
 8008500:	6983      	ldr	r3, [r0, #24]
 8008502:	b510      	push	{r4, lr}
 8008504:	4604      	mov	r4, r0
 8008506:	bb33      	cbnz	r3, 8008556 <__sinit+0x56>
 8008508:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800850c:	6503      	str	r3, [r0, #80]	; 0x50
 800850e:	4b12      	ldr	r3, [pc, #72]	; (8008558 <__sinit+0x58>)
 8008510:	4a12      	ldr	r2, [pc, #72]	; (800855c <__sinit+0x5c>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	6282      	str	r2, [r0, #40]	; 0x28
 8008516:	4298      	cmp	r0, r3
 8008518:	bf04      	itt	eq
 800851a:	2301      	moveq	r3, #1
 800851c:	6183      	streq	r3, [r0, #24]
 800851e:	f000 f81f 	bl	8008560 <__sfp>
 8008522:	6060      	str	r0, [r4, #4]
 8008524:	4620      	mov	r0, r4
 8008526:	f000 f81b 	bl	8008560 <__sfp>
 800852a:	60a0      	str	r0, [r4, #8]
 800852c:	4620      	mov	r0, r4
 800852e:	f000 f817 	bl	8008560 <__sfp>
 8008532:	2200      	movs	r2, #0
 8008534:	60e0      	str	r0, [r4, #12]
 8008536:	2104      	movs	r1, #4
 8008538:	6860      	ldr	r0, [r4, #4]
 800853a:	f7ff ffa1 	bl	8008480 <std>
 800853e:	2201      	movs	r2, #1
 8008540:	2109      	movs	r1, #9
 8008542:	68a0      	ldr	r0, [r4, #8]
 8008544:	f7ff ff9c 	bl	8008480 <std>
 8008548:	2202      	movs	r2, #2
 800854a:	2112      	movs	r1, #18
 800854c:	68e0      	ldr	r0, [r4, #12]
 800854e:	f7ff ff97 	bl	8008480 <std>
 8008552:	2301      	movs	r3, #1
 8008554:	61a3      	str	r3, [r4, #24]
 8008556:	bd10      	pop	{r4, pc}
 8008558:	08009ef4 	.word	0x08009ef4
 800855c:	080084c9 	.word	0x080084c9

08008560 <__sfp>:
 8008560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008562:	4b1b      	ldr	r3, [pc, #108]	; (80085d0 <__sfp+0x70>)
 8008564:	681e      	ldr	r6, [r3, #0]
 8008566:	69b3      	ldr	r3, [r6, #24]
 8008568:	4607      	mov	r7, r0
 800856a:	b913      	cbnz	r3, 8008572 <__sfp+0x12>
 800856c:	4630      	mov	r0, r6
 800856e:	f7ff ffc7 	bl	8008500 <__sinit>
 8008572:	3648      	adds	r6, #72	; 0x48
 8008574:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008578:	3b01      	subs	r3, #1
 800857a:	d503      	bpl.n	8008584 <__sfp+0x24>
 800857c:	6833      	ldr	r3, [r6, #0]
 800857e:	b133      	cbz	r3, 800858e <__sfp+0x2e>
 8008580:	6836      	ldr	r6, [r6, #0]
 8008582:	e7f7      	b.n	8008574 <__sfp+0x14>
 8008584:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008588:	b16d      	cbz	r5, 80085a6 <__sfp+0x46>
 800858a:	3468      	adds	r4, #104	; 0x68
 800858c:	e7f4      	b.n	8008578 <__sfp+0x18>
 800858e:	2104      	movs	r1, #4
 8008590:	4638      	mov	r0, r7
 8008592:	f7ff ff9f 	bl	80084d4 <__sfmoreglue>
 8008596:	6030      	str	r0, [r6, #0]
 8008598:	2800      	cmp	r0, #0
 800859a:	d1f1      	bne.n	8008580 <__sfp+0x20>
 800859c:	230c      	movs	r3, #12
 800859e:	603b      	str	r3, [r7, #0]
 80085a0:	4604      	mov	r4, r0
 80085a2:	4620      	mov	r0, r4
 80085a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085a6:	4b0b      	ldr	r3, [pc, #44]	; (80085d4 <__sfp+0x74>)
 80085a8:	6665      	str	r5, [r4, #100]	; 0x64
 80085aa:	e9c4 5500 	strd	r5, r5, [r4]
 80085ae:	60a5      	str	r5, [r4, #8]
 80085b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80085b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80085b8:	2208      	movs	r2, #8
 80085ba:	4629      	mov	r1, r5
 80085bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80085c0:	f7fd fa11 	bl	80059e6 <memset>
 80085c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80085c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80085cc:	e7e9      	b.n	80085a2 <__sfp+0x42>
 80085ce:	bf00      	nop
 80085d0:	08009ef4 	.word	0x08009ef4
 80085d4:	ffff0001 	.word	0xffff0001

080085d8 <_fwalk_reent>:
 80085d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085dc:	4680      	mov	r8, r0
 80085de:	4689      	mov	r9, r1
 80085e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80085e4:	2600      	movs	r6, #0
 80085e6:	b914      	cbnz	r4, 80085ee <_fwalk_reent+0x16>
 80085e8:	4630      	mov	r0, r6
 80085ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80085f2:	3f01      	subs	r7, #1
 80085f4:	d501      	bpl.n	80085fa <_fwalk_reent+0x22>
 80085f6:	6824      	ldr	r4, [r4, #0]
 80085f8:	e7f5      	b.n	80085e6 <_fwalk_reent+0xe>
 80085fa:	89ab      	ldrh	r3, [r5, #12]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d907      	bls.n	8008610 <_fwalk_reent+0x38>
 8008600:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008604:	3301      	adds	r3, #1
 8008606:	d003      	beq.n	8008610 <_fwalk_reent+0x38>
 8008608:	4629      	mov	r1, r5
 800860a:	4640      	mov	r0, r8
 800860c:	47c8      	blx	r9
 800860e:	4306      	orrs	r6, r0
 8008610:	3568      	adds	r5, #104	; 0x68
 8008612:	e7ee      	b.n	80085f2 <_fwalk_reent+0x1a>

08008614 <rshift>:
 8008614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008616:	6906      	ldr	r6, [r0, #16]
 8008618:	114b      	asrs	r3, r1, #5
 800861a:	429e      	cmp	r6, r3
 800861c:	f100 0414 	add.w	r4, r0, #20
 8008620:	dd30      	ble.n	8008684 <rshift+0x70>
 8008622:	f011 011f 	ands.w	r1, r1, #31
 8008626:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800862a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800862e:	d108      	bne.n	8008642 <rshift+0x2e>
 8008630:	4621      	mov	r1, r4
 8008632:	42b2      	cmp	r2, r6
 8008634:	460b      	mov	r3, r1
 8008636:	d211      	bcs.n	800865c <rshift+0x48>
 8008638:	f852 3b04 	ldr.w	r3, [r2], #4
 800863c:	f841 3b04 	str.w	r3, [r1], #4
 8008640:	e7f7      	b.n	8008632 <rshift+0x1e>
 8008642:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008646:	f1c1 0c20 	rsb	ip, r1, #32
 800864a:	40cd      	lsrs	r5, r1
 800864c:	3204      	adds	r2, #4
 800864e:	4623      	mov	r3, r4
 8008650:	42b2      	cmp	r2, r6
 8008652:	4617      	mov	r7, r2
 8008654:	d30c      	bcc.n	8008670 <rshift+0x5c>
 8008656:	601d      	str	r5, [r3, #0]
 8008658:	b105      	cbz	r5, 800865c <rshift+0x48>
 800865a:	3304      	adds	r3, #4
 800865c:	1b1a      	subs	r2, r3, r4
 800865e:	42a3      	cmp	r3, r4
 8008660:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008664:	bf08      	it	eq
 8008666:	2300      	moveq	r3, #0
 8008668:	6102      	str	r2, [r0, #16]
 800866a:	bf08      	it	eq
 800866c:	6143      	streq	r3, [r0, #20]
 800866e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008670:	683f      	ldr	r7, [r7, #0]
 8008672:	fa07 f70c 	lsl.w	r7, r7, ip
 8008676:	433d      	orrs	r5, r7
 8008678:	f843 5b04 	str.w	r5, [r3], #4
 800867c:	f852 5b04 	ldr.w	r5, [r2], #4
 8008680:	40cd      	lsrs	r5, r1
 8008682:	e7e5      	b.n	8008650 <rshift+0x3c>
 8008684:	4623      	mov	r3, r4
 8008686:	e7e9      	b.n	800865c <rshift+0x48>

08008688 <__hexdig_fun>:
 8008688:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800868c:	2b09      	cmp	r3, #9
 800868e:	d802      	bhi.n	8008696 <__hexdig_fun+0xe>
 8008690:	3820      	subs	r0, #32
 8008692:	b2c0      	uxtb	r0, r0
 8008694:	4770      	bx	lr
 8008696:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800869a:	2b05      	cmp	r3, #5
 800869c:	d801      	bhi.n	80086a2 <__hexdig_fun+0x1a>
 800869e:	3847      	subs	r0, #71	; 0x47
 80086a0:	e7f7      	b.n	8008692 <__hexdig_fun+0xa>
 80086a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80086a6:	2b05      	cmp	r3, #5
 80086a8:	d801      	bhi.n	80086ae <__hexdig_fun+0x26>
 80086aa:	3827      	subs	r0, #39	; 0x27
 80086ac:	e7f1      	b.n	8008692 <__hexdig_fun+0xa>
 80086ae:	2000      	movs	r0, #0
 80086b0:	4770      	bx	lr

080086b2 <__gethex>:
 80086b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b6:	b08b      	sub	sp, #44	; 0x2c
 80086b8:	468a      	mov	sl, r1
 80086ba:	9002      	str	r0, [sp, #8]
 80086bc:	9816      	ldr	r0, [sp, #88]	; 0x58
 80086be:	9306      	str	r3, [sp, #24]
 80086c0:	4690      	mov	r8, r2
 80086c2:	f000 fad0 	bl	8008c66 <__localeconv_l>
 80086c6:	6803      	ldr	r3, [r0, #0]
 80086c8:	9303      	str	r3, [sp, #12]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7f7 fd80 	bl	80001d0 <strlen>
 80086d0:	9b03      	ldr	r3, [sp, #12]
 80086d2:	9001      	str	r0, [sp, #4]
 80086d4:	4403      	add	r3, r0
 80086d6:	f04f 0b00 	mov.w	fp, #0
 80086da:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80086de:	9307      	str	r3, [sp, #28]
 80086e0:	f8da 3000 	ldr.w	r3, [sl]
 80086e4:	3302      	adds	r3, #2
 80086e6:	461f      	mov	r7, r3
 80086e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80086ec:	2830      	cmp	r0, #48	; 0x30
 80086ee:	d06c      	beq.n	80087ca <__gethex+0x118>
 80086f0:	f7ff ffca 	bl	8008688 <__hexdig_fun>
 80086f4:	4604      	mov	r4, r0
 80086f6:	2800      	cmp	r0, #0
 80086f8:	d16a      	bne.n	80087d0 <__gethex+0x11e>
 80086fa:	9a01      	ldr	r2, [sp, #4]
 80086fc:	9903      	ldr	r1, [sp, #12]
 80086fe:	4638      	mov	r0, r7
 8008700:	f001 fadb 	bl	8009cba <strncmp>
 8008704:	2800      	cmp	r0, #0
 8008706:	d166      	bne.n	80087d6 <__gethex+0x124>
 8008708:	9b01      	ldr	r3, [sp, #4]
 800870a:	5cf8      	ldrb	r0, [r7, r3]
 800870c:	18fe      	adds	r6, r7, r3
 800870e:	f7ff ffbb 	bl	8008688 <__hexdig_fun>
 8008712:	2800      	cmp	r0, #0
 8008714:	d062      	beq.n	80087dc <__gethex+0x12a>
 8008716:	4633      	mov	r3, r6
 8008718:	7818      	ldrb	r0, [r3, #0]
 800871a:	2830      	cmp	r0, #48	; 0x30
 800871c:	461f      	mov	r7, r3
 800871e:	f103 0301 	add.w	r3, r3, #1
 8008722:	d0f9      	beq.n	8008718 <__gethex+0x66>
 8008724:	f7ff ffb0 	bl	8008688 <__hexdig_fun>
 8008728:	fab0 f580 	clz	r5, r0
 800872c:	096d      	lsrs	r5, r5, #5
 800872e:	4634      	mov	r4, r6
 8008730:	f04f 0b01 	mov.w	fp, #1
 8008734:	463a      	mov	r2, r7
 8008736:	4616      	mov	r6, r2
 8008738:	3201      	adds	r2, #1
 800873a:	7830      	ldrb	r0, [r6, #0]
 800873c:	f7ff ffa4 	bl	8008688 <__hexdig_fun>
 8008740:	2800      	cmp	r0, #0
 8008742:	d1f8      	bne.n	8008736 <__gethex+0x84>
 8008744:	9a01      	ldr	r2, [sp, #4]
 8008746:	9903      	ldr	r1, [sp, #12]
 8008748:	4630      	mov	r0, r6
 800874a:	f001 fab6 	bl	8009cba <strncmp>
 800874e:	b950      	cbnz	r0, 8008766 <__gethex+0xb4>
 8008750:	b954      	cbnz	r4, 8008768 <__gethex+0xb6>
 8008752:	9b01      	ldr	r3, [sp, #4]
 8008754:	18f4      	adds	r4, r6, r3
 8008756:	4622      	mov	r2, r4
 8008758:	4616      	mov	r6, r2
 800875a:	3201      	adds	r2, #1
 800875c:	7830      	ldrb	r0, [r6, #0]
 800875e:	f7ff ff93 	bl	8008688 <__hexdig_fun>
 8008762:	2800      	cmp	r0, #0
 8008764:	d1f8      	bne.n	8008758 <__gethex+0xa6>
 8008766:	b10c      	cbz	r4, 800876c <__gethex+0xba>
 8008768:	1ba4      	subs	r4, r4, r6
 800876a:	00a4      	lsls	r4, r4, #2
 800876c:	7833      	ldrb	r3, [r6, #0]
 800876e:	2b50      	cmp	r3, #80	; 0x50
 8008770:	d001      	beq.n	8008776 <__gethex+0xc4>
 8008772:	2b70      	cmp	r3, #112	; 0x70
 8008774:	d140      	bne.n	80087f8 <__gethex+0x146>
 8008776:	7873      	ldrb	r3, [r6, #1]
 8008778:	2b2b      	cmp	r3, #43	; 0x2b
 800877a:	d031      	beq.n	80087e0 <__gethex+0x12e>
 800877c:	2b2d      	cmp	r3, #45	; 0x2d
 800877e:	d033      	beq.n	80087e8 <__gethex+0x136>
 8008780:	1c71      	adds	r1, r6, #1
 8008782:	f04f 0900 	mov.w	r9, #0
 8008786:	7808      	ldrb	r0, [r1, #0]
 8008788:	f7ff ff7e 	bl	8008688 <__hexdig_fun>
 800878c:	1e43      	subs	r3, r0, #1
 800878e:	b2db      	uxtb	r3, r3
 8008790:	2b18      	cmp	r3, #24
 8008792:	d831      	bhi.n	80087f8 <__gethex+0x146>
 8008794:	f1a0 0210 	sub.w	r2, r0, #16
 8008798:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800879c:	f7ff ff74 	bl	8008688 <__hexdig_fun>
 80087a0:	1e43      	subs	r3, r0, #1
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	2b18      	cmp	r3, #24
 80087a6:	d922      	bls.n	80087ee <__gethex+0x13c>
 80087a8:	f1b9 0f00 	cmp.w	r9, #0
 80087ac:	d000      	beq.n	80087b0 <__gethex+0xfe>
 80087ae:	4252      	negs	r2, r2
 80087b0:	4414      	add	r4, r2
 80087b2:	f8ca 1000 	str.w	r1, [sl]
 80087b6:	b30d      	cbz	r5, 80087fc <__gethex+0x14a>
 80087b8:	f1bb 0f00 	cmp.w	fp, #0
 80087bc:	bf0c      	ite	eq
 80087be:	2706      	moveq	r7, #6
 80087c0:	2700      	movne	r7, #0
 80087c2:	4638      	mov	r0, r7
 80087c4:	b00b      	add	sp, #44	; 0x2c
 80087c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ca:	f10b 0b01 	add.w	fp, fp, #1
 80087ce:	e78a      	b.n	80086e6 <__gethex+0x34>
 80087d0:	2500      	movs	r5, #0
 80087d2:	462c      	mov	r4, r5
 80087d4:	e7ae      	b.n	8008734 <__gethex+0x82>
 80087d6:	463e      	mov	r6, r7
 80087d8:	2501      	movs	r5, #1
 80087da:	e7c7      	b.n	800876c <__gethex+0xba>
 80087dc:	4604      	mov	r4, r0
 80087de:	e7fb      	b.n	80087d8 <__gethex+0x126>
 80087e0:	f04f 0900 	mov.w	r9, #0
 80087e4:	1cb1      	adds	r1, r6, #2
 80087e6:	e7ce      	b.n	8008786 <__gethex+0xd4>
 80087e8:	f04f 0901 	mov.w	r9, #1
 80087ec:	e7fa      	b.n	80087e4 <__gethex+0x132>
 80087ee:	230a      	movs	r3, #10
 80087f0:	fb03 0202 	mla	r2, r3, r2, r0
 80087f4:	3a10      	subs	r2, #16
 80087f6:	e7cf      	b.n	8008798 <__gethex+0xe6>
 80087f8:	4631      	mov	r1, r6
 80087fa:	e7da      	b.n	80087b2 <__gethex+0x100>
 80087fc:	1bf3      	subs	r3, r6, r7
 80087fe:	3b01      	subs	r3, #1
 8008800:	4629      	mov	r1, r5
 8008802:	2b07      	cmp	r3, #7
 8008804:	dc49      	bgt.n	800889a <__gethex+0x1e8>
 8008806:	9802      	ldr	r0, [sp, #8]
 8008808:	f000 fabc 	bl	8008d84 <_Balloc>
 800880c:	9b01      	ldr	r3, [sp, #4]
 800880e:	f100 0914 	add.w	r9, r0, #20
 8008812:	f04f 0b00 	mov.w	fp, #0
 8008816:	f1c3 0301 	rsb	r3, r3, #1
 800881a:	4605      	mov	r5, r0
 800881c:	f8cd 9010 	str.w	r9, [sp, #16]
 8008820:	46da      	mov	sl, fp
 8008822:	9308      	str	r3, [sp, #32]
 8008824:	42b7      	cmp	r7, r6
 8008826:	d33b      	bcc.n	80088a0 <__gethex+0x1ee>
 8008828:	9804      	ldr	r0, [sp, #16]
 800882a:	f840 ab04 	str.w	sl, [r0], #4
 800882e:	eba0 0009 	sub.w	r0, r0, r9
 8008832:	1080      	asrs	r0, r0, #2
 8008834:	6128      	str	r0, [r5, #16]
 8008836:	0147      	lsls	r7, r0, #5
 8008838:	4650      	mov	r0, sl
 800883a:	f000 fb67 	bl	8008f0c <__hi0bits>
 800883e:	f8d8 6000 	ldr.w	r6, [r8]
 8008842:	1a3f      	subs	r7, r7, r0
 8008844:	42b7      	cmp	r7, r6
 8008846:	dd64      	ble.n	8008912 <__gethex+0x260>
 8008848:	1bbf      	subs	r7, r7, r6
 800884a:	4639      	mov	r1, r7
 800884c:	4628      	mov	r0, r5
 800884e:	f000 fe77 	bl	8009540 <__any_on>
 8008852:	4682      	mov	sl, r0
 8008854:	b178      	cbz	r0, 8008876 <__gethex+0x1c4>
 8008856:	1e7b      	subs	r3, r7, #1
 8008858:	1159      	asrs	r1, r3, #5
 800885a:	f003 021f 	and.w	r2, r3, #31
 800885e:	f04f 0a01 	mov.w	sl, #1
 8008862:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008866:	fa0a f202 	lsl.w	r2, sl, r2
 800886a:	420a      	tst	r2, r1
 800886c:	d003      	beq.n	8008876 <__gethex+0x1c4>
 800886e:	4553      	cmp	r3, sl
 8008870:	dc46      	bgt.n	8008900 <__gethex+0x24e>
 8008872:	f04f 0a02 	mov.w	sl, #2
 8008876:	4639      	mov	r1, r7
 8008878:	4628      	mov	r0, r5
 800887a:	f7ff fecb 	bl	8008614 <rshift>
 800887e:	443c      	add	r4, r7
 8008880:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008884:	42a3      	cmp	r3, r4
 8008886:	da52      	bge.n	800892e <__gethex+0x27c>
 8008888:	4629      	mov	r1, r5
 800888a:	9802      	ldr	r0, [sp, #8]
 800888c:	f000 faae 	bl	8008dec <_Bfree>
 8008890:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008892:	2300      	movs	r3, #0
 8008894:	6013      	str	r3, [r2, #0]
 8008896:	27a3      	movs	r7, #163	; 0xa3
 8008898:	e793      	b.n	80087c2 <__gethex+0x110>
 800889a:	3101      	adds	r1, #1
 800889c:	105b      	asrs	r3, r3, #1
 800889e:	e7b0      	b.n	8008802 <__gethex+0x150>
 80088a0:	1e73      	subs	r3, r6, #1
 80088a2:	9305      	str	r3, [sp, #20]
 80088a4:	9a07      	ldr	r2, [sp, #28]
 80088a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d018      	beq.n	80088e0 <__gethex+0x22e>
 80088ae:	f1bb 0f20 	cmp.w	fp, #32
 80088b2:	d107      	bne.n	80088c4 <__gethex+0x212>
 80088b4:	9b04      	ldr	r3, [sp, #16]
 80088b6:	f8c3 a000 	str.w	sl, [r3]
 80088ba:	3304      	adds	r3, #4
 80088bc:	f04f 0a00 	mov.w	sl, #0
 80088c0:	9304      	str	r3, [sp, #16]
 80088c2:	46d3      	mov	fp, sl
 80088c4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80088c8:	f7ff fede 	bl	8008688 <__hexdig_fun>
 80088cc:	f000 000f 	and.w	r0, r0, #15
 80088d0:	fa00 f00b 	lsl.w	r0, r0, fp
 80088d4:	ea4a 0a00 	orr.w	sl, sl, r0
 80088d8:	f10b 0b04 	add.w	fp, fp, #4
 80088dc:	9b05      	ldr	r3, [sp, #20]
 80088de:	e00d      	b.n	80088fc <__gethex+0x24a>
 80088e0:	9b05      	ldr	r3, [sp, #20]
 80088e2:	9a08      	ldr	r2, [sp, #32]
 80088e4:	4413      	add	r3, r2
 80088e6:	42bb      	cmp	r3, r7
 80088e8:	d3e1      	bcc.n	80088ae <__gethex+0x1fc>
 80088ea:	4618      	mov	r0, r3
 80088ec:	9a01      	ldr	r2, [sp, #4]
 80088ee:	9903      	ldr	r1, [sp, #12]
 80088f0:	9309      	str	r3, [sp, #36]	; 0x24
 80088f2:	f001 f9e2 	bl	8009cba <strncmp>
 80088f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088f8:	2800      	cmp	r0, #0
 80088fa:	d1d8      	bne.n	80088ae <__gethex+0x1fc>
 80088fc:	461e      	mov	r6, r3
 80088fe:	e791      	b.n	8008824 <__gethex+0x172>
 8008900:	1eb9      	subs	r1, r7, #2
 8008902:	4628      	mov	r0, r5
 8008904:	f000 fe1c 	bl	8009540 <__any_on>
 8008908:	2800      	cmp	r0, #0
 800890a:	d0b2      	beq.n	8008872 <__gethex+0x1c0>
 800890c:	f04f 0a03 	mov.w	sl, #3
 8008910:	e7b1      	b.n	8008876 <__gethex+0x1c4>
 8008912:	da09      	bge.n	8008928 <__gethex+0x276>
 8008914:	1bf7      	subs	r7, r6, r7
 8008916:	4629      	mov	r1, r5
 8008918:	463a      	mov	r2, r7
 800891a:	9802      	ldr	r0, [sp, #8]
 800891c:	f000 fc32 	bl	8009184 <__lshift>
 8008920:	1be4      	subs	r4, r4, r7
 8008922:	4605      	mov	r5, r0
 8008924:	f100 0914 	add.w	r9, r0, #20
 8008928:	f04f 0a00 	mov.w	sl, #0
 800892c:	e7a8      	b.n	8008880 <__gethex+0x1ce>
 800892e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008932:	42a0      	cmp	r0, r4
 8008934:	dd6a      	ble.n	8008a0c <__gethex+0x35a>
 8008936:	1b04      	subs	r4, r0, r4
 8008938:	42a6      	cmp	r6, r4
 800893a:	dc2e      	bgt.n	800899a <__gethex+0x2e8>
 800893c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008940:	2b02      	cmp	r3, #2
 8008942:	d022      	beq.n	800898a <__gethex+0x2d8>
 8008944:	2b03      	cmp	r3, #3
 8008946:	d024      	beq.n	8008992 <__gethex+0x2e0>
 8008948:	2b01      	cmp	r3, #1
 800894a:	d115      	bne.n	8008978 <__gethex+0x2c6>
 800894c:	42a6      	cmp	r6, r4
 800894e:	d113      	bne.n	8008978 <__gethex+0x2c6>
 8008950:	2e01      	cmp	r6, #1
 8008952:	dc0b      	bgt.n	800896c <__gethex+0x2ba>
 8008954:	9a06      	ldr	r2, [sp, #24]
 8008956:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800895a:	6013      	str	r3, [r2, #0]
 800895c:	2301      	movs	r3, #1
 800895e:	612b      	str	r3, [r5, #16]
 8008960:	f8c9 3000 	str.w	r3, [r9]
 8008964:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008966:	2762      	movs	r7, #98	; 0x62
 8008968:	601d      	str	r5, [r3, #0]
 800896a:	e72a      	b.n	80087c2 <__gethex+0x110>
 800896c:	1e71      	subs	r1, r6, #1
 800896e:	4628      	mov	r0, r5
 8008970:	f000 fde6 	bl	8009540 <__any_on>
 8008974:	2800      	cmp	r0, #0
 8008976:	d1ed      	bne.n	8008954 <__gethex+0x2a2>
 8008978:	4629      	mov	r1, r5
 800897a:	9802      	ldr	r0, [sp, #8]
 800897c:	f000 fa36 	bl	8008dec <_Bfree>
 8008980:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008982:	2300      	movs	r3, #0
 8008984:	6013      	str	r3, [r2, #0]
 8008986:	2750      	movs	r7, #80	; 0x50
 8008988:	e71b      	b.n	80087c2 <__gethex+0x110>
 800898a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800898c:	2b00      	cmp	r3, #0
 800898e:	d0e1      	beq.n	8008954 <__gethex+0x2a2>
 8008990:	e7f2      	b.n	8008978 <__gethex+0x2c6>
 8008992:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1dd      	bne.n	8008954 <__gethex+0x2a2>
 8008998:	e7ee      	b.n	8008978 <__gethex+0x2c6>
 800899a:	1e67      	subs	r7, r4, #1
 800899c:	f1ba 0f00 	cmp.w	sl, #0
 80089a0:	d131      	bne.n	8008a06 <__gethex+0x354>
 80089a2:	b127      	cbz	r7, 80089ae <__gethex+0x2fc>
 80089a4:	4639      	mov	r1, r7
 80089a6:	4628      	mov	r0, r5
 80089a8:	f000 fdca 	bl	8009540 <__any_on>
 80089ac:	4682      	mov	sl, r0
 80089ae:	117a      	asrs	r2, r7, #5
 80089b0:	2301      	movs	r3, #1
 80089b2:	f007 071f 	and.w	r7, r7, #31
 80089b6:	fa03 f707 	lsl.w	r7, r3, r7
 80089ba:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80089be:	4621      	mov	r1, r4
 80089c0:	421f      	tst	r7, r3
 80089c2:	4628      	mov	r0, r5
 80089c4:	bf18      	it	ne
 80089c6:	f04a 0a02 	orrne.w	sl, sl, #2
 80089ca:	1b36      	subs	r6, r6, r4
 80089cc:	f7ff fe22 	bl	8008614 <rshift>
 80089d0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80089d4:	2702      	movs	r7, #2
 80089d6:	f1ba 0f00 	cmp.w	sl, #0
 80089da:	d048      	beq.n	8008a6e <__gethex+0x3bc>
 80089dc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d015      	beq.n	8008a10 <__gethex+0x35e>
 80089e4:	2b03      	cmp	r3, #3
 80089e6:	d017      	beq.n	8008a18 <__gethex+0x366>
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d109      	bne.n	8008a00 <__gethex+0x34e>
 80089ec:	f01a 0f02 	tst.w	sl, #2
 80089f0:	d006      	beq.n	8008a00 <__gethex+0x34e>
 80089f2:	f8d9 3000 	ldr.w	r3, [r9]
 80089f6:	ea4a 0a03 	orr.w	sl, sl, r3
 80089fa:	f01a 0f01 	tst.w	sl, #1
 80089fe:	d10e      	bne.n	8008a1e <__gethex+0x36c>
 8008a00:	f047 0710 	orr.w	r7, r7, #16
 8008a04:	e033      	b.n	8008a6e <__gethex+0x3bc>
 8008a06:	f04f 0a01 	mov.w	sl, #1
 8008a0a:	e7d0      	b.n	80089ae <__gethex+0x2fc>
 8008a0c:	2701      	movs	r7, #1
 8008a0e:	e7e2      	b.n	80089d6 <__gethex+0x324>
 8008a10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a12:	f1c3 0301 	rsb	r3, r3, #1
 8008a16:	9315      	str	r3, [sp, #84]	; 0x54
 8008a18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d0f0      	beq.n	8008a00 <__gethex+0x34e>
 8008a1e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8008a22:	f105 0314 	add.w	r3, r5, #20
 8008a26:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008a2a:	eb03 010a 	add.w	r1, r3, sl
 8008a2e:	f04f 0c00 	mov.w	ip, #0
 8008a32:	4618      	mov	r0, r3
 8008a34:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a38:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008a3c:	d01c      	beq.n	8008a78 <__gethex+0x3c6>
 8008a3e:	3201      	adds	r2, #1
 8008a40:	6002      	str	r2, [r0, #0]
 8008a42:	2f02      	cmp	r7, #2
 8008a44:	f105 0314 	add.w	r3, r5, #20
 8008a48:	d138      	bne.n	8008abc <__gethex+0x40a>
 8008a4a:	f8d8 2000 	ldr.w	r2, [r8]
 8008a4e:	3a01      	subs	r2, #1
 8008a50:	42b2      	cmp	r2, r6
 8008a52:	d10a      	bne.n	8008a6a <__gethex+0x3b8>
 8008a54:	1171      	asrs	r1, r6, #5
 8008a56:	2201      	movs	r2, #1
 8008a58:	f006 061f 	and.w	r6, r6, #31
 8008a5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008a60:	fa02 f606 	lsl.w	r6, r2, r6
 8008a64:	421e      	tst	r6, r3
 8008a66:	bf18      	it	ne
 8008a68:	4617      	movne	r7, r2
 8008a6a:	f047 0720 	orr.w	r7, r7, #32
 8008a6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a70:	601d      	str	r5, [r3, #0]
 8008a72:	9b06      	ldr	r3, [sp, #24]
 8008a74:	601c      	str	r4, [r3, #0]
 8008a76:	e6a4      	b.n	80087c2 <__gethex+0x110>
 8008a78:	4299      	cmp	r1, r3
 8008a7a:	f843 cc04 	str.w	ip, [r3, #-4]
 8008a7e:	d8d8      	bhi.n	8008a32 <__gethex+0x380>
 8008a80:	68ab      	ldr	r3, [r5, #8]
 8008a82:	4599      	cmp	r9, r3
 8008a84:	db12      	blt.n	8008aac <__gethex+0x3fa>
 8008a86:	6869      	ldr	r1, [r5, #4]
 8008a88:	9802      	ldr	r0, [sp, #8]
 8008a8a:	3101      	adds	r1, #1
 8008a8c:	f000 f97a 	bl	8008d84 <_Balloc>
 8008a90:	692a      	ldr	r2, [r5, #16]
 8008a92:	3202      	adds	r2, #2
 8008a94:	f105 010c 	add.w	r1, r5, #12
 8008a98:	4683      	mov	fp, r0
 8008a9a:	0092      	lsls	r2, r2, #2
 8008a9c:	300c      	adds	r0, #12
 8008a9e:	f7fc ff97 	bl	80059d0 <memcpy>
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	9802      	ldr	r0, [sp, #8]
 8008aa6:	f000 f9a1 	bl	8008dec <_Bfree>
 8008aaa:	465d      	mov	r5, fp
 8008aac:	692b      	ldr	r3, [r5, #16]
 8008aae:	1c5a      	adds	r2, r3, #1
 8008ab0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008ab4:	612a      	str	r2, [r5, #16]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	615a      	str	r2, [r3, #20]
 8008aba:	e7c2      	b.n	8008a42 <__gethex+0x390>
 8008abc:	692a      	ldr	r2, [r5, #16]
 8008abe:	454a      	cmp	r2, r9
 8008ac0:	dd0b      	ble.n	8008ada <__gethex+0x428>
 8008ac2:	2101      	movs	r1, #1
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	f7ff fda5 	bl	8008614 <rshift>
 8008aca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ace:	3401      	adds	r4, #1
 8008ad0:	42a3      	cmp	r3, r4
 8008ad2:	f6ff aed9 	blt.w	8008888 <__gethex+0x1d6>
 8008ad6:	2701      	movs	r7, #1
 8008ad8:	e7c7      	b.n	8008a6a <__gethex+0x3b8>
 8008ada:	f016 061f 	ands.w	r6, r6, #31
 8008ade:	d0fa      	beq.n	8008ad6 <__gethex+0x424>
 8008ae0:	449a      	add	sl, r3
 8008ae2:	f1c6 0620 	rsb	r6, r6, #32
 8008ae6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008aea:	f000 fa0f 	bl	8008f0c <__hi0bits>
 8008aee:	42b0      	cmp	r0, r6
 8008af0:	dbe7      	blt.n	8008ac2 <__gethex+0x410>
 8008af2:	e7f0      	b.n	8008ad6 <__gethex+0x424>

08008af4 <L_shift>:
 8008af4:	f1c2 0208 	rsb	r2, r2, #8
 8008af8:	0092      	lsls	r2, r2, #2
 8008afa:	b570      	push	{r4, r5, r6, lr}
 8008afc:	f1c2 0620 	rsb	r6, r2, #32
 8008b00:	6843      	ldr	r3, [r0, #4]
 8008b02:	6804      	ldr	r4, [r0, #0]
 8008b04:	fa03 f506 	lsl.w	r5, r3, r6
 8008b08:	432c      	orrs	r4, r5
 8008b0a:	40d3      	lsrs	r3, r2
 8008b0c:	6004      	str	r4, [r0, #0]
 8008b0e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008b12:	4288      	cmp	r0, r1
 8008b14:	d3f4      	bcc.n	8008b00 <L_shift+0xc>
 8008b16:	bd70      	pop	{r4, r5, r6, pc}

08008b18 <__match>:
 8008b18:	b530      	push	{r4, r5, lr}
 8008b1a:	6803      	ldr	r3, [r0, #0]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b22:	b914      	cbnz	r4, 8008b2a <__match+0x12>
 8008b24:	6003      	str	r3, [r0, #0]
 8008b26:	2001      	movs	r0, #1
 8008b28:	bd30      	pop	{r4, r5, pc}
 8008b2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b2e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008b32:	2d19      	cmp	r5, #25
 8008b34:	bf98      	it	ls
 8008b36:	3220      	addls	r2, #32
 8008b38:	42a2      	cmp	r2, r4
 8008b3a:	d0f0      	beq.n	8008b1e <__match+0x6>
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	e7f3      	b.n	8008b28 <__match+0x10>

08008b40 <__hexnan>:
 8008b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b44:	680b      	ldr	r3, [r1, #0]
 8008b46:	6801      	ldr	r1, [r0, #0]
 8008b48:	115f      	asrs	r7, r3, #5
 8008b4a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008b4e:	f013 031f 	ands.w	r3, r3, #31
 8008b52:	b087      	sub	sp, #28
 8008b54:	bf18      	it	ne
 8008b56:	3704      	addne	r7, #4
 8008b58:	2500      	movs	r5, #0
 8008b5a:	1f3e      	subs	r6, r7, #4
 8008b5c:	4682      	mov	sl, r0
 8008b5e:	4690      	mov	r8, r2
 8008b60:	9301      	str	r3, [sp, #4]
 8008b62:	f847 5c04 	str.w	r5, [r7, #-4]
 8008b66:	46b1      	mov	r9, r6
 8008b68:	4634      	mov	r4, r6
 8008b6a:	9502      	str	r5, [sp, #8]
 8008b6c:	46ab      	mov	fp, r5
 8008b6e:	784a      	ldrb	r2, [r1, #1]
 8008b70:	1c4b      	adds	r3, r1, #1
 8008b72:	9303      	str	r3, [sp, #12]
 8008b74:	b342      	cbz	r2, 8008bc8 <__hexnan+0x88>
 8008b76:	4610      	mov	r0, r2
 8008b78:	9105      	str	r1, [sp, #20]
 8008b7a:	9204      	str	r2, [sp, #16]
 8008b7c:	f7ff fd84 	bl	8008688 <__hexdig_fun>
 8008b80:	2800      	cmp	r0, #0
 8008b82:	d143      	bne.n	8008c0c <__hexnan+0xcc>
 8008b84:	9a04      	ldr	r2, [sp, #16]
 8008b86:	9905      	ldr	r1, [sp, #20]
 8008b88:	2a20      	cmp	r2, #32
 8008b8a:	d818      	bhi.n	8008bbe <__hexnan+0x7e>
 8008b8c:	9b02      	ldr	r3, [sp, #8]
 8008b8e:	459b      	cmp	fp, r3
 8008b90:	dd13      	ble.n	8008bba <__hexnan+0x7a>
 8008b92:	454c      	cmp	r4, r9
 8008b94:	d206      	bcs.n	8008ba4 <__hexnan+0x64>
 8008b96:	2d07      	cmp	r5, #7
 8008b98:	dc04      	bgt.n	8008ba4 <__hexnan+0x64>
 8008b9a:	462a      	mov	r2, r5
 8008b9c:	4649      	mov	r1, r9
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f7ff ffa8 	bl	8008af4 <L_shift>
 8008ba4:	4544      	cmp	r4, r8
 8008ba6:	d944      	bls.n	8008c32 <__hexnan+0xf2>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f1a4 0904 	sub.w	r9, r4, #4
 8008bae:	f844 3c04 	str.w	r3, [r4, #-4]
 8008bb2:	f8cd b008 	str.w	fp, [sp, #8]
 8008bb6:	464c      	mov	r4, r9
 8008bb8:	461d      	mov	r5, r3
 8008bba:	9903      	ldr	r1, [sp, #12]
 8008bbc:	e7d7      	b.n	8008b6e <__hexnan+0x2e>
 8008bbe:	2a29      	cmp	r2, #41	; 0x29
 8008bc0:	d14a      	bne.n	8008c58 <__hexnan+0x118>
 8008bc2:	3102      	adds	r1, #2
 8008bc4:	f8ca 1000 	str.w	r1, [sl]
 8008bc8:	f1bb 0f00 	cmp.w	fp, #0
 8008bcc:	d044      	beq.n	8008c58 <__hexnan+0x118>
 8008bce:	454c      	cmp	r4, r9
 8008bd0:	d206      	bcs.n	8008be0 <__hexnan+0xa0>
 8008bd2:	2d07      	cmp	r5, #7
 8008bd4:	dc04      	bgt.n	8008be0 <__hexnan+0xa0>
 8008bd6:	462a      	mov	r2, r5
 8008bd8:	4649      	mov	r1, r9
 8008bda:	4620      	mov	r0, r4
 8008bdc:	f7ff ff8a 	bl	8008af4 <L_shift>
 8008be0:	4544      	cmp	r4, r8
 8008be2:	d928      	bls.n	8008c36 <__hexnan+0xf6>
 8008be4:	4643      	mov	r3, r8
 8008be6:	f854 2b04 	ldr.w	r2, [r4], #4
 8008bea:	f843 2b04 	str.w	r2, [r3], #4
 8008bee:	42a6      	cmp	r6, r4
 8008bf0:	d2f9      	bcs.n	8008be6 <__hexnan+0xa6>
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f843 2b04 	str.w	r2, [r3], #4
 8008bf8:	429e      	cmp	r6, r3
 8008bfa:	d2fb      	bcs.n	8008bf4 <__hexnan+0xb4>
 8008bfc:	6833      	ldr	r3, [r6, #0]
 8008bfe:	b91b      	cbnz	r3, 8008c08 <__hexnan+0xc8>
 8008c00:	4546      	cmp	r6, r8
 8008c02:	d127      	bne.n	8008c54 <__hexnan+0x114>
 8008c04:	2301      	movs	r3, #1
 8008c06:	6033      	str	r3, [r6, #0]
 8008c08:	2005      	movs	r0, #5
 8008c0a:	e026      	b.n	8008c5a <__hexnan+0x11a>
 8008c0c:	3501      	adds	r5, #1
 8008c0e:	2d08      	cmp	r5, #8
 8008c10:	f10b 0b01 	add.w	fp, fp, #1
 8008c14:	dd06      	ble.n	8008c24 <__hexnan+0xe4>
 8008c16:	4544      	cmp	r4, r8
 8008c18:	d9cf      	bls.n	8008bba <__hexnan+0x7a>
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c20:	2501      	movs	r5, #1
 8008c22:	3c04      	subs	r4, #4
 8008c24:	6822      	ldr	r2, [r4, #0]
 8008c26:	f000 000f 	and.w	r0, r0, #15
 8008c2a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008c2e:	6020      	str	r0, [r4, #0]
 8008c30:	e7c3      	b.n	8008bba <__hexnan+0x7a>
 8008c32:	2508      	movs	r5, #8
 8008c34:	e7c1      	b.n	8008bba <__hexnan+0x7a>
 8008c36:	9b01      	ldr	r3, [sp, #4]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d0df      	beq.n	8008bfc <__hexnan+0xbc>
 8008c3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c40:	f1c3 0320 	rsb	r3, r3, #32
 8008c44:	fa22 f303 	lsr.w	r3, r2, r3
 8008c48:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008c4c:	401a      	ands	r2, r3
 8008c4e:	f847 2c04 	str.w	r2, [r7, #-4]
 8008c52:	e7d3      	b.n	8008bfc <__hexnan+0xbc>
 8008c54:	3e04      	subs	r6, #4
 8008c56:	e7d1      	b.n	8008bfc <__hexnan+0xbc>
 8008c58:	2004      	movs	r0, #4
 8008c5a:	b007      	add	sp, #28
 8008c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c60 <__locale_ctype_ptr_l>:
 8008c60:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008c64:	4770      	bx	lr

08008c66 <__localeconv_l>:
 8008c66:	30f0      	adds	r0, #240	; 0xf0
 8008c68:	4770      	bx	lr
	...

08008c6c <_localeconv_r>:
 8008c6c:	4b04      	ldr	r3, [pc, #16]	; (8008c80 <_localeconv_r+0x14>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	6a18      	ldr	r0, [r3, #32]
 8008c72:	4b04      	ldr	r3, [pc, #16]	; (8008c84 <_localeconv_r+0x18>)
 8008c74:	2800      	cmp	r0, #0
 8008c76:	bf08      	it	eq
 8008c78:	4618      	moveq	r0, r3
 8008c7a:	30f0      	adds	r0, #240	; 0xf0
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	20000010 	.word	0x20000010
 8008c84:	20000074 	.word	0x20000074

08008c88 <__swhatbuf_r>:
 8008c88:	b570      	push	{r4, r5, r6, lr}
 8008c8a:	460e      	mov	r6, r1
 8008c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c90:	2900      	cmp	r1, #0
 8008c92:	b096      	sub	sp, #88	; 0x58
 8008c94:	4614      	mov	r4, r2
 8008c96:	461d      	mov	r5, r3
 8008c98:	da07      	bge.n	8008caa <__swhatbuf_r+0x22>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	602b      	str	r3, [r5, #0]
 8008c9e:	89b3      	ldrh	r3, [r6, #12]
 8008ca0:	061a      	lsls	r2, r3, #24
 8008ca2:	d410      	bmi.n	8008cc6 <__swhatbuf_r+0x3e>
 8008ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ca8:	e00e      	b.n	8008cc8 <__swhatbuf_r+0x40>
 8008caa:	466a      	mov	r2, sp
 8008cac:	f001 f846 	bl	8009d3c <_fstat_r>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	dbf2      	blt.n	8008c9a <__swhatbuf_r+0x12>
 8008cb4:	9a01      	ldr	r2, [sp, #4]
 8008cb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008cba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008cbe:	425a      	negs	r2, r3
 8008cc0:	415a      	adcs	r2, r3
 8008cc2:	602a      	str	r2, [r5, #0]
 8008cc4:	e7ee      	b.n	8008ca4 <__swhatbuf_r+0x1c>
 8008cc6:	2340      	movs	r3, #64	; 0x40
 8008cc8:	2000      	movs	r0, #0
 8008cca:	6023      	str	r3, [r4, #0]
 8008ccc:	b016      	add	sp, #88	; 0x58
 8008cce:	bd70      	pop	{r4, r5, r6, pc}

08008cd0 <__smakebuf_r>:
 8008cd0:	898b      	ldrh	r3, [r1, #12]
 8008cd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cd4:	079d      	lsls	r5, r3, #30
 8008cd6:	4606      	mov	r6, r0
 8008cd8:	460c      	mov	r4, r1
 8008cda:	d507      	bpl.n	8008cec <__smakebuf_r+0x1c>
 8008cdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ce0:	6023      	str	r3, [r4, #0]
 8008ce2:	6123      	str	r3, [r4, #16]
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	6163      	str	r3, [r4, #20]
 8008ce8:	b002      	add	sp, #8
 8008cea:	bd70      	pop	{r4, r5, r6, pc}
 8008cec:	ab01      	add	r3, sp, #4
 8008cee:	466a      	mov	r2, sp
 8008cf0:	f7ff ffca 	bl	8008c88 <__swhatbuf_r>
 8008cf4:	9900      	ldr	r1, [sp, #0]
 8008cf6:	4605      	mov	r5, r0
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	f000 fc9f 	bl	800963c <_malloc_r>
 8008cfe:	b948      	cbnz	r0, 8008d14 <__smakebuf_r+0x44>
 8008d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d04:	059a      	lsls	r2, r3, #22
 8008d06:	d4ef      	bmi.n	8008ce8 <__smakebuf_r+0x18>
 8008d08:	f023 0303 	bic.w	r3, r3, #3
 8008d0c:	f043 0302 	orr.w	r3, r3, #2
 8008d10:	81a3      	strh	r3, [r4, #12]
 8008d12:	e7e3      	b.n	8008cdc <__smakebuf_r+0xc>
 8008d14:	4b0d      	ldr	r3, [pc, #52]	; (8008d4c <__smakebuf_r+0x7c>)
 8008d16:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d18:	89a3      	ldrh	r3, [r4, #12]
 8008d1a:	6020      	str	r0, [r4, #0]
 8008d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d20:	81a3      	strh	r3, [r4, #12]
 8008d22:	9b00      	ldr	r3, [sp, #0]
 8008d24:	6163      	str	r3, [r4, #20]
 8008d26:	9b01      	ldr	r3, [sp, #4]
 8008d28:	6120      	str	r0, [r4, #16]
 8008d2a:	b15b      	cbz	r3, 8008d44 <__smakebuf_r+0x74>
 8008d2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d30:	4630      	mov	r0, r6
 8008d32:	f001 f815 	bl	8009d60 <_isatty_r>
 8008d36:	b128      	cbz	r0, 8008d44 <__smakebuf_r+0x74>
 8008d38:	89a3      	ldrh	r3, [r4, #12]
 8008d3a:	f023 0303 	bic.w	r3, r3, #3
 8008d3e:	f043 0301 	orr.w	r3, r3, #1
 8008d42:	81a3      	strh	r3, [r4, #12]
 8008d44:	89a3      	ldrh	r3, [r4, #12]
 8008d46:	431d      	orrs	r5, r3
 8008d48:	81a5      	strh	r5, [r4, #12]
 8008d4a:	e7cd      	b.n	8008ce8 <__smakebuf_r+0x18>
 8008d4c:	080084c9 	.word	0x080084c9

08008d50 <malloc>:
 8008d50:	4b02      	ldr	r3, [pc, #8]	; (8008d5c <malloc+0xc>)
 8008d52:	4601      	mov	r1, r0
 8008d54:	6818      	ldr	r0, [r3, #0]
 8008d56:	f000 bc71 	b.w	800963c <_malloc_r>
 8008d5a:	bf00      	nop
 8008d5c:	20000010 	.word	0x20000010

08008d60 <__ascii_mbtowc>:
 8008d60:	b082      	sub	sp, #8
 8008d62:	b901      	cbnz	r1, 8008d66 <__ascii_mbtowc+0x6>
 8008d64:	a901      	add	r1, sp, #4
 8008d66:	b142      	cbz	r2, 8008d7a <__ascii_mbtowc+0x1a>
 8008d68:	b14b      	cbz	r3, 8008d7e <__ascii_mbtowc+0x1e>
 8008d6a:	7813      	ldrb	r3, [r2, #0]
 8008d6c:	600b      	str	r3, [r1, #0]
 8008d6e:	7812      	ldrb	r2, [r2, #0]
 8008d70:	1c10      	adds	r0, r2, #0
 8008d72:	bf18      	it	ne
 8008d74:	2001      	movne	r0, #1
 8008d76:	b002      	add	sp, #8
 8008d78:	4770      	bx	lr
 8008d7a:	4610      	mov	r0, r2
 8008d7c:	e7fb      	b.n	8008d76 <__ascii_mbtowc+0x16>
 8008d7e:	f06f 0001 	mvn.w	r0, #1
 8008d82:	e7f8      	b.n	8008d76 <__ascii_mbtowc+0x16>

08008d84 <_Balloc>:
 8008d84:	b570      	push	{r4, r5, r6, lr}
 8008d86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d88:	4604      	mov	r4, r0
 8008d8a:	460e      	mov	r6, r1
 8008d8c:	b93d      	cbnz	r5, 8008d9e <_Balloc+0x1a>
 8008d8e:	2010      	movs	r0, #16
 8008d90:	f7ff ffde 	bl	8008d50 <malloc>
 8008d94:	6260      	str	r0, [r4, #36]	; 0x24
 8008d96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008d9a:	6005      	str	r5, [r0, #0]
 8008d9c:	60c5      	str	r5, [r0, #12]
 8008d9e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008da0:	68eb      	ldr	r3, [r5, #12]
 8008da2:	b183      	cbz	r3, 8008dc6 <_Balloc+0x42>
 8008da4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008dac:	b9b8      	cbnz	r0, 8008dde <_Balloc+0x5a>
 8008dae:	2101      	movs	r1, #1
 8008db0:	fa01 f506 	lsl.w	r5, r1, r6
 8008db4:	1d6a      	adds	r2, r5, #5
 8008db6:	0092      	lsls	r2, r2, #2
 8008db8:	4620      	mov	r0, r4
 8008dba:	f000 fbe2 	bl	8009582 <_calloc_r>
 8008dbe:	b160      	cbz	r0, 8008dda <_Balloc+0x56>
 8008dc0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008dc4:	e00e      	b.n	8008de4 <_Balloc+0x60>
 8008dc6:	2221      	movs	r2, #33	; 0x21
 8008dc8:	2104      	movs	r1, #4
 8008dca:	4620      	mov	r0, r4
 8008dcc:	f000 fbd9 	bl	8009582 <_calloc_r>
 8008dd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dd2:	60e8      	str	r0, [r5, #12]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d1e4      	bne.n	8008da4 <_Balloc+0x20>
 8008dda:	2000      	movs	r0, #0
 8008ddc:	bd70      	pop	{r4, r5, r6, pc}
 8008dde:	6802      	ldr	r2, [r0, #0]
 8008de0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008de4:	2300      	movs	r3, #0
 8008de6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008dea:	e7f7      	b.n	8008ddc <_Balloc+0x58>

08008dec <_Bfree>:
 8008dec:	b570      	push	{r4, r5, r6, lr}
 8008dee:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008df0:	4606      	mov	r6, r0
 8008df2:	460d      	mov	r5, r1
 8008df4:	b93c      	cbnz	r4, 8008e06 <_Bfree+0x1a>
 8008df6:	2010      	movs	r0, #16
 8008df8:	f7ff ffaa 	bl	8008d50 <malloc>
 8008dfc:	6270      	str	r0, [r6, #36]	; 0x24
 8008dfe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e02:	6004      	str	r4, [r0, #0]
 8008e04:	60c4      	str	r4, [r0, #12]
 8008e06:	b13d      	cbz	r5, 8008e18 <_Bfree+0x2c>
 8008e08:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008e0a:	686a      	ldr	r2, [r5, #4]
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e12:	6029      	str	r1, [r5, #0]
 8008e14:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008e18:	bd70      	pop	{r4, r5, r6, pc}

08008e1a <__multadd>:
 8008e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e1e:	690d      	ldr	r5, [r1, #16]
 8008e20:	461f      	mov	r7, r3
 8008e22:	4606      	mov	r6, r0
 8008e24:	460c      	mov	r4, r1
 8008e26:	f101 0c14 	add.w	ip, r1, #20
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	f8dc 0000 	ldr.w	r0, [ip]
 8008e30:	b281      	uxth	r1, r0
 8008e32:	fb02 7101 	mla	r1, r2, r1, r7
 8008e36:	0c0f      	lsrs	r7, r1, #16
 8008e38:	0c00      	lsrs	r0, r0, #16
 8008e3a:	fb02 7000 	mla	r0, r2, r0, r7
 8008e3e:	b289      	uxth	r1, r1
 8008e40:	3301      	adds	r3, #1
 8008e42:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008e46:	429d      	cmp	r5, r3
 8008e48:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008e4c:	f84c 1b04 	str.w	r1, [ip], #4
 8008e50:	dcec      	bgt.n	8008e2c <__multadd+0x12>
 8008e52:	b1d7      	cbz	r7, 8008e8a <__multadd+0x70>
 8008e54:	68a3      	ldr	r3, [r4, #8]
 8008e56:	42ab      	cmp	r3, r5
 8008e58:	dc12      	bgt.n	8008e80 <__multadd+0x66>
 8008e5a:	6861      	ldr	r1, [r4, #4]
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	3101      	adds	r1, #1
 8008e60:	f7ff ff90 	bl	8008d84 <_Balloc>
 8008e64:	6922      	ldr	r2, [r4, #16]
 8008e66:	3202      	adds	r2, #2
 8008e68:	f104 010c 	add.w	r1, r4, #12
 8008e6c:	4680      	mov	r8, r0
 8008e6e:	0092      	lsls	r2, r2, #2
 8008e70:	300c      	adds	r0, #12
 8008e72:	f7fc fdad 	bl	80059d0 <memcpy>
 8008e76:	4621      	mov	r1, r4
 8008e78:	4630      	mov	r0, r6
 8008e7a:	f7ff ffb7 	bl	8008dec <_Bfree>
 8008e7e:	4644      	mov	r4, r8
 8008e80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e84:	3501      	adds	r5, #1
 8008e86:	615f      	str	r7, [r3, #20]
 8008e88:	6125      	str	r5, [r4, #16]
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008e90 <__s2b>:
 8008e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e94:	460c      	mov	r4, r1
 8008e96:	4615      	mov	r5, r2
 8008e98:	461f      	mov	r7, r3
 8008e9a:	2209      	movs	r2, #9
 8008e9c:	3308      	adds	r3, #8
 8008e9e:	4606      	mov	r6, r0
 8008ea0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	db20      	blt.n	8008eee <__s2b+0x5e>
 8008eac:	4630      	mov	r0, r6
 8008eae:	f7ff ff69 	bl	8008d84 <_Balloc>
 8008eb2:	9b08      	ldr	r3, [sp, #32]
 8008eb4:	6143      	str	r3, [r0, #20]
 8008eb6:	2d09      	cmp	r5, #9
 8008eb8:	f04f 0301 	mov.w	r3, #1
 8008ebc:	6103      	str	r3, [r0, #16]
 8008ebe:	dd19      	ble.n	8008ef4 <__s2b+0x64>
 8008ec0:	f104 0809 	add.w	r8, r4, #9
 8008ec4:	46c1      	mov	r9, r8
 8008ec6:	442c      	add	r4, r5
 8008ec8:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008ecc:	4601      	mov	r1, r0
 8008ece:	3b30      	subs	r3, #48	; 0x30
 8008ed0:	220a      	movs	r2, #10
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	f7ff ffa1 	bl	8008e1a <__multadd>
 8008ed8:	45a1      	cmp	r9, r4
 8008eda:	d1f5      	bne.n	8008ec8 <__s2b+0x38>
 8008edc:	eb08 0405 	add.w	r4, r8, r5
 8008ee0:	3c08      	subs	r4, #8
 8008ee2:	1b2d      	subs	r5, r5, r4
 8008ee4:	1963      	adds	r3, r4, r5
 8008ee6:	42bb      	cmp	r3, r7
 8008ee8:	db07      	blt.n	8008efa <__s2b+0x6a>
 8008eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eee:	0052      	lsls	r2, r2, #1
 8008ef0:	3101      	adds	r1, #1
 8008ef2:	e7d9      	b.n	8008ea8 <__s2b+0x18>
 8008ef4:	340a      	adds	r4, #10
 8008ef6:	2509      	movs	r5, #9
 8008ef8:	e7f3      	b.n	8008ee2 <__s2b+0x52>
 8008efa:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008efe:	4601      	mov	r1, r0
 8008f00:	3b30      	subs	r3, #48	; 0x30
 8008f02:	220a      	movs	r2, #10
 8008f04:	4630      	mov	r0, r6
 8008f06:	f7ff ff88 	bl	8008e1a <__multadd>
 8008f0a:	e7eb      	b.n	8008ee4 <__s2b+0x54>

08008f0c <__hi0bits>:
 8008f0c:	0c02      	lsrs	r2, r0, #16
 8008f0e:	0412      	lsls	r2, r2, #16
 8008f10:	4603      	mov	r3, r0
 8008f12:	b9b2      	cbnz	r2, 8008f42 <__hi0bits+0x36>
 8008f14:	0403      	lsls	r3, r0, #16
 8008f16:	2010      	movs	r0, #16
 8008f18:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008f1c:	bf04      	itt	eq
 8008f1e:	021b      	lsleq	r3, r3, #8
 8008f20:	3008      	addeq	r0, #8
 8008f22:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008f26:	bf04      	itt	eq
 8008f28:	011b      	lsleq	r3, r3, #4
 8008f2a:	3004      	addeq	r0, #4
 8008f2c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008f30:	bf04      	itt	eq
 8008f32:	009b      	lsleq	r3, r3, #2
 8008f34:	3002      	addeq	r0, #2
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	db06      	blt.n	8008f48 <__hi0bits+0x3c>
 8008f3a:	005b      	lsls	r3, r3, #1
 8008f3c:	d503      	bpl.n	8008f46 <__hi0bits+0x3a>
 8008f3e:	3001      	adds	r0, #1
 8008f40:	4770      	bx	lr
 8008f42:	2000      	movs	r0, #0
 8008f44:	e7e8      	b.n	8008f18 <__hi0bits+0xc>
 8008f46:	2020      	movs	r0, #32
 8008f48:	4770      	bx	lr

08008f4a <__lo0bits>:
 8008f4a:	6803      	ldr	r3, [r0, #0]
 8008f4c:	f013 0207 	ands.w	r2, r3, #7
 8008f50:	4601      	mov	r1, r0
 8008f52:	d00b      	beq.n	8008f6c <__lo0bits+0x22>
 8008f54:	07da      	lsls	r2, r3, #31
 8008f56:	d423      	bmi.n	8008fa0 <__lo0bits+0x56>
 8008f58:	0798      	lsls	r0, r3, #30
 8008f5a:	bf49      	itett	mi
 8008f5c:	085b      	lsrmi	r3, r3, #1
 8008f5e:	089b      	lsrpl	r3, r3, #2
 8008f60:	2001      	movmi	r0, #1
 8008f62:	600b      	strmi	r3, [r1, #0]
 8008f64:	bf5c      	itt	pl
 8008f66:	600b      	strpl	r3, [r1, #0]
 8008f68:	2002      	movpl	r0, #2
 8008f6a:	4770      	bx	lr
 8008f6c:	b298      	uxth	r0, r3
 8008f6e:	b9a8      	cbnz	r0, 8008f9c <__lo0bits+0x52>
 8008f70:	0c1b      	lsrs	r3, r3, #16
 8008f72:	2010      	movs	r0, #16
 8008f74:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008f78:	bf04      	itt	eq
 8008f7a:	0a1b      	lsreq	r3, r3, #8
 8008f7c:	3008      	addeq	r0, #8
 8008f7e:	071a      	lsls	r2, r3, #28
 8008f80:	bf04      	itt	eq
 8008f82:	091b      	lsreq	r3, r3, #4
 8008f84:	3004      	addeq	r0, #4
 8008f86:	079a      	lsls	r2, r3, #30
 8008f88:	bf04      	itt	eq
 8008f8a:	089b      	lsreq	r3, r3, #2
 8008f8c:	3002      	addeq	r0, #2
 8008f8e:	07da      	lsls	r2, r3, #31
 8008f90:	d402      	bmi.n	8008f98 <__lo0bits+0x4e>
 8008f92:	085b      	lsrs	r3, r3, #1
 8008f94:	d006      	beq.n	8008fa4 <__lo0bits+0x5a>
 8008f96:	3001      	adds	r0, #1
 8008f98:	600b      	str	r3, [r1, #0]
 8008f9a:	4770      	bx	lr
 8008f9c:	4610      	mov	r0, r2
 8008f9e:	e7e9      	b.n	8008f74 <__lo0bits+0x2a>
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	4770      	bx	lr
 8008fa4:	2020      	movs	r0, #32
 8008fa6:	4770      	bx	lr

08008fa8 <__i2b>:
 8008fa8:	b510      	push	{r4, lr}
 8008faa:	460c      	mov	r4, r1
 8008fac:	2101      	movs	r1, #1
 8008fae:	f7ff fee9 	bl	8008d84 <_Balloc>
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	6144      	str	r4, [r0, #20]
 8008fb6:	6102      	str	r2, [r0, #16]
 8008fb8:	bd10      	pop	{r4, pc}

08008fba <__multiply>:
 8008fba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fbe:	4614      	mov	r4, r2
 8008fc0:	690a      	ldr	r2, [r1, #16]
 8008fc2:	6923      	ldr	r3, [r4, #16]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	bfb8      	it	lt
 8008fc8:	460b      	movlt	r3, r1
 8008fca:	4688      	mov	r8, r1
 8008fcc:	bfbc      	itt	lt
 8008fce:	46a0      	movlt	r8, r4
 8008fd0:	461c      	movlt	r4, r3
 8008fd2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008fd6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008fda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008fde:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008fe2:	eb07 0609 	add.w	r6, r7, r9
 8008fe6:	42b3      	cmp	r3, r6
 8008fe8:	bfb8      	it	lt
 8008fea:	3101      	addlt	r1, #1
 8008fec:	f7ff feca 	bl	8008d84 <_Balloc>
 8008ff0:	f100 0514 	add.w	r5, r0, #20
 8008ff4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008ff8:	462b      	mov	r3, r5
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	4573      	cmp	r3, lr
 8008ffe:	d316      	bcc.n	800902e <__multiply+0x74>
 8009000:	f104 0214 	add.w	r2, r4, #20
 8009004:	f108 0114 	add.w	r1, r8, #20
 8009008:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800900c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	9b00      	ldr	r3, [sp, #0]
 8009014:	9201      	str	r2, [sp, #4]
 8009016:	4293      	cmp	r3, r2
 8009018:	d80c      	bhi.n	8009034 <__multiply+0x7a>
 800901a:	2e00      	cmp	r6, #0
 800901c:	dd03      	ble.n	8009026 <__multiply+0x6c>
 800901e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009022:	2b00      	cmp	r3, #0
 8009024:	d05d      	beq.n	80090e2 <__multiply+0x128>
 8009026:	6106      	str	r6, [r0, #16]
 8009028:	b003      	add	sp, #12
 800902a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800902e:	f843 2b04 	str.w	r2, [r3], #4
 8009032:	e7e3      	b.n	8008ffc <__multiply+0x42>
 8009034:	f8b2 b000 	ldrh.w	fp, [r2]
 8009038:	f1bb 0f00 	cmp.w	fp, #0
 800903c:	d023      	beq.n	8009086 <__multiply+0xcc>
 800903e:	4689      	mov	r9, r1
 8009040:	46ac      	mov	ip, r5
 8009042:	f04f 0800 	mov.w	r8, #0
 8009046:	f859 4b04 	ldr.w	r4, [r9], #4
 800904a:	f8dc a000 	ldr.w	sl, [ip]
 800904e:	b2a3      	uxth	r3, r4
 8009050:	fa1f fa8a 	uxth.w	sl, sl
 8009054:	fb0b a303 	mla	r3, fp, r3, sl
 8009058:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800905c:	f8dc 4000 	ldr.w	r4, [ip]
 8009060:	4443      	add	r3, r8
 8009062:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009066:	fb0b 840a 	mla	r4, fp, sl, r8
 800906a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800906e:	46e2      	mov	sl, ip
 8009070:	b29b      	uxth	r3, r3
 8009072:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009076:	454f      	cmp	r7, r9
 8009078:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800907c:	f84a 3b04 	str.w	r3, [sl], #4
 8009080:	d82b      	bhi.n	80090da <__multiply+0x120>
 8009082:	f8cc 8004 	str.w	r8, [ip, #4]
 8009086:	9b01      	ldr	r3, [sp, #4]
 8009088:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800908c:	3204      	adds	r2, #4
 800908e:	f1ba 0f00 	cmp.w	sl, #0
 8009092:	d020      	beq.n	80090d6 <__multiply+0x11c>
 8009094:	682b      	ldr	r3, [r5, #0]
 8009096:	4689      	mov	r9, r1
 8009098:	46a8      	mov	r8, r5
 800909a:	f04f 0b00 	mov.w	fp, #0
 800909e:	f8b9 c000 	ldrh.w	ip, [r9]
 80090a2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80090a6:	fb0a 440c 	mla	r4, sl, ip, r4
 80090aa:	445c      	add	r4, fp
 80090ac:	46c4      	mov	ip, r8
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80090b4:	f84c 3b04 	str.w	r3, [ip], #4
 80090b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80090bc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80090c0:	0c1b      	lsrs	r3, r3, #16
 80090c2:	fb0a b303 	mla	r3, sl, r3, fp
 80090c6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80090ca:	454f      	cmp	r7, r9
 80090cc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80090d0:	d805      	bhi.n	80090de <__multiply+0x124>
 80090d2:	f8c8 3004 	str.w	r3, [r8, #4]
 80090d6:	3504      	adds	r5, #4
 80090d8:	e79b      	b.n	8009012 <__multiply+0x58>
 80090da:	46d4      	mov	ip, sl
 80090dc:	e7b3      	b.n	8009046 <__multiply+0x8c>
 80090de:	46e0      	mov	r8, ip
 80090e0:	e7dd      	b.n	800909e <__multiply+0xe4>
 80090e2:	3e01      	subs	r6, #1
 80090e4:	e799      	b.n	800901a <__multiply+0x60>
	...

080090e8 <__pow5mult>:
 80090e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090ec:	4615      	mov	r5, r2
 80090ee:	f012 0203 	ands.w	r2, r2, #3
 80090f2:	4606      	mov	r6, r0
 80090f4:	460f      	mov	r7, r1
 80090f6:	d007      	beq.n	8009108 <__pow5mult+0x20>
 80090f8:	3a01      	subs	r2, #1
 80090fa:	4c21      	ldr	r4, [pc, #132]	; (8009180 <__pow5mult+0x98>)
 80090fc:	2300      	movs	r3, #0
 80090fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009102:	f7ff fe8a 	bl	8008e1a <__multadd>
 8009106:	4607      	mov	r7, r0
 8009108:	10ad      	asrs	r5, r5, #2
 800910a:	d035      	beq.n	8009178 <__pow5mult+0x90>
 800910c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800910e:	b93c      	cbnz	r4, 8009120 <__pow5mult+0x38>
 8009110:	2010      	movs	r0, #16
 8009112:	f7ff fe1d 	bl	8008d50 <malloc>
 8009116:	6270      	str	r0, [r6, #36]	; 0x24
 8009118:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800911c:	6004      	str	r4, [r0, #0]
 800911e:	60c4      	str	r4, [r0, #12]
 8009120:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009124:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009128:	b94c      	cbnz	r4, 800913e <__pow5mult+0x56>
 800912a:	f240 2171 	movw	r1, #625	; 0x271
 800912e:	4630      	mov	r0, r6
 8009130:	f7ff ff3a 	bl	8008fa8 <__i2b>
 8009134:	2300      	movs	r3, #0
 8009136:	f8c8 0008 	str.w	r0, [r8, #8]
 800913a:	4604      	mov	r4, r0
 800913c:	6003      	str	r3, [r0, #0]
 800913e:	f04f 0800 	mov.w	r8, #0
 8009142:	07eb      	lsls	r3, r5, #31
 8009144:	d50a      	bpl.n	800915c <__pow5mult+0x74>
 8009146:	4639      	mov	r1, r7
 8009148:	4622      	mov	r2, r4
 800914a:	4630      	mov	r0, r6
 800914c:	f7ff ff35 	bl	8008fba <__multiply>
 8009150:	4639      	mov	r1, r7
 8009152:	4681      	mov	r9, r0
 8009154:	4630      	mov	r0, r6
 8009156:	f7ff fe49 	bl	8008dec <_Bfree>
 800915a:	464f      	mov	r7, r9
 800915c:	106d      	asrs	r5, r5, #1
 800915e:	d00b      	beq.n	8009178 <__pow5mult+0x90>
 8009160:	6820      	ldr	r0, [r4, #0]
 8009162:	b938      	cbnz	r0, 8009174 <__pow5mult+0x8c>
 8009164:	4622      	mov	r2, r4
 8009166:	4621      	mov	r1, r4
 8009168:	4630      	mov	r0, r6
 800916a:	f7ff ff26 	bl	8008fba <__multiply>
 800916e:	6020      	str	r0, [r4, #0]
 8009170:	f8c0 8000 	str.w	r8, [r0]
 8009174:	4604      	mov	r4, r0
 8009176:	e7e4      	b.n	8009142 <__pow5mult+0x5a>
 8009178:	4638      	mov	r0, r7
 800917a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800917e:	bf00      	nop
 8009180:	0800a0f8 	.word	0x0800a0f8

08009184 <__lshift>:
 8009184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009188:	460c      	mov	r4, r1
 800918a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800918e:	6923      	ldr	r3, [r4, #16]
 8009190:	6849      	ldr	r1, [r1, #4]
 8009192:	eb0a 0903 	add.w	r9, sl, r3
 8009196:	68a3      	ldr	r3, [r4, #8]
 8009198:	4607      	mov	r7, r0
 800919a:	4616      	mov	r6, r2
 800919c:	f109 0501 	add.w	r5, r9, #1
 80091a0:	42ab      	cmp	r3, r5
 80091a2:	db32      	blt.n	800920a <__lshift+0x86>
 80091a4:	4638      	mov	r0, r7
 80091a6:	f7ff fded 	bl	8008d84 <_Balloc>
 80091aa:	2300      	movs	r3, #0
 80091ac:	4680      	mov	r8, r0
 80091ae:	f100 0114 	add.w	r1, r0, #20
 80091b2:	461a      	mov	r2, r3
 80091b4:	4553      	cmp	r3, sl
 80091b6:	db2b      	blt.n	8009210 <__lshift+0x8c>
 80091b8:	6920      	ldr	r0, [r4, #16]
 80091ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091be:	f104 0314 	add.w	r3, r4, #20
 80091c2:	f016 021f 	ands.w	r2, r6, #31
 80091c6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091ca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80091ce:	d025      	beq.n	800921c <__lshift+0x98>
 80091d0:	f1c2 0e20 	rsb	lr, r2, #32
 80091d4:	2000      	movs	r0, #0
 80091d6:	681e      	ldr	r6, [r3, #0]
 80091d8:	468a      	mov	sl, r1
 80091da:	4096      	lsls	r6, r2
 80091dc:	4330      	orrs	r0, r6
 80091de:	f84a 0b04 	str.w	r0, [sl], #4
 80091e2:	f853 0b04 	ldr.w	r0, [r3], #4
 80091e6:	459c      	cmp	ip, r3
 80091e8:	fa20 f00e 	lsr.w	r0, r0, lr
 80091ec:	d814      	bhi.n	8009218 <__lshift+0x94>
 80091ee:	6048      	str	r0, [r1, #4]
 80091f0:	b108      	cbz	r0, 80091f6 <__lshift+0x72>
 80091f2:	f109 0502 	add.w	r5, r9, #2
 80091f6:	3d01      	subs	r5, #1
 80091f8:	4638      	mov	r0, r7
 80091fa:	f8c8 5010 	str.w	r5, [r8, #16]
 80091fe:	4621      	mov	r1, r4
 8009200:	f7ff fdf4 	bl	8008dec <_Bfree>
 8009204:	4640      	mov	r0, r8
 8009206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800920a:	3101      	adds	r1, #1
 800920c:	005b      	lsls	r3, r3, #1
 800920e:	e7c7      	b.n	80091a0 <__lshift+0x1c>
 8009210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009214:	3301      	adds	r3, #1
 8009216:	e7cd      	b.n	80091b4 <__lshift+0x30>
 8009218:	4651      	mov	r1, sl
 800921a:	e7dc      	b.n	80091d6 <__lshift+0x52>
 800921c:	3904      	subs	r1, #4
 800921e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009222:	f841 2f04 	str.w	r2, [r1, #4]!
 8009226:	459c      	cmp	ip, r3
 8009228:	d8f9      	bhi.n	800921e <__lshift+0x9a>
 800922a:	e7e4      	b.n	80091f6 <__lshift+0x72>

0800922c <__mcmp>:
 800922c:	6903      	ldr	r3, [r0, #16]
 800922e:	690a      	ldr	r2, [r1, #16]
 8009230:	1a9b      	subs	r3, r3, r2
 8009232:	b530      	push	{r4, r5, lr}
 8009234:	d10c      	bne.n	8009250 <__mcmp+0x24>
 8009236:	0092      	lsls	r2, r2, #2
 8009238:	3014      	adds	r0, #20
 800923a:	3114      	adds	r1, #20
 800923c:	1884      	adds	r4, r0, r2
 800923e:	4411      	add	r1, r2
 8009240:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009244:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009248:	4295      	cmp	r5, r2
 800924a:	d003      	beq.n	8009254 <__mcmp+0x28>
 800924c:	d305      	bcc.n	800925a <__mcmp+0x2e>
 800924e:	2301      	movs	r3, #1
 8009250:	4618      	mov	r0, r3
 8009252:	bd30      	pop	{r4, r5, pc}
 8009254:	42a0      	cmp	r0, r4
 8009256:	d3f3      	bcc.n	8009240 <__mcmp+0x14>
 8009258:	e7fa      	b.n	8009250 <__mcmp+0x24>
 800925a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800925e:	e7f7      	b.n	8009250 <__mcmp+0x24>

08009260 <__mdiff>:
 8009260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009264:	460d      	mov	r5, r1
 8009266:	4607      	mov	r7, r0
 8009268:	4611      	mov	r1, r2
 800926a:	4628      	mov	r0, r5
 800926c:	4614      	mov	r4, r2
 800926e:	f7ff ffdd 	bl	800922c <__mcmp>
 8009272:	1e06      	subs	r6, r0, #0
 8009274:	d108      	bne.n	8009288 <__mdiff+0x28>
 8009276:	4631      	mov	r1, r6
 8009278:	4638      	mov	r0, r7
 800927a:	f7ff fd83 	bl	8008d84 <_Balloc>
 800927e:	2301      	movs	r3, #1
 8009280:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009288:	bfa4      	itt	ge
 800928a:	4623      	movge	r3, r4
 800928c:	462c      	movge	r4, r5
 800928e:	4638      	mov	r0, r7
 8009290:	6861      	ldr	r1, [r4, #4]
 8009292:	bfa6      	itte	ge
 8009294:	461d      	movge	r5, r3
 8009296:	2600      	movge	r6, #0
 8009298:	2601      	movlt	r6, #1
 800929a:	f7ff fd73 	bl	8008d84 <_Balloc>
 800929e:	692b      	ldr	r3, [r5, #16]
 80092a0:	60c6      	str	r6, [r0, #12]
 80092a2:	6926      	ldr	r6, [r4, #16]
 80092a4:	f105 0914 	add.w	r9, r5, #20
 80092a8:	f104 0214 	add.w	r2, r4, #20
 80092ac:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80092b0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80092b4:	f100 0514 	add.w	r5, r0, #20
 80092b8:	f04f 0e00 	mov.w	lr, #0
 80092bc:	f852 ab04 	ldr.w	sl, [r2], #4
 80092c0:	f859 4b04 	ldr.w	r4, [r9], #4
 80092c4:	fa1e f18a 	uxtah	r1, lr, sl
 80092c8:	b2a3      	uxth	r3, r4
 80092ca:	1ac9      	subs	r1, r1, r3
 80092cc:	0c23      	lsrs	r3, r4, #16
 80092ce:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80092d2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80092d6:	b289      	uxth	r1, r1
 80092d8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80092dc:	45c8      	cmp	r8, r9
 80092de:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80092e2:	4694      	mov	ip, r2
 80092e4:	f845 3b04 	str.w	r3, [r5], #4
 80092e8:	d8e8      	bhi.n	80092bc <__mdiff+0x5c>
 80092ea:	45bc      	cmp	ip, r7
 80092ec:	d304      	bcc.n	80092f8 <__mdiff+0x98>
 80092ee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80092f2:	b183      	cbz	r3, 8009316 <__mdiff+0xb6>
 80092f4:	6106      	str	r6, [r0, #16]
 80092f6:	e7c5      	b.n	8009284 <__mdiff+0x24>
 80092f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80092fc:	fa1e f381 	uxtah	r3, lr, r1
 8009300:	141a      	asrs	r2, r3, #16
 8009302:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009306:	b29b      	uxth	r3, r3
 8009308:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800930c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009310:	f845 3b04 	str.w	r3, [r5], #4
 8009314:	e7e9      	b.n	80092ea <__mdiff+0x8a>
 8009316:	3e01      	subs	r6, #1
 8009318:	e7e9      	b.n	80092ee <__mdiff+0x8e>
	...

0800931c <__ulp>:
 800931c:	4b12      	ldr	r3, [pc, #72]	; (8009368 <__ulp+0x4c>)
 800931e:	ee10 2a90 	vmov	r2, s1
 8009322:	401a      	ands	r2, r3
 8009324:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8009328:	2b00      	cmp	r3, #0
 800932a:	dd04      	ble.n	8009336 <__ulp+0x1a>
 800932c:	2000      	movs	r0, #0
 800932e:	4619      	mov	r1, r3
 8009330:	ec41 0b10 	vmov	d0, r0, r1
 8009334:	4770      	bx	lr
 8009336:	425b      	negs	r3, r3
 8009338:	151b      	asrs	r3, r3, #20
 800933a:	2b13      	cmp	r3, #19
 800933c:	f04f 0000 	mov.w	r0, #0
 8009340:	f04f 0100 	mov.w	r1, #0
 8009344:	dc04      	bgt.n	8009350 <__ulp+0x34>
 8009346:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800934a:	fa42 f103 	asr.w	r1, r2, r3
 800934e:	e7ef      	b.n	8009330 <__ulp+0x14>
 8009350:	3b14      	subs	r3, #20
 8009352:	2b1e      	cmp	r3, #30
 8009354:	f04f 0201 	mov.w	r2, #1
 8009358:	bfda      	itte	le
 800935a:	f1c3 031f 	rsble	r3, r3, #31
 800935e:	fa02 f303 	lslle.w	r3, r2, r3
 8009362:	4613      	movgt	r3, r2
 8009364:	4618      	mov	r0, r3
 8009366:	e7e3      	b.n	8009330 <__ulp+0x14>
 8009368:	7ff00000 	.word	0x7ff00000

0800936c <__b2d>:
 800936c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936e:	6905      	ldr	r5, [r0, #16]
 8009370:	f100 0714 	add.w	r7, r0, #20
 8009374:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009378:	1f2e      	subs	r6, r5, #4
 800937a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800937e:	4620      	mov	r0, r4
 8009380:	f7ff fdc4 	bl	8008f0c <__hi0bits>
 8009384:	f1c0 0320 	rsb	r3, r0, #32
 8009388:	280a      	cmp	r0, #10
 800938a:	600b      	str	r3, [r1, #0]
 800938c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009404 <__b2d+0x98>
 8009390:	dc14      	bgt.n	80093bc <__b2d+0x50>
 8009392:	f1c0 0e0b 	rsb	lr, r0, #11
 8009396:	fa24 f10e 	lsr.w	r1, r4, lr
 800939a:	42b7      	cmp	r7, r6
 800939c:	ea41 030c 	orr.w	r3, r1, ip
 80093a0:	bf34      	ite	cc
 80093a2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80093a6:	2100      	movcs	r1, #0
 80093a8:	3015      	adds	r0, #21
 80093aa:	fa04 f000 	lsl.w	r0, r4, r0
 80093ae:	fa21 f10e 	lsr.w	r1, r1, lr
 80093b2:	ea40 0201 	orr.w	r2, r0, r1
 80093b6:	ec43 2b10 	vmov	d0, r2, r3
 80093ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093bc:	42b7      	cmp	r7, r6
 80093be:	bf3a      	itte	cc
 80093c0:	f1a5 0608 	subcc.w	r6, r5, #8
 80093c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80093c8:	2100      	movcs	r1, #0
 80093ca:	380b      	subs	r0, #11
 80093cc:	d015      	beq.n	80093fa <__b2d+0x8e>
 80093ce:	4084      	lsls	r4, r0
 80093d0:	f1c0 0520 	rsb	r5, r0, #32
 80093d4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80093d8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80093dc:	42be      	cmp	r6, r7
 80093de:	fa21 fc05 	lsr.w	ip, r1, r5
 80093e2:	ea44 030c 	orr.w	r3, r4, ip
 80093e6:	bf8c      	ite	hi
 80093e8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80093ec:	2400      	movls	r4, #0
 80093ee:	fa01 f000 	lsl.w	r0, r1, r0
 80093f2:	40ec      	lsrs	r4, r5
 80093f4:	ea40 0204 	orr.w	r2, r0, r4
 80093f8:	e7dd      	b.n	80093b6 <__b2d+0x4a>
 80093fa:	ea44 030c 	orr.w	r3, r4, ip
 80093fe:	460a      	mov	r2, r1
 8009400:	e7d9      	b.n	80093b6 <__b2d+0x4a>
 8009402:	bf00      	nop
 8009404:	3ff00000 	.word	0x3ff00000

08009408 <__d2b>:
 8009408:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800940c:	460e      	mov	r6, r1
 800940e:	2101      	movs	r1, #1
 8009410:	ec59 8b10 	vmov	r8, r9, d0
 8009414:	4615      	mov	r5, r2
 8009416:	f7ff fcb5 	bl	8008d84 <_Balloc>
 800941a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800941e:	4607      	mov	r7, r0
 8009420:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009424:	bb34      	cbnz	r4, 8009474 <__d2b+0x6c>
 8009426:	9301      	str	r3, [sp, #4]
 8009428:	f1b8 0300 	subs.w	r3, r8, #0
 800942c:	d027      	beq.n	800947e <__d2b+0x76>
 800942e:	a802      	add	r0, sp, #8
 8009430:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009434:	f7ff fd89 	bl	8008f4a <__lo0bits>
 8009438:	9900      	ldr	r1, [sp, #0]
 800943a:	b1f0      	cbz	r0, 800947a <__d2b+0x72>
 800943c:	9a01      	ldr	r2, [sp, #4]
 800943e:	f1c0 0320 	rsb	r3, r0, #32
 8009442:	fa02 f303 	lsl.w	r3, r2, r3
 8009446:	430b      	orrs	r3, r1
 8009448:	40c2      	lsrs	r2, r0
 800944a:	617b      	str	r3, [r7, #20]
 800944c:	9201      	str	r2, [sp, #4]
 800944e:	9b01      	ldr	r3, [sp, #4]
 8009450:	61bb      	str	r3, [r7, #24]
 8009452:	2b00      	cmp	r3, #0
 8009454:	bf14      	ite	ne
 8009456:	2102      	movne	r1, #2
 8009458:	2101      	moveq	r1, #1
 800945a:	6139      	str	r1, [r7, #16]
 800945c:	b1c4      	cbz	r4, 8009490 <__d2b+0x88>
 800945e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009462:	4404      	add	r4, r0
 8009464:	6034      	str	r4, [r6, #0]
 8009466:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800946a:	6028      	str	r0, [r5, #0]
 800946c:	4638      	mov	r0, r7
 800946e:	b003      	add	sp, #12
 8009470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009474:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009478:	e7d5      	b.n	8009426 <__d2b+0x1e>
 800947a:	6179      	str	r1, [r7, #20]
 800947c:	e7e7      	b.n	800944e <__d2b+0x46>
 800947e:	a801      	add	r0, sp, #4
 8009480:	f7ff fd63 	bl	8008f4a <__lo0bits>
 8009484:	9b01      	ldr	r3, [sp, #4]
 8009486:	617b      	str	r3, [r7, #20]
 8009488:	2101      	movs	r1, #1
 800948a:	6139      	str	r1, [r7, #16]
 800948c:	3020      	adds	r0, #32
 800948e:	e7e5      	b.n	800945c <__d2b+0x54>
 8009490:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009494:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009498:	6030      	str	r0, [r6, #0]
 800949a:	6918      	ldr	r0, [r3, #16]
 800949c:	f7ff fd36 	bl	8008f0c <__hi0bits>
 80094a0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80094a4:	e7e1      	b.n	800946a <__d2b+0x62>

080094a6 <__ratio>:
 80094a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094aa:	4688      	mov	r8, r1
 80094ac:	4669      	mov	r1, sp
 80094ae:	4681      	mov	r9, r0
 80094b0:	f7ff ff5c 	bl	800936c <__b2d>
 80094b4:	a901      	add	r1, sp, #4
 80094b6:	4640      	mov	r0, r8
 80094b8:	ec57 6b10 	vmov	r6, r7, d0
 80094bc:	f7ff ff56 	bl	800936c <__b2d>
 80094c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80094c4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80094c8:	eba3 0c02 	sub.w	ip, r3, r2
 80094cc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80094d0:	1a9b      	subs	r3, r3, r2
 80094d2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80094d6:	ec5b ab10 	vmov	sl, fp, d0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	bfce      	itee	gt
 80094de:	463a      	movgt	r2, r7
 80094e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80094e4:	465a      	movle	r2, fp
 80094e6:	4659      	mov	r1, fp
 80094e8:	463d      	mov	r5, r7
 80094ea:	bfd4      	ite	le
 80094ec:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80094f0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80094f4:	4630      	mov	r0, r6
 80094f6:	ee10 2a10 	vmov	r2, s0
 80094fa:	460b      	mov	r3, r1
 80094fc:	4629      	mov	r1, r5
 80094fe:	f7f7 f9a5 	bl	800084c <__aeabi_ddiv>
 8009502:	ec41 0b10 	vmov	d0, r0, r1
 8009506:	b003      	add	sp, #12
 8009508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800950c <__copybits>:
 800950c:	3901      	subs	r1, #1
 800950e:	b510      	push	{r4, lr}
 8009510:	1149      	asrs	r1, r1, #5
 8009512:	6914      	ldr	r4, [r2, #16]
 8009514:	3101      	adds	r1, #1
 8009516:	f102 0314 	add.w	r3, r2, #20
 800951a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800951e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009522:	42a3      	cmp	r3, r4
 8009524:	4602      	mov	r2, r0
 8009526:	d303      	bcc.n	8009530 <__copybits+0x24>
 8009528:	2300      	movs	r3, #0
 800952a:	428a      	cmp	r2, r1
 800952c:	d305      	bcc.n	800953a <__copybits+0x2e>
 800952e:	bd10      	pop	{r4, pc}
 8009530:	f853 2b04 	ldr.w	r2, [r3], #4
 8009534:	f840 2b04 	str.w	r2, [r0], #4
 8009538:	e7f3      	b.n	8009522 <__copybits+0x16>
 800953a:	f842 3b04 	str.w	r3, [r2], #4
 800953e:	e7f4      	b.n	800952a <__copybits+0x1e>

08009540 <__any_on>:
 8009540:	f100 0214 	add.w	r2, r0, #20
 8009544:	6900      	ldr	r0, [r0, #16]
 8009546:	114b      	asrs	r3, r1, #5
 8009548:	4298      	cmp	r0, r3
 800954a:	b510      	push	{r4, lr}
 800954c:	db11      	blt.n	8009572 <__any_on+0x32>
 800954e:	dd0a      	ble.n	8009566 <__any_on+0x26>
 8009550:	f011 011f 	ands.w	r1, r1, #31
 8009554:	d007      	beq.n	8009566 <__any_on+0x26>
 8009556:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800955a:	fa24 f001 	lsr.w	r0, r4, r1
 800955e:	fa00 f101 	lsl.w	r1, r0, r1
 8009562:	428c      	cmp	r4, r1
 8009564:	d10b      	bne.n	800957e <__any_on+0x3e>
 8009566:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800956a:	4293      	cmp	r3, r2
 800956c:	d803      	bhi.n	8009576 <__any_on+0x36>
 800956e:	2000      	movs	r0, #0
 8009570:	bd10      	pop	{r4, pc}
 8009572:	4603      	mov	r3, r0
 8009574:	e7f7      	b.n	8009566 <__any_on+0x26>
 8009576:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800957a:	2900      	cmp	r1, #0
 800957c:	d0f5      	beq.n	800956a <__any_on+0x2a>
 800957e:	2001      	movs	r0, #1
 8009580:	e7f6      	b.n	8009570 <__any_on+0x30>

08009582 <_calloc_r>:
 8009582:	b538      	push	{r3, r4, r5, lr}
 8009584:	fb02 f401 	mul.w	r4, r2, r1
 8009588:	4621      	mov	r1, r4
 800958a:	f000 f857 	bl	800963c <_malloc_r>
 800958e:	4605      	mov	r5, r0
 8009590:	b118      	cbz	r0, 800959a <_calloc_r+0x18>
 8009592:	4622      	mov	r2, r4
 8009594:	2100      	movs	r1, #0
 8009596:	f7fc fa26 	bl	80059e6 <memset>
 800959a:	4628      	mov	r0, r5
 800959c:	bd38      	pop	{r3, r4, r5, pc}
	...

080095a0 <_free_r>:
 80095a0:	b538      	push	{r3, r4, r5, lr}
 80095a2:	4605      	mov	r5, r0
 80095a4:	2900      	cmp	r1, #0
 80095a6:	d045      	beq.n	8009634 <_free_r+0x94>
 80095a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095ac:	1f0c      	subs	r4, r1, #4
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	bfb8      	it	lt
 80095b2:	18e4      	addlt	r4, r4, r3
 80095b4:	f000 fc0f 	bl	8009dd6 <__malloc_lock>
 80095b8:	4a1f      	ldr	r2, [pc, #124]	; (8009638 <_free_r+0x98>)
 80095ba:	6813      	ldr	r3, [r2, #0]
 80095bc:	4610      	mov	r0, r2
 80095be:	b933      	cbnz	r3, 80095ce <_free_r+0x2e>
 80095c0:	6063      	str	r3, [r4, #4]
 80095c2:	6014      	str	r4, [r2, #0]
 80095c4:	4628      	mov	r0, r5
 80095c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095ca:	f000 bc05 	b.w	8009dd8 <__malloc_unlock>
 80095ce:	42a3      	cmp	r3, r4
 80095d0:	d90c      	bls.n	80095ec <_free_r+0x4c>
 80095d2:	6821      	ldr	r1, [r4, #0]
 80095d4:	1862      	adds	r2, r4, r1
 80095d6:	4293      	cmp	r3, r2
 80095d8:	bf04      	itt	eq
 80095da:	681a      	ldreq	r2, [r3, #0]
 80095dc:	685b      	ldreq	r3, [r3, #4]
 80095de:	6063      	str	r3, [r4, #4]
 80095e0:	bf04      	itt	eq
 80095e2:	1852      	addeq	r2, r2, r1
 80095e4:	6022      	streq	r2, [r4, #0]
 80095e6:	6004      	str	r4, [r0, #0]
 80095e8:	e7ec      	b.n	80095c4 <_free_r+0x24>
 80095ea:	4613      	mov	r3, r2
 80095ec:	685a      	ldr	r2, [r3, #4]
 80095ee:	b10a      	cbz	r2, 80095f4 <_free_r+0x54>
 80095f0:	42a2      	cmp	r2, r4
 80095f2:	d9fa      	bls.n	80095ea <_free_r+0x4a>
 80095f4:	6819      	ldr	r1, [r3, #0]
 80095f6:	1858      	adds	r0, r3, r1
 80095f8:	42a0      	cmp	r0, r4
 80095fa:	d10b      	bne.n	8009614 <_free_r+0x74>
 80095fc:	6820      	ldr	r0, [r4, #0]
 80095fe:	4401      	add	r1, r0
 8009600:	1858      	adds	r0, r3, r1
 8009602:	4282      	cmp	r2, r0
 8009604:	6019      	str	r1, [r3, #0]
 8009606:	d1dd      	bne.n	80095c4 <_free_r+0x24>
 8009608:	6810      	ldr	r0, [r2, #0]
 800960a:	6852      	ldr	r2, [r2, #4]
 800960c:	605a      	str	r2, [r3, #4]
 800960e:	4401      	add	r1, r0
 8009610:	6019      	str	r1, [r3, #0]
 8009612:	e7d7      	b.n	80095c4 <_free_r+0x24>
 8009614:	d902      	bls.n	800961c <_free_r+0x7c>
 8009616:	230c      	movs	r3, #12
 8009618:	602b      	str	r3, [r5, #0]
 800961a:	e7d3      	b.n	80095c4 <_free_r+0x24>
 800961c:	6820      	ldr	r0, [r4, #0]
 800961e:	1821      	adds	r1, r4, r0
 8009620:	428a      	cmp	r2, r1
 8009622:	bf04      	itt	eq
 8009624:	6811      	ldreq	r1, [r2, #0]
 8009626:	6852      	ldreq	r2, [r2, #4]
 8009628:	6062      	str	r2, [r4, #4]
 800962a:	bf04      	itt	eq
 800962c:	1809      	addeq	r1, r1, r0
 800962e:	6021      	streq	r1, [r4, #0]
 8009630:	605c      	str	r4, [r3, #4]
 8009632:	e7c7      	b.n	80095c4 <_free_r+0x24>
 8009634:	bd38      	pop	{r3, r4, r5, pc}
 8009636:	bf00      	nop
 8009638:	20000208 	.word	0x20000208

0800963c <_malloc_r>:
 800963c:	b570      	push	{r4, r5, r6, lr}
 800963e:	1ccd      	adds	r5, r1, #3
 8009640:	f025 0503 	bic.w	r5, r5, #3
 8009644:	3508      	adds	r5, #8
 8009646:	2d0c      	cmp	r5, #12
 8009648:	bf38      	it	cc
 800964a:	250c      	movcc	r5, #12
 800964c:	2d00      	cmp	r5, #0
 800964e:	4606      	mov	r6, r0
 8009650:	db01      	blt.n	8009656 <_malloc_r+0x1a>
 8009652:	42a9      	cmp	r1, r5
 8009654:	d903      	bls.n	800965e <_malloc_r+0x22>
 8009656:	230c      	movs	r3, #12
 8009658:	6033      	str	r3, [r6, #0]
 800965a:	2000      	movs	r0, #0
 800965c:	bd70      	pop	{r4, r5, r6, pc}
 800965e:	f000 fbba 	bl	8009dd6 <__malloc_lock>
 8009662:	4a21      	ldr	r2, [pc, #132]	; (80096e8 <_malloc_r+0xac>)
 8009664:	6814      	ldr	r4, [r2, #0]
 8009666:	4621      	mov	r1, r4
 8009668:	b991      	cbnz	r1, 8009690 <_malloc_r+0x54>
 800966a:	4c20      	ldr	r4, [pc, #128]	; (80096ec <_malloc_r+0xb0>)
 800966c:	6823      	ldr	r3, [r4, #0]
 800966e:	b91b      	cbnz	r3, 8009678 <_malloc_r+0x3c>
 8009670:	4630      	mov	r0, r6
 8009672:	f000 facf 	bl	8009c14 <_sbrk_r>
 8009676:	6020      	str	r0, [r4, #0]
 8009678:	4629      	mov	r1, r5
 800967a:	4630      	mov	r0, r6
 800967c:	f000 faca 	bl	8009c14 <_sbrk_r>
 8009680:	1c43      	adds	r3, r0, #1
 8009682:	d124      	bne.n	80096ce <_malloc_r+0x92>
 8009684:	230c      	movs	r3, #12
 8009686:	6033      	str	r3, [r6, #0]
 8009688:	4630      	mov	r0, r6
 800968a:	f000 fba5 	bl	8009dd8 <__malloc_unlock>
 800968e:	e7e4      	b.n	800965a <_malloc_r+0x1e>
 8009690:	680b      	ldr	r3, [r1, #0]
 8009692:	1b5b      	subs	r3, r3, r5
 8009694:	d418      	bmi.n	80096c8 <_malloc_r+0x8c>
 8009696:	2b0b      	cmp	r3, #11
 8009698:	d90f      	bls.n	80096ba <_malloc_r+0x7e>
 800969a:	600b      	str	r3, [r1, #0]
 800969c:	50cd      	str	r5, [r1, r3]
 800969e:	18cc      	adds	r4, r1, r3
 80096a0:	4630      	mov	r0, r6
 80096a2:	f000 fb99 	bl	8009dd8 <__malloc_unlock>
 80096a6:	f104 000b 	add.w	r0, r4, #11
 80096aa:	1d23      	adds	r3, r4, #4
 80096ac:	f020 0007 	bic.w	r0, r0, #7
 80096b0:	1ac3      	subs	r3, r0, r3
 80096b2:	d0d3      	beq.n	800965c <_malloc_r+0x20>
 80096b4:	425a      	negs	r2, r3
 80096b6:	50e2      	str	r2, [r4, r3]
 80096b8:	e7d0      	b.n	800965c <_malloc_r+0x20>
 80096ba:	428c      	cmp	r4, r1
 80096bc:	684b      	ldr	r3, [r1, #4]
 80096be:	bf16      	itet	ne
 80096c0:	6063      	strne	r3, [r4, #4]
 80096c2:	6013      	streq	r3, [r2, #0]
 80096c4:	460c      	movne	r4, r1
 80096c6:	e7eb      	b.n	80096a0 <_malloc_r+0x64>
 80096c8:	460c      	mov	r4, r1
 80096ca:	6849      	ldr	r1, [r1, #4]
 80096cc:	e7cc      	b.n	8009668 <_malloc_r+0x2c>
 80096ce:	1cc4      	adds	r4, r0, #3
 80096d0:	f024 0403 	bic.w	r4, r4, #3
 80096d4:	42a0      	cmp	r0, r4
 80096d6:	d005      	beq.n	80096e4 <_malloc_r+0xa8>
 80096d8:	1a21      	subs	r1, r4, r0
 80096da:	4630      	mov	r0, r6
 80096dc:	f000 fa9a 	bl	8009c14 <_sbrk_r>
 80096e0:	3001      	adds	r0, #1
 80096e2:	d0cf      	beq.n	8009684 <_malloc_r+0x48>
 80096e4:	6025      	str	r5, [r4, #0]
 80096e6:	e7db      	b.n	80096a0 <_malloc_r+0x64>
 80096e8:	20000208 	.word	0x20000208
 80096ec:	2000020c 	.word	0x2000020c

080096f0 <__ssputs_r>:
 80096f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096f4:	688e      	ldr	r6, [r1, #8]
 80096f6:	429e      	cmp	r6, r3
 80096f8:	4682      	mov	sl, r0
 80096fa:	460c      	mov	r4, r1
 80096fc:	4690      	mov	r8, r2
 80096fe:	4699      	mov	r9, r3
 8009700:	d837      	bhi.n	8009772 <__ssputs_r+0x82>
 8009702:	898a      	ldrh	r2, [r1, #12]
 8009704:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009708:	d031      	beq.n	800976e <__ssputs_r+0x7e>
 800970a:	6825      	ldr	r5, [r4, #0]
 800970c:	6909      	ldr	r1, [r1, #16]
 800970e:	1a6f      	subs	r7, r5, r1
 8009710:	6965      	ldr	r5, [r4, #20]
 8009712:	2302      	movs	r3, #2
 8009714:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009718:	fb95 f5f3 	sdiv	r5, r5, r3
 800971c:	f109 0301 	add.w	r3, r9, #1
 8009720:	443b      	add	r3, r7
 8009722:	429d      	cmp	r5, r3
 8009724:	bf38      	it	cc
 8009726:	461d      	movcc	r5, r3
 8009728:	0553      	lsls	r3, r2, #21
 800972a:	d530      	bpl.n	800978e <__ssputs_r+0x9e>
 800972c:	4629      	mov	r1, r5
 800972e:	f7ff ff85 	bl	800963c <_malloc_r>
 8009732:	4606      	mov	r6, r0
 8009734:	b950      	cbnz	r0, 800974c <__ssputs_r+0x5c>
 8009736:	230c      	movs	r3, #12
 8009738:	f8ca 3000 	str.w	r3, [sl]
 800973c:	89a3      	ldrh	r3, [r4, #12]
 800973e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009742:	81a3      	strh	r3, [r4, #12]
 8009744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800974c:	463a      	mov	r2, r7
 800974e:	6921      	ldr	r1, [r4, #16]
 8009750:	f7fc f93e 	bl	80059d0 <memcpy>
 8009754:	89a3      	ldrh	r3, [r4, #12]
 8009756:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800975a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800975e:	81a3      	strh	r3, [r4, #12]
 8009760:	6126      	str	r6, [r4, #16]
 8009762:	6165      	str	r5, [r4, #20]
 8009764:	443e      	add	r6, r7
 8009766:	1bed      	subs	r5, r5, r7
 8009768:	6026      	str	r6, [r4, #0]
 800976a:	60a5      	str	r5, [r4, #8]
 800976c:	464e      	mov	r6, r9
 800976e:	454e      	cmp	r6, r9
 8009770:	d900      	bls.n	8009774 <__ssputs_r+0x84>
 8009772:	464e      	mov	r6, r9
 8009774:	4632      	mov	r2, r6
 8009776:	4641      	mov	r1, r8
 8009778:	6820      	ldr	r0, [r4, #0]
 800977a:	f000 fb13 	bl	8009da4 <memmove>
 800977e:	68a3      	ldr	r3, [r4, #8]
 8009780:	1b9b      	subs	r3, r3, r6
 8009782:	60a3      	str	r3, [r4, #8]
 8009784:	6823      	ldr	r3, [r4, #0]
 8009786:	441e      	add	r6, r3
 8009788:	6026      	str	r6, [r4, #0]
 800978a:	2000      	movs	r0, #0
 800978c:	e7dc      	b.n	8009748 <__ssputs_r+0x58>
 800978e:	462a      	mov	r2, r5
 8009790:	f000 fb23 	bl	8009dda <_realloc_r>
 8009794:	4606      	mov	r6, r0
 8009796:	2800      	cmp	r0, #0
 8009798:	d1e2      	bne.n	8009760 <__ssputs_r+0x70>
 800979a:	6921      	ldr	r1, [r4, #16]
 800979c:	4650      	mov	r0, sl
 800979e:	f7ff feff 	bl	80095a0 <_free_r>
 80097a2:	e7c8      	b.n	8009736 <__ssputs_r+0x46>

080097a4 <_svfiprintf_r>:
 80097a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a8:	461d      	mov	r5, r3
 80097aa:	898b      	ldrh	r3, [r1, #12]
 80097ac:	061f      	lsls	r7, r3, #24
 80097ae:	b09d      	sub	sp, #116	; 0x74
 80097b0:	4680      	mov	r8, r0
 80097b2:	460c      	mov	r4, r1
 80097b4:	4616      	mov	r6, r2
 80097b6:	d50f      	bpl.n	80097d8 <_svfiprintf_r+0x34>
 80097b8:	690b      	ldr	r3, [r1, #16]
 80097ba:	b96b      	cbnz	r3, 80097d8 <_svfiprintf_r+0x34>
 80097bc:	2140      	movs	r1, #64	; 0x40
 80097be:	f7ff ff3d 	bl	800963c <_malloc_r>
 80097c2:	6020      	str	r0, [r4, #0]
 80097c4:	6120      	str	r0, [r4, #16]
 80097c6:	b928      	cbnz	r0, 80097d4 <_svfiprintf_r+0x30>
 80097c8:	230c      	movs	r3, #12
 80097ca:	f8c8 3000 	str.w	r3, [r8]
 80097ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097d2:	e0c8      	b.n	8009966 <_svfiprintf_r+0x1c2>
 80097d4:	2340      	movs	r3, #64	; 0x40
 80097d6:	6163      	str	r3, [r4, #20]
 80097d8:	2300      	movs	r3, #0
 80097da:	9309      	str	r3, [sp, #36]	; 0x24
 80097dc:	2320      	movs	r3, #32
 80097de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097e2:	2330      	movs	r3, #48	; 0x30
 80097e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097e8:	9503      	str	r5, [sp, #12]
 80097ea:	f04f 0b01 	mov.w	fp, #1
 80097ee:	4637      	mov	r7, r6
 80097f0:	463d      	mov	r5, r7
 80097f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80097f6:	b10b      	cbz	r3, 80097fc <_svfiprintf_r+0x58>
 80097f8:	2b25      	cmp	r3, #37	; 0x25
 80097fa:	d13e      	bne.n	800987a <_svfiprintf_r+0xd6>
 80097fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8009800:	d00b      	beq.n	800981a <_svfiprintf_r+0x76>
 8009802:	4653      	mov	r3, sl
 8009804:	4632      	mov	r2, r6
 8009806:	4621      	mov	r1, r4
 8009808:	4640      	mov	r0, r8
 800980a:	f7ff ff71 	bl	80096f0 <__ssputs_r>
 800980e:	3001      	adds	r0, #1
 8009810:	f000 80a4 	beq.w	800995c <_svfiprintf_r+0x1b8>
 8009814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009816:	4453      	add	r3, sl
 8009818:	9309      	str	r3, [sp, #36]	; 0x24
 800981a:	783b      	ldrb	r3, [r7, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	f000 809d 	beq.w	800995c <_svfiprintf_r+0x1b8>
 8009822:	2300      	movs	r3, #0
 8009824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009828:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800982c:	9304      	str	r3, [sp, #16]
 800982e:	9307      	str	r3, [sp, #28]
 8009830:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009834:	931a      	str	r3, [sp, #104]	; 0x68
 8009836:	462f      	mov	r7, r5
 8009838:	2205      	movs	r2, #5
 800983a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800983e:	4850      	ldr	r0, [pc, #320]	; (8009980 <_svfiprintf_r+0x1dc>)
 8009840:	f7f6 fcce 	bl	80001e0 <memchr>
 8009844:	9b04      	ldr	r3, [sp, #16]
 8009846:	b9d0      	cbnz	r0, 800987e <_svfiprintf_r+0xda>
 8009848:	06d9      	lsls	r1, r3, #27
 800984a:	bf44      	itt	mi
 800984c:	2220      	movmi	r2, #32
 800984e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009852:	071a      	lsls	r2, r3, #28
 8009854:	bf44      	itt	mi
 8009856:	222b      	movmi	r2, #43	; 0x2b
 8009858:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800985c:	782a      	ldrb	r2, [r5, #0]
 800985e:	2a2a      	cmp	r2, #42	; 0x2a
 8009860:	d015      	beq.n	800988e <_svfiprintf_r+0xea>
 8009862:	9a07      	ldr	r2, [sp, #28]
 8009864:	462f      	mov	r7, r5
 8009866:	2000      	movs	r0, #0
 8009868:	250a      	movs	r5, #10
 800986a:	4639      	mov	r1, r7
 800986c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009870:	3b30      	subs	r3, #48	; 0x30
 8009872:	2b09      	cmp	r3, #9
 8009874:	d94d      	bls.n	8009912 <_svfiprintf_r+0x16e>
 8009876:	b1b8      	cbz	r0, 80098a8 <_svfiprintf_r+0x104>
 8009878:	e00f      	b.n	800989a <_svfiprintf_r+0xf6>
 800987a:	462f      	mov	r7, r5
 800987c:	e7b8      	b.n	80097f0 <_svfiprintf_r+0x4c>
 800987e:	4a40      	ldr	r2, [pc, #256]	; (8009980 <_svfiprintf_r+0x1dc>)
 8009880:	1a80      	subs	r0, r0, r2
 8009882:	fa0b f000 	lsl.w	r0, fp, r0
 8009886:	4318      	orrs	r0, r3
 8009888:	9004      	str	r0, [sp, #16]
 800988a:	463d      	mov	r5, r7
 800988c:	e7d3      	b.n	8009836 <_svfiprintf_r+0x92>
 800988e:	9a03      	ldr	r2, [sp, #12]
 8009890:	1d11      	adds	r1, r2, #4
 8009892:	6812      	ldr	r2, [r2, #0]
 8009894:	9103      	str	r1, [sp, #12]
 8009896:	2a00      	cmp	r2, #0
 8009898:	db01      	blt.n	800989e <_svfiprintf_r+0xfa>
 800989a:	9207      	str	r2, [sp, #28]
 800989c:	e004      	b.n	80098a8 <_svfiprintf_r+0x104>
 800989e:	4252      	negs	r2, r2
 80098a0:	f043 0302 	orr.w	r3, r3, #2
 80098a4:	9207      	str	r2, [sp, #28]
 80098a6:	9304      	str	r3, [sp, #16]
 80098a8:	783b      	ldrb	r3, [r7, #0]
 80098aa:	2b2e      	cmp	r3, #46	; 0x2e
 80098ac:	d10c      	bne.n	80098c8 <_svfiprintf_r+0x124>
 80098ae:	787b      	ldrb	r3, [r7, #1]
 80098b0:	2b2a      	cmp	r3, #42	; 0x2a
 80098b2:	d133      	bne.n	800991c <_svfiprintf_r+0x178>
 80098b4:	9b03      	ldr	r3, [sp, #12]
 80098b6:	1d1a      	adds	r2, r3, #4
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	9203      	str	r2, [sp, #12]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	bfb8      	it	lt
 80098c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80098c4:	3702      	adds	r7, #2
 80098c6:	9305      	str	r3, [sp, #20]
 80098c8:	4d2e      	ldr	r5, [pc, #184]	; (8009984 <_svfiprintf_r+0x1e0>)
 80098ca:	7839      	ldrb	r1, [r7, #0]
 80098cc:	2203      	movs	r2, #3
 80098ce:	4628      	mov	r0, r5
 80098d0:	f7f6 fc86 	bl	80001e0 <memchr>
 80098d4:	b138      	cbz	r0, 80098e6 <_svfiprintf_r+0x142>
 80098d6:	2340      	movs	r3, #64	; 0x40
 80098d8:	1b40      	subs	r0, r0, r5
 80098da:	fa03 f000 	lsl.w	r0, r3, r0
 80098de:	9b04      	ldr	r3, [sp, #16]
 80098e0:	4303      	orrs	r3, r0
 80098e2:	3701      	adds	r7, #1
 80098e4:	9304      	str	r3, [sp, #16]
 80098e6:	7839      	ldrb	r1, [r7, #0]
 80098e8:	4827      	ldr	r0, [pc, #156]	; (8009988 <_svfiprintf_r+0x1e4>)
 80098ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098ee:	2206      	movs	r2, #6
 80098f0:	1c7e      	adds	r6, r7, #1
 80098f2:	f7f6 fc75 	bl	80001e0 <memchr>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	d038      	beq.n	800996c <_svfiprintf_r+0x1c8>
 80098fa:	4b24      	ldr	r3, [pc, #144]	; (800998c <_svfiprintf_r+0x1e8>)
 80098fc:	bb13      	cbnz	r3, 8009944 <_svfiprintf_r+0x1a0>
 80098fe:	9b03      	ldr	r3, [sp, #12]
 8009900:	3307      	adds	r3, #7
 8009902:	f023 0307 	bic.w	r3, r3, #7
 8009906:	3308      	adds	r3, #8
 8009908:	9303      	str	r3, [sp, #12]
 800990a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800990c:	444b      	add	r3, r9
 800990e:	9309      	str	r3, [sp, #36]	; 0x24
 8009910:	e76d      	b.n	80097ee <_svfiprintf_r+0x4a>
 8009912:	fb05 3202 	mla	r2, r5, r2, r3
 8009916:	2001      	movs	r0, #1
 8009918:	460f      	mov	r7, r1
 800991a:	e7a6      	b.n	800986a <_svfiprintf_r+0xc6>
 800991c:	2300      	movs	r3, #0
 800991e:	3701      	adds	r7, #1
 8009920:	9305      	str	r3, [sp, #20]
 8009922:	4619      	mov	r1, r3
 8009924:	250a      	movs	r5, #10
 8009926:	4638      	mov	r0, r7
 8009928:	f810 2b01 	ldrb.w	r2, [r0], #1
 800992c:	3a30      	subs	r2, #48	; 0x30
 800992e:	2a09      	cmp	r2, #9
 8009930:	d903      	bls.n	800993a <_svfiprintf_r+0x196>
 8009932:	2b00      	cmp	r3, #0
 8009934:	d0c8      	beq.n	80098c8 <_svfiprintf_r+0x124>
 8009936:	9105      	str	r1, [sp, #20]
 8009938:	e7c6      	b.n	80098c8 <_svfiprintf_r+0x124>
 800993a:	fb05 2101 	mla	r1, r5, r1, r2
 800993e:	2301      	movs	r3, #1
 8009940:	4607      	mov	r7, r0
 8009942:	e7f0      	b.n	8009926 <_svfiprintf_r+0x182>
 8009944:	ab03      	add	r3, sp, #12
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	4622      	mov	r2, r4
 800994a:	4b11      	ldr	r3, [pc, #68]	; (8009990 <_svfiprintf_r+0x1ec>)
 800994c:	a904      	add	r1, sp, #16
 800994e:	4640      	mov	r0, r8
 8009950:	f7fc f8e6 	bl	8005b20 <_printf_float>
 8009954:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009958:	4681      	mov	r9, r0
 800995a:	d1d6      	bne.n	800990a <_svfiprintf_r+0x166>
 800995c:	89a3      	ldrh	r3, [r4, #12]
 800995e:	065b      	lsls	r3, r3, #25
 8009960:	f53f af35 	bmi.w	80097ce <_svfiprintf_r+0x2a>
 8009964:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009966:	b01d      	add	sp, #116	; 0x74
 8009968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800996c:	ab03      	add	r3, sp, #12
 800996e:	9300      	str	r3, [sp, #0]
 8009970:	4622      	mov	r2, r4
 8009972:	4b07      	ldr	r3, [pc, #28]	; (8009990 <_svfiprintf_r+0x1ec>)
 8009974:	a904      	add	r1, sp, #16
 8009976:	4640      	mov	r0, r8
 8009978:	f7fc fb88 	bl	800608c <_printf_i>
 800997c:	e7ea      	b.n	8009954 <_svfiprintf_r+0x1b0>
 800997e:	bf00      	nop
 8009980:	0800a104 	.word	0x0800a104
 8009984:	0800a10a 	.word	0x0800a10a
 8009988:	0800a10e 	.word	0x0800a10e
 800998c:	08005b21 	.word	0x08005b21
 8009990:	080096f1 	.word	0x080096f1

08009994 <__sfputc_r>:
 8009994:	6893      	ldr	r3, [r2, #8]
 8009996:	3b01      	subs	r3, #1
 8009998:	2b00      	cmp	r3, #0
 800999a:	b410      	push	{r4}
 800999c:	6093      	str	r3, [r2, #8]
 800999e:	da08      	bge.n	80099b2 <__sfputc_r+0x1e>
 80099a0:	6994      	ldr	r4, [r2, #24]
 80099a2:	42a3      	cmp	r3, r4
 80099a4:	db01      	blt.n	80099aa <__sfputc_r+0x16>
 80099a6:	290a      	cmp	r1, #10
 80099a8:	d103      	bne.n	80099b2 <__sfputc_r+0x1e>
 80099aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099ae:	f7fd bdb1 	b.w	8007514 <__swbuf_r>
 80099b2:	6813      	ldr	r3, [r2, #0]
 80099b4:	1c58      	adds	r0, r3, #1
 80099b6:	6010      	str	r0, [r2, #0]
 80099b8:	7019      	strb	r1, [r3, #0]
 80099ba:	4608      	mov	r0, r1
 80099bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099c0:	4770      	bx	lr

080099c2 <__sfputs_r>:
 80099c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099c4:	4606      	mov	r6, r0
 80099c6:	460f      	mov	r7, r1
 80099c8:	4614      	mov	r4, r2
 80099ca:	18d5      	adds	r5, r2, r3
 80099cc:	42ac      	cmp	r4, r5
 80099ce:	d101      	bne.n	80099d4 <__sfputs_r+0x12>
 80099d0:	2000      	movs	r0, #0
 80099d2:	e007      	b.n	80099e4 <__sfputs_r+0x22>
 80099d4:	463a      	mov	r2, r7
 80099d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099da:	4630      	mov	r0, r6
 80099dc:	f7ff ffda 	bl	8009994 <__sfputc_r>
 80099e0:	1c43      	adds	r3, r0, #1
 80099e2:	d1f3      	bne.n	80099cc <__sfputs_r+0xa>
 80099e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080099e8 <_vfiprintf_r>:
 80099e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ec:	460c      	mov	r4, r1
 80099ee:	b09d      	sub	sp, #116	; 0x74
 80099f0:	4617      	mov	r7, r2
 80099f2:	461d      	mov	r5, r3
 80099f4:	4606      	mov	r6, r0
 80099f6:	b118      	cbz	r0, 8009a00 <_vfiprintf_r+0x18>
 80099f8:	6983      	ldr	r3, [r0, #24]
 80099fa:	b90b      	cbnz	r3, 8009a00 <_vfiprintf_r+0x18>
 80099fc:	f7fe fd80 	bl	8008500 <__sinit>
 8009a00:	4b7c      	ldr	r3, [pc, #496]	; (8009bf4 <_vfiprintf_r+0x20c>)
 8009a02:	429c      	cmp	r4, r3
 8009a04:	d158      	bne.n	8009ab8 <_vfiprintf_r+0xd0>
 8009a06:	6874      	ldr	r4, [r6, #4]
 8009a08:	89a3      	ldrh	r3, [r4, #12]
 8009a0a:	0718      	lsls	r0, r3, #28
 8009a0c:	d55e      	bpl.n	8009acc <_vfiprintf_r+0xe4>
 8009a0e:	6923      	ldr	r3, [r4, #16]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d05b      	beq.n	8009acc <_vfiprintf_r+0xe4>
 8009a14:	2300      	movs	r3, #0
 8009a16:	9309      	str	r3, [sp, #36]	; 0x24
 8009a18:	2320      	movs	r3, #32
 8009a1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a1e:	2330      	movs	r3, #48	; 0x30
 8009a20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a24:	9503      	str	r5, [sp, #12]
 8009a26:	f04f 0b01 	mov.w	fp, #1
 8009a2a:	46b8      	mov	r8, r7
 8009a2c:	4645      	mov	r5, r8
 8009a2e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009a32:	b10b      	cbz	r3, 8009a38 <_vfiprintf_r+0x50>
 8009a34:	2b25      	cmp	r3, #37	; 0x25
 8009a36:	d154      	bne.n	8009ae2 <_vfiprintf_r+0xfa>
 8009a38:	ebb8 0a07 	subs.w	sl, r8, r7
 8009a3c:	d00b      	beq.n	8009a56 <_vfiprintf_r+0x6e>
 8009a3e:	4653      	mov	r3, sl
 8009a40:	463a      	mov	r2, r7
 8009a42:	4621      	mov	r1, r4
 8009a44:	4630      	mov	r0, r6
 8009a46:	f7ff ffbc 	bl	80099c2 <__sfputs_r>
 8009a4a:	3001      	adds	r0, #1
 8009a4c:	f000 80c2 	beq.w	8009bd4 <_vfiprintf_r+0x1ec>
 8009a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a52:	4453      	add	r3, sl
 8009a54:	9309      	str	r3, [sp, #36]	; 0x24
 8009a56:	f898 3000 	ldrb.w	r3, [r8]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f000 80ba 	beq.w	8009bd4 <_vfiprintf_r+0x1ec>
 8009a60:	2300      	movs	r3, #0
 8009a62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a6a:	9304      	str	r3, [sp, #16]
 8009a6c:	9307      	str	r3, [sp, #28]
 8009a6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a72:	931a      	str	r3, [sp, #104]	; 0x68
 8009a74:	46a8      	mov	r8, r5
 8009a76:	2205      	movs	r2, #5
 8009a78:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009a7c:	485e      	ldr	r0, [pc, #376]	; (8009bf8 <_vfiprintf_r+0x210>)
 8009a7e:	f7f6 fbaf 	bl	80001e0 <memchr>
 8009a82:	9b04      	ldr	r3, [sp, #16]
 8009a84:	bb78      	cbnz	r0, 8009ae6 <_vfiprintf_r+0xfe>
 8009a86:	06d9      	lsls	r1, r3, #27
 8009a88:	bf44      	itt	mi
 8009a8a:	2220      	movmi	r2, #32
 8009a8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009a90:	071a      	lsls	r2, r3, #28
 8009a92:	bf44      	itt	mi
 8009a94:	222b      	movmi	r2, #43	; 0x2b
 8009a96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009a9a:	782a      	ldrb	r2, [r5, #0]
 8009a9c:	2a2a      	cmp	r2, #42	; 0x2a
 8009a9e:	d02a      	beq.n	8009af6 <_vfiprintf_r+0x10e>
 8009aa0:	9a07      	ldr	r2, [sp, #28]
 8009aa2:	46a8      	mov	r8, r5
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	250a      	movs	r5, #10
 8009aa8:	4641      	mov	r1, r8
 8009aaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009aae:	3b30      	subs	r3, #48	; 0x30
 8009ab0:	2b09      	cmp	r3, #9
 8009ab2:	d969      	bls.n	8009b88 <_vfiprintf_r+0x1a0>
 8009ab4:	b360      	cbz	r0, 8009b10 <_vfiprintf_r+0x128>
 8009ab6:	e024      	b.n	8009b02 <_vfiprintf_r+0x11a>
 8009ab8:	4b50      	ldr	r3, [pc, #320]	; (8009bfc <_vfiprintf_r+0x214>)
 8009aba:	429c      	cmp	r4, r3
 8009abc:	d101      	bne.n	8009ac2 <_vfiprintf_r+0xda>
 8009abe:	68b4      	ldr	r4, [r6, #8]
 8009ac0:	e7a2      	b.n	8009a08 <_vfiprintf_r+0x20>
 8009ac2:	4b4f      	ldr	r3, [pc, #316]	; (8009c00 <_vfiprintf_r+0x218>)
 8009ac4:	429c      	cmp	r4, r3
 8009ac6:	bf08      	it	eq
 8009ac8:	68f4      	ldreq	r4, [r6, #12]
 8009aca:	e79d      	b.n	8009a08 <_vfiprintf_r+0x20>
 8009acc:	4621      	mov	r1, r4
 8009ace:	4630      	mov	r0, r6
 8009ad0:	f7fd fd72 	bl	80075b8 <__swsetup_r>
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	d09d      	beq.n	8009a14 <_vfiprintf_r+0x2c>
 8009ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009adc:	b01d      	add	sp, #116	; 0x74
 8009ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae2:	46a8      	mov	r8, r5
 8009ae4:	e7a2      	b.n	8009a2c <_vfiprintf_r+0x44>
 8009ae6:	4a44      	ldr	r2, [pc, #272]	; (8009bf8 <_vfiprintf_r+0x210>)
 8009ae8:	1a80      	subs	r0, r0, r2
 8009aea:	fa0b f000 	lsl.w	r0, fp, r0
 8009aee:	4318      	orrs	r0, r3
 8009af0:	9004      	str	r0, [sp, #16]
 8009af2:	4645      	mov	r5, r8
 8009af4:	e7be      	b.n	8009a74 <_vfiprintf_r+0x8c>
 8009af6:	9a03      	ldr	r2, [sp, #12]
 8009af8:	1d11      	adds	r1, r2, #4
 8009afa:	6812      	ldr	r2, [r2, #0]
 8009afc:	9103      	str	r1, [sp, #12]
 8009afe:	2a00      	cmp	r2, #0
 8009b00:	db01      	blt.n	8009b06 <_vfiprintf_r+0x11e>
 8009b02:	9207      	str	r2, [sp, #28]
 8009b04:	e004      	b.n	8009b10 <_vfiprintf_r+0x128>
 8009b06:	4252      	negs	r2, r2
 8009b08:	f043 0302 	orr.w	r3, r3, #2
 8009b0c:	9207      	str	r2, [sp, #28]
 8009b0e:	9304      	str	r3, [sp, #16]
 8009b10:	f898 3000 	ldrb.w	r3, [r8]
 8009b14:	2b2e      	cmp	r3, #46	; 0x2e
 8009b16:	d10e      	bne.n	8009b36 <_vfiprintf_r+0x14e>
 8009b18:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009b1c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b1e:	d138      	bne.n	8009b92 <_vfiprintf_r+0x1aa>
 8009b20:	9b03      	ldr	r3, [sp, #12]
 8009b22:	1d1a      	adds	r2, r3, #4
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	9203      	str	r2, [sp, #12]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	bfb8      	it	lt
 8009b2c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009b30:	f108 0802 	add.w	r8, r8, #2
 8009b34:	9305      	str	r3, [sp, #20]
 8009b36:	4d33      	ldr	r5, [pc, #204]	; (8009c04 <_vfiprintf_r+0x21c>)
 8009b38:	f898 1000 	ldrb.w	r1, [r8]
 8009b3c:	2203      	movs	r2, #3
 8009b3e:	4628      	mov	r0, r5
 8009b40:	f7f6 fb4e 	bl	80001e0 <memchr>
 8009b44:	b140      	cbz	r0, 8009b58 <_vfiprintf_r+0x170>
 8009b46:	2340      	movs	r3, #64	; 0x40
 8009b48:	1b40      	subs	r0, r0, r5
 8009b4a:	fa03 f000 	lsl.w	r0, r3, r0
 8009b4e:	9b04      	ldr	r3, [sp, #16]
 8009b50:	4303      	orrs	r3, r0
 8009b52:	f108 0801 	add.w	r8, r8, #1
 8009b56:	9304      	str	r3, [sp, #16]
 8009b58:	f898 1000 	ldrb.w	r1, [r8]
 8009b5c:	482a      	ldr	r0, [pc, #168]	; (8009c08 <_vfiprintf_r+0x220>)
 8009b5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b62:	2206      	movs	r2, #6
 8009b64:	f108 0701 	add.w	r7, r8, #1
 8009b68:	f7f6 fb3a 	bl	80001e0 <memchr>
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	d037      	beq.n	8009be0 <_vfiprintf_r+0x1f8>
 8009b70:	4b26      	ldr	r3, [pc, #152]	; (8009c0c <_vfiprintf_r+0x224>)
 8009b72:	bb1b      	cbnz	r3, 8009bbc <_vfiprintf_r+0x1d4>
 8009b74:	9b03      	ldr	r3, [sp, #12]
 8009b76:	3307      	adds	r3, #7
 8009b78:	f023 0307 	bic.w	r3, r3, #7
 8009b7c:	3308      	adds	r3, #8
 8009b7e:	9303      	str	r3, [sp, #12]
 8009b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b82:	444b      	add	r3, r9
 8009b84:	9309      	str	r3, [sp, #36]	; 0x24
 8009b86:	e750      	b.n	8009a2a <_vfiprintf_r+0x42>
 8009b88:	fb05 3202 	mla	r2, r5, r2, r3
 8009b8c:	2001      	movs	r0, #1
 8009b8e:	4688      	mov	r8, r1
 8009b90:	e78a      	b.n	8009aa8 <_vfiprintf_r+0xc0>
 8009b92:	2300      	movs	r3, #0
 8009b94:	f108 0801 	add.w	r8, r8, #1
 8009b98:	9305      	str	r3, [sp, #20]
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	250a      	movs	r5, #10
 8009b9e:	4640      	mov	r0, r8
 8009ba0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ba4:	3a30      	subs	r2, #48	; 0x30
 8009ba6:	2a09      	cmp	r2, #9
 8009ba8:	d903      	bls.n	8009bb2 <_vfiprintf_r+0x1ca>
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d0c3      	beq.n	8009b36 <_vfiprintf_r+0x14e>
 8009bae:	9105      	str	r1, [sp, #20]
 8009bb0:	e7c1      	b.n	8009b36 <_vfiprintf_r+0x14e>
 8009bb2:	fb05 2101 	mla	r1, r5, r1, r2
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	4680      	mov	r8, r0
 8009bba:	e7f0      	b.n	8009b9e <_vfiprintf_r+0x1b6>
 8009bbc:	ab03      	add	r3, sp, #12
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	4622      	mov	r2, r4
 8009bc2:	4b13      	ldr	r3, [pc, #76]	; (8009c10 <_vfiprintf_r+0x228>)
 8009bc4:	a904      	add	r1, sp, #16
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	f7fb ffaa 	bl	8005b20 <_printf_float>
 8009bcc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009bd0:	4681      	mov	r9, r0
 8009bd2:	d1d5      	bne.n	8009b80 <_vfiprintf_r+0x198>
 8009bd4:	89a3      	ldrh	r3, [r4, #12]
 8009bd6:	065b      	lsls	r3, r3, #25
 8009bd8:	f53f af7e 	bmi.w	8009ad8 <_vfiprintf_r+0xf0>
 8009bdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bde:	e77d      	b.n	8009adc <_vfiprintf_r+0xf4>
 8009be0:	ab03      	add	r3, sp, #12
 8009be2:	9300      	str	r3, [sp, #0]
 8009be4:	4622      	mov	r2, r4
 8009be6:	4b0a      	ldr	r3, [pc, #40]	; (8009c10 <_vfiprintf_r+0x228>)
 8009be8:	a904      	add	r1, sp, #16
 8009bea:	4630      	mov	r0, r6
 8009bec:	f7fc fa4e 	bl	800608c <_printf_i>
 8009bf0:	e7ec      	b.n	8009bcc <_vfiprintf_r+0x1e4>
 8009bf2:	bf00      	nop
 8009bf4:	08009fb8 	.word	0x08009fb8
 8009bf8:	0800a104 	.word	0x0800a104
 8009bfc:	08009fd8 	.word	0x08009fd8
 8009c00:	08009f98 	.word	0x08009f98
 8009c04:	0800a10a 	.word	0x0800a10a
 8009c08:	0800a10e 	.word	0x0800a10e
 8009c0c:	08005b21 	.word	0x08005b21
 8009c10:	080099c3 	.word	0x080099c3

08009c14 <_sbrk_r>:
 8009c14:	b538      	push	{r3, r4, r5, lr}
 8009c16:	4c06      	ldr	r4, [pc, #24]	; (8009c30 <_sbrk_r+0x1c>)
 8009c18:	2300      	movs	r3, #0
 8009c1a:	4605      	mov	r5, r0
 8009c1c:	4608      	mov	r0, r1
 8009c1e:	6023      	str	r3, [r4, #0]
 8009c20:	f7f7 fce4 	bl	80015ec <_sbrk>
 8009c24:	1c43      	adds	r3, r0, #1
 8009c26:	d102      	bne.n	8009c2e <_sbrk_r+0x1a>
 8009c28:	6823      	ldr	r3, [r4, #0]
 8009c2a:	b103      	cbz	r3, 8009c2e <_sbrk_r+0x1a>
 8009c2c:	602b      	str	r3, [r5, #0]
 8009c2e:	bd38      	pop	{r3, r4, r5, pc}
 8009c30:	20000450 	.word	0x20000450

08009c34 <__sread>:
 8009c34:	b510      	push	{r4, lr}
 8009c36:	460c      	mov	r4, r1
 8009c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c3c:	f000 f8f4 	bl	8009e28 <_read_r>
 8009c40:	2800      	cmp	r0, #0
 8009c42:	bfab      	itete	ge
 8009c44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c46:	89a3      	ldrhlt	r3, [r4, #12]
 8009c48:	181b      	addge	r3, r3, r0
 8009c4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c4e:	bfac      	ite	ge
 8009c50:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c52:	81a3      	strhlt	r3, [r4, #12]
 8009c54:	bd10      	pop	{r4, pc}

08009c56 <__swrite>:
 8009c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c5a:	461f      	mov	r7, r3
 8009c5c:	898b      	ldrh	r3, [r1, #12]
 8009c5e:	05db      	lsls	r3, r3, #23
 8009c60:	4605      	mov	r5, r0
 8009c62:	460c      	mov	r4, r1
 8009c64:	4616      	mov	r6, r2
 8009c66:	d505      	bpl.n	8009c74 <__swrite+0x1e>
 8009c68:	2302      	movs	r3, #2
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c70:	f000 f886 	bl	8009d80 <_lseek_r>
 8009c74:	89a3      	ldrh	r3, [r4, #12]
 8009c76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c7e:	81a3      	strh	r3, [r4, #12]
 8009c80:	4632      	mov	r2, r6
 8009c82:	463b      	mov	r3, r7
 8009c84:	4628      	mov	r0, r5
 8009c86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c8a:	f000 b835 	b.w	8009cf8 <_write_r>

08009c8e <__sseek>:
 8009c8e:	b510      	push	{r4, lr}
 8009c90:	460c      	mov	r4, r1
 8009c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c96:	f000 f873 	bl	8009d80 <_lseek_r>
 8009c9a:	1c43      	adds	r3, r0, #1
 8009c9c:	89a3      	ldrh	r3, [r4, #12]
 8009c9e:	bf15      	itete	ne
 8009ca0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ca2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ca6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009caa:	81a3      	strheq	r3, [r4, #12]
 8009cac:	bf18      	it	ne
 8009cae:	81a3      	strhne	r3, [r4, #12]
 8009cb0:	bd10      	pop	{r4, pc}

08009cb2 <__sclose>:
 8009cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cb6:	f000 b831 	b.w	8009d1c <_close_r>

08009cba <strncmp>:
 8009cba:	b510      	push	{r4, lr}
 8009cbc:	b16a      	cbz	r2, 8009cda <strncmp+0x20>
 8009cbe:	3901      	subs	r1, #1
 8009cc0:	1884      	adds	r4, r0, r2
 8009cc2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009cc6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d103      	bne.n	8009cd6 <strncmp+0x1c>
 8009cce:	42a0      	cmp	r0, r4
 8009cd0:	d001      	beq.n	8009cd6 <strncmp+0x1c>
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d1f5      	bne.n	8009cc2 <strncmp+0x8>
 8009cd6:	1a98      	subs	r0, r3, r2
 8009cd8:	bd10      	pop	{r4, pc}
 8009cda:	4610      	mov	r0, r2
 8009cdc:	e7fc      	b.n	8009cd8 <strncmp+0x1e>

08009cde <__ascii_wctomb>:
 8009cde:	b149      	cbz	r1, 8009cf4 <__ascii_wctomb+0x16>
 8009ce0:	2aff      	cmp	r2, #255	; 0xff
 8009ce2:	bf85      	ittet	hi
 8009ce4:	238a      	movhi	r3, #138	; 0x8a
 8009ce6:	6003      	strhi	r3, [r0, #0]
 8009ce8:	700a      	strbls	r2, [r1, #0]
 8009cea:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009cee:	bf98      	it	ls
 8009cf0:	2001      	movls	r0, #1
 8009cf2:	4770      	bx	lr
 8009cf4:	4608      	mov	r0, r1
 8009cf6:	4770      	bx	lr

08009cf8 <_write_r>:
 8009cf8:	b538      	push	{r3, r4, r5, lr}
 8009cfa:	4c07      	ldr	r4, [pc, #28]	; (8009d18 <_write_r+0x20>)
 8009cfc:	4605      	mov	r5, r0
 8009cfe:	4608      	mov	r0, r1
 8009d00:	4611      	mov	r1, r2
 8009d02:	2200      	movs	r2, #0
 8009d04:	6022      	str	r2, [r4, #0]
 8009d06:	461a      	mov	r2, r3
 8009d08:	f7f7 fc1f 	bl	800154a <_write>
 8009d0c:	1c43      	adds	r3, r0, #1
 8009d0e:	d102      	bne.n	8009d16 <_write_r+0x1e>
 8009d10:	6823      	ldr	r3, [r4, #0]
 8009d12:	b103      	cbz	r3, 8009d16 <_write_r+0x1e>
 8009d14:	602b      	str	r3, [r5, #0]
 8009d16:	bd38      	pop	{r3, r4, r5, pc}
 8009d18:	20000450 	.word	0x20000450

08009d1c <_close_r>:
 8009d1c:	b538      	push	{r3, r4, r5, lr}
 8009d1e:	4c06      	ldr	r4, [pc, #24]	; (8009d38 <_close_r+0x1c>)
 8009d20:	2300      	movs	r3, #0
 8009d22:	4605      	mov	r5, r0
 8009d24:	4608      	mov	r0, r1
 8009d26:	6023      	str	r3, [r4, #0]
 8009d28:	f7f7 fc2b 	bl	8001582 <_close>
 8009d2c:	1c43      	adds	r3, r0, #1
 8009d2e:	d102      	bne.n	8009d36 <_close_r+0x1a>
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	b103      	cbz	r3, 8009d36 <_close_r+0x1a>
 8009d34:	602b      	str	r3, [r5, #0]
 8009d36:	bd38      	pop	{r3, r4, r5, pc}
 8009d38:	20000450 	.word	0x20000450

08009d3c <_fstat_r>:
 8009d3c:	b538      	push	{r3, r4, r5, lr}
 8009d3e:	4c07      	ldr	r4, [pc, #28]	; (8009d5c <_fstat_r+0x20>)
 8009d40:	2300      	movs	r3, #0
 8009d42:	4605      	mov	r5, r0
 8009d44:	4608      	mov	r0, r1
 8009d46:	4611      	mov	r1, r2
 8009d48:	6023      	str	r3, [r4, #0]
 8009d4a:	f7f7 fc26 	bl	800159a <_fstat>
 8009d4e:	1c43      	adds	r3, r0, #1
 8009d50:	d102      	bne.n	8009d58 <_fstat_r+0x1c>
 8009d52:	6823      	ldr	r3, [r4, #0]
 8009d54:	b103      	cbz	r3, 8009d58 <_fstat_r+0x1c>
 8009d56:	602b      	str	r3, [r5, #0]
 8009d58:	bd38      	pop	{r3, r4, r5, pc}
 8009d5a:	bf00      	nop
 8009d5c:	20000450 	.word	0x20000450

08009d60 <_isatty_r>:
 8009d60:	b538      	push	{r3, r4, r5, lr}
 8009d62:	4c06      	ldr	r4, [pc, #24]	; (8009d7c <_isatty_r+0x1c>)
 8009d64:	2300      	movs	r3, #0
 8009d66:	4605      	mov	r5, r0
 8009d68:	4608      	mov	r0, r1
 8009d6a:	6023      	str	r3, [r4, #0]
 8009d6c:	f7f7 fc25 	bl	80015ba <_isatty>
 8009d70:	1c43      	adds	r3, r0, #1
 8009d72:	d102      	bne.n	8009d7a <_isatty_r+0x1a>
 8009d74:	6823      	ldr	r3, [r4, #0]
 8009d76:	b103      	cbz	r3, 8009d7a <_isatty_r+0x1a>
 8009d78:	602b      	str	r3, [r5, #0]
 8009d7a:	bd38      	pop	{r3, r4, r5, pc}
 8009d7c:	20000450 	.word	0x20000450

08009d80 <_lseek_r>:
 8009d80:	b538      	push	{r3, r4, r5, lr}
 8009d82:	4c07      	ldr	r4, [pc, #28]	; (8009da0 <_lseek_r+0x20>)
 8009d84:	4605      	mov	r5, r0
 8009d86:	4608      	mov	r0, r1
 8009d88:	4611      	mov	r1, r2
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	6022      	str	r2, [r4, #0]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	f7f7 fc1e 	bl	80015d0 <_lseek>
 8009d94:	1c43      	adds	r3, r0, #1
 8009d96:	d102      	bne.n	8009d9e <_lseek_r+0x1e>
 8009d98:	6823      	ldr	r3, [r4, #0]
 8009d9a:	b103      	cbz	r3, 8009d9e <_lseek_r+0x1e>
 8009d9c:	602b      	str	r3, [r5, #0]
 8009d9e:	bd38      	pop	{r3, r4, r5, pc}
 8009da0:	20000450 	.word	0x20000450

08009da4 <memmove>:
 8009da4:	4288      	cmp	r0, r1
 8009da6:	b510      	push	{r4, lr}
 8009da8:	eb01 0302 	add.w	r3, r1, r2
 8009dac:	d807      	bhi.n	8009dbe <memmove+0x1a>
 8009dae:	1e42      	subs	r2, r0, #1
 8009db0:	4299      	cmp	r1, r3
 8009db2:	d00a      	beq.n	8009dca <memmove+0x26>
 8009db4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009db8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009dbc:	e7f8      	b.n	8009db0 <memmove+0xc>
 8009dbe:	4283      	cmp	r3, r0
 8009dc0:	d9f5      	bls.n	8009dae <memmove+0xa>
 8009dc2:	1881      	adds	r1, r0, r2
 8009dc4:	1ad2      	subs	r2, r2, r3
 8009dc6:	42d3      	cmn	r3, r2
 8009dc8:	d100      	bne.n	8009dcc <memmove+0x28>
 8009dca:	bd10      	pop	{r4, pc}
 8009dcc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009dd0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009dd4:	e7f7      	b.n	8009dc6 <memmove+0x22>

08009dd6 <__malloc_lock>:
 8009dd6:	4770      	bx	lr

08009dd8 <__malloc_unlock>:
 8009dd8:	4770      	bx	lr

08009dda <_realloc_r>:
 8009dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ddc:	4607      	mov	r7, r0
 8009dde:	4614      	mov	r4, r2
 8009de0:	460e      	mov	r6, r1
 8009de2:	b921      	cbnz	r1, 8009dee <_realloc_r+0x14>
 8009de4:	4611      	mov	r1, r2
 8009de6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009dea:	f7ff bc27 	b.w	800963c <_malloc_r>
 8009dee:	b922      	cbnz	r2, 8009dfa <_realloc_r+0x20>
 8009df0:	f7ff fbd6 	bl	80095a0 <_free_r>
 8009df4:	4625      	mov	r5, r4
 8009df6:	4628      	mov	r0, r5
 8009df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dfa:	f000 f827 	bl	8009e4c <_malloc_usable_size_r>
 8009dfe:	42a0      	cmp	r0, r4
 8009e00:	d20f      	bcs.n	8009e22 <_realloc_r+0x48>
 8009e02:	4621      	mov	r1, r4
 8009e04:	4638      	mov	r0, r7
 8009e06:	f7ff fc19 	bl	800963c <_malloc_r>
 8009e0a:	4605      	mov	r5, r0
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	d0f2      	beq.n	8009df6 <_realloc_r+0x1c>
 8009e10:	4631      	mov	r1, r6
 8009e12:	4622      	mov	r2, r4
 8009e14:	f7fb fddc 	bl	80059d0 <memcpy>
 8009e18:	4631      	mov	r1, r6
 8009e1a:	4638      	mov	r0, r7
 8009e1c:	f7ff fbc0 	bl	80095a0 <_free_r>
 8009e20:	e7e9      	b.n	8009df6 <_realloc_r+0x1c>
 8009e22:	4635      	mov	r5, r6
 8009e24:	e7e7      	b.n	8009df6 <_realloc_r+0x1c>
	...

08009e28 <_read_r>:
 8009e28:	b538      	push	{r3, r4, r5, lr}
 8009e2a:	4c07      	ldr	r4, [pc, #28]	; (8009e48 <_read_r+0x20>)
 8009e2c:	4605      	mov	r5, r0
 8009e2e:	4608      	mov	r0, r1
 8009e30:	4611      	mov	r1, r2
 8009e32:	2200      	movs	r2, #0
 8009e34:	6022      	str	r2, [r4, #0]
 8009e36:	461a      	mov	r2, r3
 8009e38:	f7f7 fb6a 	bl	8001510 <_read>
 8009e3c:	1c43      	adds	r3, r0, #1
 8009e3e:	d102      	bne.n	8009e46 <_read_r+0x1e>
 8009e40:	6823      	ldr	r3, [r4, #0]
 8009e42:	b103      	cbz	r3, 8009e46 <_read_r+0x1e>
 8009e44:	602b      	str	r3, [r5, #0]
 8009e46:	bd38      	pop	{r3, r4, r5, pc}
 8009e48:	20000450 	.word	0x20000450

08009e4c <_malloc_usable_size_r>:
 8009e4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e50:	1f18      	subs	r0, r3, #4
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	bfbc      	itt	lt
 8009e56:	580b      	ldrlt	r3, [r1, r0]
 8009e58:	18c0      	addlt	r0, r0, r3
 8009e5a:	4770      	bx	lr

08009e5c <_init>:
 8009e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e5e:	bf00      	nop
 8009e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e62:	bc08      	pop	{r3}
 8009e64:	469e      	mov	lr, r3
 8009e66:	4770      	bx	lr

08009e68 <_fini>:
 8009e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6a:	bf00      	nop
 8009e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e6e:	bc08      	pop	{r3}
 8009e70:	469e      	mov	lr, r3
 8009e72:	4770      	bx	lr
